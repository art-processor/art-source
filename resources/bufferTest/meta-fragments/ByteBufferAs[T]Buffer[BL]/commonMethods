
    public ?@elmtType?Buffer slice() {
	int pos = this.position();
	int lim = this.limit();
	assert (pos <= lim);
	int rem = (pos <= lim ? lim - pos : 0);
	int off = (pos << ?@elmtSize?) + offset;
	return new ByteBufferAs?@elmtType?Buffer?@ByteOrder?(bb, -1, 0, rem, rem, off);
    }

    public ?@elmtType?Buffer duplicate() {
	return new ByteBuByteOrderfferAs?@elmtType?Buffer?@ByteOrder?(bb,
						    this.markValue(),
						    this.position(),
						    this.limit(),
						    this.capacity(),
						    offset);
    }

    public ?@elmtType?Buffer asReadOnlyBuffer() {

	return new ByteBufferAs?@elmtType?BufferR?@ByteOrder?(bb,
						 this.markValue(),
						 this.position(),
						 this.limit(),
						 this.capacity(),
						 offset);

    }

    protected int ix(int i) {
	return (i << ?@elmtSize?) + offset;
    }

    public ?@elmttype? get() {
	return Bits.get?@elmtType??@ByteOrder?(bb, ix(nextGetIndex()));
    }

    public ?@elmttype? get(int i) {
	return Bits.get?@elmtType??@ByteOrder?(bb, ix(checkIndex(i)));
    }

    public ?@elmtType?Buffer put(?@elmttype? x) {

	Bits.put?@elmtType??@ByteOrder?(bb, ix(nextPutIndex()), x);
	return this;

    }

    public ?@elmtType?Buffer put(int i, ?@elmttype? x) {

	Bits.put?@elmtType??@ByteOrder?(bb, ix(checkIndex(i)), x);
	return this;

    }

    public ?@elmtType?Buffer compact() {

	int pos = position();
	int lim = limit();
	assert (pos <= lim);
	int rem = (pos <= lim ? lim - pos : 0);

	ByteBuffer db = bb.duplicate();
 	db.limit(ix(lim));
	db.position(ix(0));
	ByteBuffer sb = db.slice();
	sb.position(pos << ?@elmtSize?);
	sb.compact();
 	position(rem);
	limit(capacity());
	return this;

    }

    public boolean isDirect() {
	return bb.isDirect();
    }

    public boolean isReadOnly() {
	return false;
    }

    public ByteOrder order() {

	#select ByteOrder
		#option B
	return ByteOrder.BIG_ENDIAN;
		#endoption
		#option L
	return ByteOrder.LITTLE_ENDIAN;
		#endoption
	#endselect

    }
