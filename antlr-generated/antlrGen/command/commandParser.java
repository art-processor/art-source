// $ANTLR 3.2 Sep 23, 2009 12:02:23 C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g 2017-03-28 13:21:15

  package antlrGen.command;
    
  import java.io.FileWriter;
  import java.io.IOException;
  
  import art.command.Command;
  import art.command.AdaptCommand;
  import art.command.AdaptCopy;
  import art.command.AdaptCopyBinary;
  import art.command.SetCommand;
  import art.command.OutputCommand;
  import art.command.OutdirCommand;
  import art.command.OutfileCommand;
  import art.command.RemoveCommand;
  import art.command.IfCommand;
  import art.command.SelectCommand;
  import art.command.OptionCommandPart;
  import art.command.InsertCommand;
  import art.command.BreakCommand;
  import art.command.WhileCommand;
  import art.command.SetLoopCommand;
  import art.command.SetLoopVarBreak;
  import art.command.SetLoopIterBreak;
  import art.utils.Utils;
  import art.utils.SelectInfo;
  import art.utils.SetLoopInfo;
  import art.type.InsertType;
  import art.type.LoopVariable;
  import art.exception.MissingVariableException;
  import art.exception.ARTSyntaxException;
  import art.stat.StatParam;
  import art.stat.ExprRecord;
  import art.stat.IfdefRecord;
  import art.stat.IfndefRecord;


import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.tree.*;

public class commandParser extends Parser {
    public static final String[] tokenNames = new String[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "NEGATION", "DEFINED", "ARTVARCHAR", "NL", "COMMANDCHAR", "IDENT", "SIMPLEADAPT", "ADAPTSAMELEVEL", "EXTENDEDADAPT", "EXTENDEDADAPTSAMELEVEL", "ENDADAPT", "ADAPTCOPY", "SET", "SETDEFER", "OUTPUT", "OUTDIR", "OUTFILE", "IF", "ENDIF", "ELIF", "ELSE", "IFDEF", "IFNDEF", "REMOVE", "SELECT", "ENDSELECT", "OPTIONUNDEFINED", "ENDOPTION", "OPTION", "OTHERWISE", "ENDOTHERWISE", "INSERT", "ENDINSERT", "INSERTBEFORE", "INSERTAFTER", "EXTENDEDBREAK", "ENDBREAK", "BREAK", "WHILE", "ENDWHILE", "SETLOOP", "ENDSETLOOP", "VARS", "ENDVARS", "VAR", "ITER", "MESSAGE", "EXTENDEDMESSAGE", "ENDMESSAGE", "MESSAGEIF", "EXTENDEDMESSAGEIF", "MESSAGEDEBUG", "EXTENDEDMESSAGEDEBUG", "TEXT", "ENDTEXT", "STRING", "EPRESSIONCHAR", "REFERENCECHAR", "INTEGER", "ISLAST", "ISFIRST", "SIZE", "ISNUMERIC", "ULCAP", "LLCAP", "DEBUGMODE", "CURRENTFILE", "DEFAULTOUTPUT", "COMMENTCHAR", "QUOTATIONMARK", "STRINGNOEND", "NOTNEWLINE", "WS", "COMMENT", "ESCCOMMENT", "DIGIT", "SPECCHAR", "LETTER", "DOT", "ANYCHAR", "'='", "','", "'('", "')'", "'|'", "'&&'", "'||'", "'true'", "'false'", "'=='", "'!='", "'<'", "'<='", "'>='", "'>'", "'+'", "'-'", "'*'", "'/'", "'defined'", "'$'", "'\\\\\"'", "'\\\\#'", "'\\\\?'", "'\\\\%'", "'\\\\$'"
    };
    public static final int WHILE=42;
    public static final int LETTER=81;
    public static final int REMOVE=27;
    public static final int ENDSELECT=29;
    public static final int EOF=-1;
    public static final int BREAK=41;
    public static final int ENDTEXT=58;
    public static final int T__93=93;
    public static final int T__94=94;
    public static final int T__91=91;
    public static final int T__92=92;
    public static final int T__90=90;
    public static final int INSERT=35;
    public static final int STRINGNOEND=74;
    public static final int INSERTAFTER=38;
    public static final int ARTVARCHAR=6;
    public static final int ENDIF=22;
    public static final int ANYCHAR=83;
    public static final int LLCAP=68;
    public static final int VAR=48;
    public static final int NL=7;
    public static final int ENDWHILE=43;
    public static final int COMMENT=77;
    public static final int ENDOPTION=31;
    public static final int SELECT=28;
    public static final int T__99=99;
    public static final int T__98=98;
    public static final int EXTENDEDMESSAGE=51;
    public static final int T__97=97;
    public static final int T__96=96;
    public static final int OTHERWISE=33;
    public static final int T__95=95;
    public static final int SETDEFER=17;
    public static final int DEFINED=5;
    public static final int ELSE=24;
    public static final int MESSAGEDEBUG=55;
    public static final int T__85=85;
    public static final int T__84=84;
    public static final int T__87=87;
    public static final int T__86=86;
    public static final int DEBUGMODE=69;
    public static final int T__89=89;
    public static final int T__88=88;
    public static final int ELIF=23;
    public static final int WS=76;
    public static final int ENDBREAK=40;
    public static final int DEFAULTOUTPUT=71;
    public static final int ISLAST=63;
    public static final int EXTENDEDADAPT=12;
    public static final int MESSAGEIF=53;
    public static final int ENDADAPT=14;
    public static final int OUTPUT=18;
    public static final int SIZE=65;
    public static final int ADAPTSAMELEVEL=11;
    public static final int COMMANDCHAR=8;
    public static final int OPTION=32;
    public static final int ADAPTCOPY=15;
    public static final int SPECCHAR=80;
    public static final int ENDOTHERWISE=34;
    public static final int IF=21;
    public static final int T__107=107;
    public static final int T__108=108;
    public static final int T__109=109;
    public static final int INSERTBEFORE=37;
    public static final int T__103=103;
    public static final int EXTENDEDADAPTSAMELEVEL=13;
    public static final int T__104=104;
    public static final int T__105=105;
    public static final int T__106=106;
    public static final int SIMPLEADAPT=10;
    public static final int IDENT=9;
    public static final int MESSAGE=50;
    public static final int OUTFILE=20;
    public static final int DIGIT=79;
    public static final int DOT=82;
    public static final int ENDMESSAGE=52;
    public static final int EXTENDEDBREAK=39;
    public static final int INTEGER=62;
    public static final int OPTIONUNDEFINED=30;
    public static final int REFERENCECHAR=61;
    public static final int ENDINSERT=36;
    public static final int ENDVARS=47;
    public static final int EPRESSIONCHAR=60;
    public static final int ISNUMERIC=66;
    public static final int EXTENDEDMESSAGEDEBUG=56;
    public static final int ULCAP=67;
    public static final int IFNDEF=26;
    public static final int VARS=46;
    public static final int ITER=49;
    public static final int SET=16;
    public static final int T__102=102;
    public static final int T__101=101;
    public static final int T__100=100;
    public static final int IFDEF=25;
    public static final int TEXT=57;
    public static final int ENDSETLOOP=45;
    public static final int ISFIRST=64;
    public static final int COMMENTCHAR=72;
    public static final int NEGATION=4;
    public static final int QUOTATIONMARK=73;
    public static final int CURRENTFILE=70;
    public static final int OUTDIR=19;
    public static final int NOTNEWLINE=75;
    public static final int ESCCOMMENT=78;
    public static final int SETLOOP=44;
    public static final int EXTENDEDMESSAGEIF=54;
    public static final int STRING=59;

    // delegates
    // delegators


        public commandParser(TokenStream input) {
            this(input, new RecognizerSharedState());
        }
        public commandParser(TokenStream input, RecognizerSharedState state) {
            super(input, state);
             
        }
        
    protected TreeAdaptor adaptor = new CommonTreeAdaptor();

    public void setTreeAdaptor(TreeAdaptor adaptor) {
        this.adaptor = adaptor;
    }
    public TreeAdaptor getTreeAdaptor() {
        return adaptor;
    }

    public String[] getTokenNames() { return commandParser.tokenNames; }
    public String getGrammarFileName() { return "C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g"; }


      private FileWriter out;
      private Command command;
      private int lineNo;
      private StatParam statParam = StatParam.getInstance();
     
      private void write(String str){
      out = Utils.getActualOutput();
      
      String str2 = str.replace("\\\"", "\"");
      str2 = str2.replace("\\#", "#");
      str2 = str2.replace("\\?", "?");
      str2 = str2.replace("\\%", "%");
      str2 = str2.replace("\\$", "$");
       
        if (Utils.canWrite()){ 
          try {
                out.write(str2);
                out.flush();
          } catch (IOException e) {
              System.err.println(e.getMessage());
    //          e.printStackTrace();
          }
        }   
      }
      
       private void writeText(String str){
      out = Utils.getActualOutput();
      
      String str2 = str.replace("\\\"", "\"");
      str2 = str2.replace("\\#", "#");
      str2 = str2.replace("\\?", "?");
      str2 = str2.replace("\\%", "%");
      str2 = str2.replace("\\$", "$");
       
          try {
                out.write(str2);
                out.flush();
          } catch (IOException e) {
              System.err.println(e.getMessage());
    //          e.printStackTrace();
          } 
      }
      
      private void writeMessage(String message){
        if (Utils.canWrite()){
            System.out.print(message);
        }
      }
      
       private void writeExpressionMessage(String expr, int line){
        if (Utils.canWrite()){
            try {
                String res = Utils.getExpressionsVal(expr, line);
                System.out.print(res);
            } catch (MissingVariableException e) {
                System.err.println(e.getMessage());
    //            e.printStackTrace();
            }
          }
      }
      
      private void writeExpression(String expr, int line){
          if (Utils.canWrite()){
            try {
                String res = Utils.getExpressionsVal(expr, line);
                out.write(res);
                out.flush();
                
                if(statParam.isStatEnabled()) {
                  try {
                    ExprRecord er = new ExprRecord();
                    er.setLineNo(lineNo);
                    er.setFileId(statParam.getCurrentFileId());
                    er.setExpr(expr);
                    er.setValue(res);
                    er.setUsedSetIdList(statParam.getUsedSetIdList());
                    er.save();
                  } catch (Exception exp) {
                    System.out.println("Error occured while processing statistics." + exp.getMessage());
                    exp.printStackTrace();
                  }
                }
            } catch (IOException e) {
                System.err.println(e.getMessage());
    //            e.printStackTrace();
            } catch (MissingVariableException e) {
                throw e;
            }
          }
      }
      
      private void append(StringBuilder sb, String text){
          if (!(null == text)){
              sb.append(text);
          }
      }


    public static class evaluator_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "evaluator"
    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:165:1: evaluator : ( ( ws )* c= command ( ws )* ( NL )? | se= nameExpression | e= ee )* EOF ;
    public final commandParser.evaluator_return evaluator() throws RecognitionException {
        commandParser.evaluator_return retval = new commandParser.evaluator_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NL3=null;
        Token EOF4=null;
        commandParser.command_return c = null;

        commandParser.nameExpression_return se = null;

        commandParser.ee_return e = null;

        commandParser.ws_return ws1 = null;

        commandParser.ws_return ws2 = null;


        CommonTree NL3_tree=null;
        CommonTree EOF4_tree=null;

          
                out = Utils.getActualOutput(); 
              
        try {
            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:176:3: ( ( ( ws )* c= command ( ws )* ( NL )? | se= nameExpression | e= ee )* EOF )
            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:177:3: ( ( ws )* c= command ( ws )* ( NL )? | se= nameExpression | e= ee )* EOF
            {
            root_0 = (CommonTree)adaptor.nil();

            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:177:3: ( ( ws )* c= command ( ws )* ( NL )? | se= nameExpression | e= ee )*
            loop4:
            do {
                int alt4=4;
                switch ( input.LA(1) ) {
                case WS:
                    {
                    int LA4_2 = input.LA(2);

                    if ( (synpred4_command()) ) {
                        alt4=1;
                    }
                    else if ( (synpred6_command()) ) {
                        alt4=3;
                    }


                    }
                    break;
                case COMMANDCHAR:
                    {
                    alt4=1;
                    }
                    break;
                case EPRESSIONCHAR:
                    {
                    alt4=2;
                    }
                    break;
                case NEGATION:
                case DEFINED:
                case ARTVARCHAR:
                case NL:
                case IDENT:
                case SIMPLEADAPT:
                case ADAPTSAMELEVEL:
                case EXTENDEDADAPT:
                case EXTENDEDADAPTSAMELEVEL:
                case ENDADAPT:
                case ADAPTCOPY:
                case SET:
                case SETDEFER:
                case OUTPUT:
                case OUTDIR:
                case OUTFILE:
                case IF:
                case ENDIF:
                case ELIF:
                case ELSE:
                case IFDEF:
                case IFNDEF:
                case REMOVE:
                case SELECT:
                case ENDSELECT:
                case OPTIONUNDEFINED:
                case ENDOPTION:
                case OPTION:
                case OTHERWISE:
                case ENDOTHERWISE:
                case INSERT:
                case ENDINSERT:
                case INSERTBEFORE:
                case INSERTAFTER:
                case EXTENDEDBREAK:
                case ENDBREAK:
                case BREAK:
                case WHILE:
                case ENDWHILE:
                case SETLOOP:
                case ENDSETLOOP:
                case VARS:
                case ENDVARS:
                case VAR:
                case ITER:
                case MESSAGE:
                case EXTENDEDMESSAGE:
                case ENDMESSAGE:
                case MESSAGEIF:
                case EXTENDEDMESSAGEIF:
                case MESSAGEDEBUG:
                case EXTENDEDMESSAGEDEBUG:
                case TEXT:
                case ENDTEXT:
                case STRING:
                case REFERENCECHAR:
                case INTEGER:
                case ISLAST:
                case ISFIRST:
                case SIZE:
                case ISNUMERIC:
                case ULCAP:
                case LLCAP:
                case DEBUGMODE:
                case CURRENTFILE:
                case DEFAULTOUTPUT:
                case COMMENTCHAR:
                case QUOTATIONMARK:
                case STRINGNOEND:
                case NOTNEWLINE:
                case COMMENT:
                case ESCCOMMENT:
                case DIGIT:
                case SPECCHAR:
                case LETTER:
                case DOT:
                case ANYCHAR:
                case 84:
                case 85:
                case 86:
                case 87:
                case 88:
                case 89:
                case 90:
                case 91:
                case 92:
                case 93:
                case 94:
                case 95:
                case 96:
                case 97:
                case 98:
                case 99:
                case 100:
                case 101:
                case 102:
                case 103:
                case 104:
                case 105:
                case 106:
                case 107:
                case 108:
                case 109:
                    {
                    alt4=3;
                    }
                    break;

                }

                switch (alt4) {
            	case 1 :
            	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:177:5: ( ws )* c= command ( ws )* ( NL )?
            	    {
            	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:177:5: ( ws )*
            	    loop1:
            	    do {
            	        int alt1=2;
            	        int LA1_0 = input.LA(1);

            	        if ( (LA1_0==WS) ) {
            	            alt1=1;
            	        }


            	        switch (alt1) {
            	    	case 1 :
            	    	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:0:0: ws
            	    	    {
            	    	    pushFollow(FOLLOW_ws_in_evaluator122);
            	    	    ws1=ws();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, ws1.getTree());

            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop1;
            	        }
            	    } while (true);

            	    pushFollow(FOLLOW_command_in_evaluator127);
            	    c=command();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, c.getTree());
            	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:177:19: ( ws )*
            	    loop2:
            	    do {
            	        int alt2=2;
            	        int LA2_0 = input.LA(1);

            	        if ( (LA2_0==WS) ) {
            	            int LA2_2 = input.LA(2);

            	            if ( (synpred2_command()) ) {
            	                alt2=1;
            	            }


            	        }


            	        switch (alt2) {
            	    	case 1 :
            	    	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:0:0: ws
            	    	    {
            	    	    pushFollow(FOLLOW_ws_in_evaluator129);
            	    	    ws2=ws();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, ws2.getTree());

            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop2;
            	        }
            	    } while (true);

            	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:177:23: ( NL )?
            	    int alt3=2;
            	    int LA3_0 = input.LA(1);

            	    if ( (LA3_0==NL) ) {
            	        int LA3_1 = input.LA(2);

            	        if ( (synpred3_command()) ) {
            	            alt3=1;
            	        }
            	    }
            	    switch (alt3) {
            	        case 1 :
            	            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:0:0: NL
            	            {
            	            NL3=(Token)match(input,NL,FOLLOW_NL_in_evaluator132); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            NL3_tree = (CommonTree)adaptor.create(NL3);
            	            adaptor.addChild(root_0, NL3_tree);
            	            }

            	            }
            	            break;

            	    }


            	    }
            	    break;
            	case 2 :
            	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:178:5: se= nameExpression
            	    {
            	    pushFollow(FOLLOW_nameExpression_in_evaluator141);
            	    se=nameExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, se.getTree());
            	    if ( state.backtracking==0 ) {
            	      writeExpression((se!=null?input.toString(se.start,se.stop):null), se.tree.getLine()); 
            	    }

            	    }
            	    break;
            	case 3 :
            	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:180:5: e= ee
            	    {
            	    pushFollow(FOLLOW_ee_in_evaluator152);
            	    e=ee();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, e.getTree());
            	    if ( state.backtracking==0 ) {
            	      write((e!=null?input.toString(e.start,e.stop):null));
            	    }

            	    }
            	    break;

            	default :
            	    break loop4;
                }
            } while (true);

            EOF4=(Token)match(input,EOF,FOLLOW_EOF_in_evaluator161); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            EOF4_tree = (CommonTree)adaptor.create(EOF4);
            adaptor.addChild(root_0, EOF4_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {

                        try {  
                            out.flush();   
                        } catch (IOException ex) {
                            System.err.println(ex.getMessage());
                        }
                     
            }
        }

            catch (RecognitionException ex) {
                  throw new ARTSyntaxException("Syntax error in File: " + Utils.getCurrentFile() + " line: " + (ex.line == 0 ? Utils.getExpressionLine() : ex.line) + " (" + ex.getStackTrace()[0].getMethodName() + ")");
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "evaluator"

    public static class command_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "command"
    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:185:1: command : COMMANDCHAR ( set | adapt | outputCommand | insertCommand | insertBefCommand | insertAftCommand | breakCommand | removeCommand | ifCommand | ifDefCommand | ifnDefCommand | selectCommand | whileCommand | setLoopCommand | messageCommand | textCommand | IDENT (w= ws )* ( NL )? ) ;
    public final commandParser.command_return command() throws RecognitionException {
        commandParser.command_return retval = new commandParser.command_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token COMMANDCHAR5=null;
        Token IDENT22=null;
        Token NL23=null;
        commandParser.ws_return w = null;

        commandParser.set_return set6 = null;

        commandParser.adapt_return adapt7 = null;

        commandParser.outputCommand_return outputCommand8 = null;

        commandParser.insertCommand_return insertCommand9 = null;

        commandParser.insertBefCommand_return insertBefCommand10 = null;

        commandParser.insertAftCommand_return insertAftCommand11 = null;

        commandParser.breakCommand_return breakCommand12 = null;

        commandParser.removeCommand_return removeCommand13 = null;

        commandParser.ifCommand_return ifCommand14 = null;

        commandParser.ifDefCommand_return ifDefCommand15 = null;

        commandParser.ifnDefCommand_return ifnDefCommand16 = null;

        commandParser.selectCommand_return selectCommand17 = null;

        commandParser.whileCommand_return whileCommand18 = null;

        commandParser.setLoopCommand_return setLoopCommand19 = null;

        commandParser.messageCommand_return messageCommand20 = null;

        commandParser.textCommand_return textCommand21 = null;


        CommonTree COMMANDCHAR5_tree=null;
        CommonTree IDENT22_tree=null;
        CommonTree NL23_tree=null;

        try {
            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:186:3: ( COMMANDCHAR ( set | adapt | outputCommand | insertCommand | insertBefCommand | insertAftCommand | breakCommand | removeCommand | ifCommand | ifDefCommand | ifnDefCommand | selectCommand | whileCommand | setLoopCommand | messageCommand | textCommand | IDENT (w= ws )* ( NL )? ) )
            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:186:5: COMMANDCHAR ( set | adapt | outputCommand | insertCommand | insertBefCommand | insertAftCommand | breakCommand | removeCommand | ifCommand | ifDefCommand | ifnDefCommand | selectCommand | whileCommand | setLoopCommand | messageCommand | textCommand | IDENT (w= ws )* ( NL )? )
            {
            root_0 = (CommonTree)adaptor.nil();

            COMMANDCHAR5=(Token)match(input,COMMANDCHAR,FOLLOW_COMMANDCHAR_in_command179); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            COMMANDCHAR5_tree = (CommonTree)adaptor.create(COMMANDCHAR5);
            adaptor.addChild(root_0, COMMANDCHAR5_tree);
            }
            if ( state.backtracking==0 ) {
              lineNo = COMMANDCHAR5.getLine();
            }
            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:187:3: ( set | adapt | outputCommand | insertCommand | insertBefCommand | insertAftCommand | breakCommand | removeCommand | ifCommand | ifDefCommand | ifnDefCommand | selectCommand | whileCommand | setLoopCommand | messageCommand | textCommand | IDENT (w= ws )* ( NL )? )
            int alt7=17;
            switch ( input.LA(1) ) {
            case SET:
            case SETDEFER:
                {
                alt7=1;
                }
                break;
            case SIMPLEADAPT:
            case ADAPTSAMELEVEL:
            case EXTENDEDADAPT:
            case EXTENDEDADAPTSAMELEVEL:
            case ADAPTCOPY:
                {
                alt7=2;
                }
                break;
            case OUTPUT:
            case OUTDIR:
            case OUTFILE:
                {
                alt7=3;
                }
                break;
            case INSERT:
                {
                alt7=4;
                }
                break;
            case INSERTBEFORE:
                {
                alt7=5;
                }
                break;
            case INSERTAFTER:
                {
                alt7=6;
                }
                break;
            case EXTENDEDBREAK:
            case BREAK:
                {
                alt7=7;
                }
                break;
            case REMOVE:
                {
                alt7=8;
                }
                break;
            case IF:
                {
                alt7=9;
                }
                break;
            case IFDEF:
                {
                alt7=10;
                }
                break;
            case IFNDEF:
                {
                alt7=11;
                }
                break;
            case SELECT:
                {
                alt7=12;
                }
                break;
            case WHILE:
                {
                alt7=13;
                }
                break;
            case SETLOOP:
                {
                alt7=14;
                }
                break;
            case MESSAGE:
            case EXTENDEDMESSAGE:
            case MESSAGEIF:
            case EXTENDEDMESSAGEIF:
            case MESSAGEDEBUG:
            case EXTENDEDMESSAGEDEBUG:
                {
                alt7=15;
                }
                break;
            case TEXT:
                {
                alt7=16;
                }
                break;
            case IDENT:
                {
                alt7=17;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 7, 0, input);

                throw nvae;
            }

            switch (alt7) {
                case 1 :
                    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:187:5: set
                    {
                    pushFollow(FOLLOW_set_in_command187);
                    set6=set();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, set6.getTree());

                    }
                    break;
                case 2 :
                    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:188:5: adapt
                    {
                    pushFollow(FOLLOW_adapt_in_command193);
                    adapt7=adapt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, adapt7.getTree());

                    }
                    break;
                case 3 :
                    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:189:5: outputCommand
                    {
                    pushFollow(FOLLOW_outputCommand_in_command199);
                    outputCommand8=outputCommand();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, outputCommand8.getTree());

                    }
                    break;
                case 4 :
                    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:190:5: insertCommand
                    {
                    pushFollow(FOLLOW_insertCommand_in_command205);
                    insertCommand9=insertCommand();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, insertCommand9.getTree());

                    }
                    break;
                case 5 :
                    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:191:5: insertBefCommand
                    {
                    pushFollow(FOLLOW_insertBefCommand_in_command211);
                    insertBefCommand10=insertBefCommand();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, insertBefCommand10.getTree());

                    }
                    break;
                case 6 :
                    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:192:5: insertAftCommand
                    {
                    pushFollow(FOLLOW_insertAftCommand_in_command217);
                    insertAftCommand11=insertAftCommand();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, insertAftCommand11.getTree());

                    }
                    break;
                case 7 :
                    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:193:5: breakCommand
                    {
                    pushFollow(FOLLOW_breakCommand_in_command223);
                    breakCommand12=breakCommand();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, breakCommand12.getTree());

                    }
                    break;
                case 8 :
                    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:194:5: removeCommand
                    {
                    pushFollow(FOLLOW_removeCommand_in_command229);
                    removeCommand13=removeCommand();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, removeCommand13.getTree());

                    }
                    break;
                case 9 :
                    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:195:5: ifCommand
                    {
                    pushFollow(FOLLOW_ifCommand_in_command235);
                    ifCommand14=ifCommand();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, ifCommand14.getTree());

                    }
                    break;
                case 10 :
                    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:196:5: ifDefCommand
                    {
                    pushFollow(FOLLOW_ifDefCommand_in_command241);
                    ifDefCommand15=ifDefCommand();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, ifDefCommand15.getTree());

                    }
                    break;
                case 11 :
                    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:197:5: ifnDefCommand
                    {
                    pushFollow(FOLLOW_ifnDefCommand_in_command247);
                    ifnDefCommand16=ifnDefCommand();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, ifnDefCommand16.getTree());

                    }
                    break;
                case 12 :
                    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:198:5: selectCommand
                    {
                    pushFollow(FOLLOW_selectCommand_in_command253);
                    selectCommand17=selectCommand();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, selectCommand17.getTree());

                    }
                    break;
                case 13 :
                    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:199:5: whileCommand
                    {
                    pushFollow(FOLLOW_whileCommand_in_command259);
                    whileCommand18=whileCommand();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, whileCommand18.getTree());

                    }
                    break;
                case 14 :
                    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:200:5: setLoopCommand
                    {
                    pushFollow(FOLLOW_setLoopCommand_in_command265);
                    setLoopCommand19=setLoopCommand();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, setLoopCommand19.getTree());

                    }
                    break;
                case 15 :
                    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:201:5: messageCommand
                    {
                    pushFollow(FOLLOW_messageCommand_in_command271);
                    messageCommand20=messageCommand();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, messageCommand20.getTree());

                    }
                    break;
                case 16 :
                    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:202:5: textCommand
                    {
                    pushFollow(FOLLOW_textCommand_in_command277);
                    textCommand21=textCommand();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, textCommand21.getTree());

                    }
                    break;
                case 17 :
                    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:203:5: IDENT (w= ws )* ( NL )?
                    {
                    IDENT22=(Token)match(input,IDENT,FOLLOW_IDENT_in_command283); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    IDENT22_tree = (CommonTree)adaptor.create(IDENT22);
                    adaptor.addChild(root_0, IDENT22_tree);
                    }
                    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:203:12: (w= ws )*
                    loop5:
                    do {
                        int alt5=2;
                        int LA5_0 = input.LA(1);

                        if ( (LA5_0==WS) ) {
                            int LA5_2 = input.LA(2);

                            if ( (synpred23_command()) ) {
                                alt5=1;
                            }


                        }


                        switch (alt5) {
                    	case 1 :
                    	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:0:0: w= ws
                    	    {
                    	    pushFollow(FOLLOW_ws_in_command287);
                    	    w=ws();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, w.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop5;
                        }
                    } while (true);

                    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:203:17: ( NL )?
                    int alt6=2;
                    int LA6_0 = input.LA(1);

                    if ( (LA6_0==NL) ) {
                        int LA6_1 = input.LA(2);

                        if ( (synpred24_command()) ) {
                            alt6=1;
                        }
                    }
                    switch (alt6) {
                        case 1 :
                            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:0:0: NL
                            {
                            NL23=(Token)match(input,NL,FOLLOW_NL_in_command290); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            NL23_tree = (CommonTree)adaptor.create(NL23);
                            adaptor.addChild(root_0, NL23_tree);
                            }

                            }
                            break;

                    }

                    if ( state.backtracking==0 ) {

                                String toWrite = (COMMANDCHAR5!=null?COMMANDCHAR5.getText():null);
                                toWrite += (IDENT22!=null?IDENT22.getText():null);
                                if ((w!=null?input.toString(w.start,w.stop):null) != null) toWrite += (w!=null?input.toString(w.start,w.stop):null);
                                if ((NL23!=null?NL23.getText():null) != null) toWrite += (NL23!=null?NL23.getText():null);
                                write(toWrite);
                            
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException ex) {
                  throw new ARTSyntaxException("Syntax error in File: " + Utils.getCurrentFile() + " line: " + (ex.line == 0 ? Utils.getExpressionLine() : ex.line) + " (" + ex.getStackTrace()[0].getMethodName() + ")");
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "command"

    public static class adapt_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "adapt"
    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:214:1: adapt : ( simpleAdapt | extendedAdapt | adaptCopyBinary | adaptCopy );
    public final commandParser.adapt_return adapt() throws RecognitionException {
        commandParser.adapt_return retval = new commandParser.adapt_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        commandParser.simpleAdapt_return simpleAdapt24 = null;

        commandParser.extendedAdapt_return extendedAdapt25 = null;

        commandParser.adaptCopyBinary_return adaptCopyBinary26 = null;

        commandParser.adaptCopy_return adaptCopy27 = null;



        try {
            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:215:3: ( simpleAdapt | extendedAdapt | adaptCopyBinary | adaptCopy )
            int alt8=4;
            switch ( input.LA(1) ) {
            case SIMPLEADAPT:
            case ADAPTSAMELEVEL:
                {
                alt8=1;
                }
                break;
            case EXTENDEDADAPT:
            case EXTENDEDADAPTSAMELEVEL:
                {
                alt8=2;
                }
                break;
            case ADAPTCOPY:
                {
                int LA8_5 = input.LA(2);

                if ( (synpred27_command()) ) {
                    alt8=3;
                }
                else if ( (true) ) {
                    alt8=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 8, 5, input);

                    throw nvae;
                }
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 8, 0, input);

                throw nvae;
            }

            switch (alt8) {
                case 1 :
                    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:215:5: simpleAdapt
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_simpleAdapt_in_adapt317);
                    simpleAdapt24=simpleAdapt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, simpleAdapt24.getTree());

                    }
                    break;
                case 2 :
                    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:216:5: extendedAdapt
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_extendedAdapt_in_adapt323);
                    extendedAdapt25=extendedAdapt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, extendedAdapt25.getTree());

                    }
                    break;
                case 3 :
                    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:217:5: adaptCopyBinary
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_adaptCopyBinary_in_adapt329);
                    adaptCopyBinary26=adaptCopyBinary();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, adaptCopyBinary26.getTree());

                    }
                    break;
                case 4 :
                    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:218:5: adaptCopy
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_adaptCopy_in_adapt335);
                    adaptCopy27=adaptCopy();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, adaptCopy27.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException ex) {
                  throw new ARTSyntaxException("Syntax error in File: " + Utils.getCurrentFile() + " line: " + (ex.line == 0 ? Utils.getExpressionLine() : ex.line) + " (" + ex.getStackTrace()[0].getMethodName() + ")");
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "adapt"

    public static class simpleAdapt_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "simpleAdapt"
    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:221:1: simpleAdapt : ( SIMPLEADAPT | ADAPTSAMELEVEL ) ( ws )* e= expression ( ws )* ;
    public final commandParser.simpleAdapt_return simpleAdapt() throws RecognitionException {
        commandParser.simpleAdapt_return retval = new commandParser.simpleAdapt_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token SIMPLEADAPT28=null;
        Token ADAPTSAMELEVEL29=null;
        commandParser.expression_return e = null;

        commandParser.ws_return ws30 = null;

        commandParser.ws_return ws31 = null;


        CommonTree SIMPLEADAPT28_tree=null;
        CommonTree ADAPTSAMELEVEL29_tree=null;

         boolean sameLevel = false;
        try {
            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:223:3: ( ( SIMPLEADAPT | ADAPTSAMELEVEL ) ( ws )* e= expression ( ws )* )
            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:223:5: ( SIMPLEADAPT | ADAPTSAMELEVEL ) ( ws )* e= expression ( ws )*
            {
            root_0 = (CommonTree)adaptor.nil();

            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:223:5: ( SIMPLEADAPT | ADAPTSAMELEVEL )
            int alt9=2;
            int LA9_0 = input.LA(1);

            if ( (LA9_0==SIMPLEADAPT) ) {
                alt9=1;
            }
            else if ( (LA9_0==ADAPTSAMELEVEL) ) {
                alt9=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 9, 0, input);

                throw nvae;
            }
            switch (alt9) {
                case 1 :
                    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:223:6: SIMPLEADAPT
                    {
                    SIMPLEADAPT28=(Token)match(input,SIMPLEADAPT,FOLLOW_SIMPLEADAPT_in_simpleAdapt355); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SIMPLEADAPT28_tree = (CommonTree)adaptor.create(SIMPLEADAPT28);
                    adaptor.addChild(root_0, SIMPLEADAPT28_tree);
                    }

                    }
                    break;
                case 2 :
                    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:223:20: ADAPTSAMELEVEL
                    {
                    ADAPTSAMELEVEL29=(Token)match(input,ADAPTSAMELEVEL,FOLLOW_ADAPTSAMELEVEL_in_simpleAdapt359); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ADAPTSAMELEVEL29_tree = (CommonTree)adaptor.create(ADAPTSAMELEVEL29);
                    adaptor.addChild(root_0, ADAPTSAMELEVEL29_tree);
                    }
                    if ( state.backtracking==0 ) {
                      sameLevel= true;
                    }

                    }
                    break;

            }

            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:223:55: ( ws )*
            loop10:
            do {
                int alt10=2;
                int LA10_0 = input.LA(1);

                if ( (LA10_0==WS) ) {
                    int LA10_2 = input.LA(2);

                    if ( (synpred29_command()) ) {
                        alt10=1;
                    }


                }


                switch (alt10) {
            	case 1 :
            	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:0:0: ws
            	    {
            	    pushFollow(FOLLOW_ws_in_simpleAdapt364);
            	    ws30=ws();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, ws30.getTree());

            	    }
            	    break;

            	default :
            	    break loop10;
                }
            } while (true);

            pushFollow(FOLLOW_expression_in_simpleAdapt369);
            e=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, e.getTree());
            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:223:72: ( ws )*
            loop11:
            do {
                int alt11=2;
                int LA11_0 = input.LA(1);

                if ( (LA11_0==WS) ) {
                    int LA11_1 = input.LA(2);

                    if ( (synpred30_command()) ) {
                        alt11=1;
                    }


                }


                switch (alt11) {
            	case 1 :
            	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:0:0: ws
            	    {
            	    pushFollow(FOLLOW_ws_in_simpleAdapt371);
            	    ws31=ws();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, ws31.getTree());

            	    }
            	    break;

            	default :
            	    break loop11;
                }
            } while (true);

            if ( state.backtracking==0 ) {
                 
                    //AdaptCommand code
                    if (Utils.canWrite()){
                        new AdaptCommand((e!=null?input.toString(e.start,e.stop):null), sameLevel, lineNo).execute();
              //          if (!sameLevel){
              //              Utils.getFiles().pop();
              //          }
                    }
                 
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException ex) {
                  throw new ARTSyntaxException("Syntax error in File: " + Utils.getCurrentFile() + " line: " + (ex.line == 0 ? Utils.getExpressionLine() : ex.line) + " (" + ex.getStackTrace()[0].getMethodName() + ")");
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "simpleAdapt"

    public static class extendedAdapt_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "extendedAdapt"
    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:235:1: extendedAdapt : ( EXTENDEDADAPT | EXTENDEDADAPTSAMELEVEL ) ( ws )* e= expression ( command | str= ee )* COMMANDCHAR ENDADAPT ;
    public final commandParser.extendedAdapt_return extendedAdapt() throws RecognitionException {
        commandParser.extendedAdapt_return retval = new commandParser.extendedAdapt_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token EXTENDEDADAPT32=null;
        Token EXTENDEDADAPTSAMELEVEL33=null;
        Token COMMANDCHAR36=null;
        Token ENDADAPT37=null;
        commandParser.expression_return e = null;

        commandParser.ee_return str = null;

        commandParser.ws_return ws34 = null;

        commandParser.command_return command35 = null;


        CommonTree EXTENDEDADAPT32_tree=null;
        CommonTree EXTENDEDADAPTSAMELEVEL33_tree=null;
        CommonTree COMMANDCHAR36_tree=null;
        CommonTree ENDADAPT37_tree=null;

         boolean sameLevel = false; int adaptLineNo = lineNo;
        try {
            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:237:3: ( ( EXTENDEDADAPT | EXTENDEDADAPTSAMELEVEL ) ( ws )* e= expression ( command | str= ee )* COMMANDCHAR ENDADAPT )
            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:237:5: ( EXTENDEDADAPT | EXTENDEDADAPTSAMELEVEL ) ( ws )* e= expression ( command | str= ee )* COMMANDCHAR ENDADAPT
            {
            root_0 = (CommonTree)adaptor.nil();

            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:237:5: ( EXTENDEDADAPT | EXTENDEDADAPTSAMELEVEL )
            int alt12=2;
            int LA12_0 = input.LA(1);

            if ( (LA12_0==EXTENDEDADAPT) ) {
                alt12=1;
            }
            else if ( (LA12_0==EXTENDEDADAPTSAMELEVEL) ) {
                alt12=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 12, 0, input);

                throw nvae;
            }
            switch (alt12) {
                case 1 :
                    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:237:6: EXTENDEDADAPT
                    {
                    EXTENDEDADAPT32=(Token)match(input,EXTENDEDADAPT,FOLLOW_EXTENDEDADAPT_in_extendedAdapt395); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    EXTENDEDADAPT32_tree = (CommonTree)adaptor.create(EXTENDEDADAPT32);
                    adaptor.addChild(root_0, EXTENDEDADAPT32_tree);
                    }

                    }
                    break;
                case 2 :
                    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:237:22: EXTENDEDADAPTSAMELEVEL
                    {
                    EXTENDEDADAPTSAMELEVEL33=(Token)match(input,EXTENDEDADAPTSAMELEVEL,FOLLOW_EXTENDEDADAPTSAMELEVEL_in_extendedAdapt399); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    EXTENDEDADAPTSAMELEVEL33_tree = (CommonTree)adaptor.create(EXTENDEDADAPTSAMELEVEL33);
                    adaptor.addChild(root_0, EXTENDEDADAPTSAMELEVEL33_tree);
                    }
                    if ( state.backtracking==0 ) {
                      sameLevel= true; Utils.getSameLevelAdapts().add(Utils.getCurrentFile());
                    }

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
              if (Utils.canWrite()) {Utils.getExtendedAdapts().add(Utils.getCurrentFile());}
            }
            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:237:202: ( ws )*
            loop13:
            do {
                int alt13=2;
                int LA13_0 = input.LA(1);

                if ( (LA13_0==WS) ) {
                    int LA13_2 = input.LA(2);

                    if ( (synpred32_command()) ) {
                        alt13=1;
                    }


                }


                switch (alt13) {
            	case 1 :
            	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:0:0: ws
            	    {
            	    pushFollow(FOLLOW_ws_in_extendedAdapt406);
            	    ws34=ws();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, ws34.getTree());

            	    }
            	    break;

            	default :
            	    break loop13;
                }
            } while (true);

            pushFollow(FOLLOW_expression_in_extendedAdapt411);
            e=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, e.getTree());
            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:239:8: ( command | str= ee )*
            loop14:
            do {
                int alt14=3;
                int LA14_0 = input.LA(1);

                if ( (LA14_0==COMMANDCHAR) ) {
                    int LA14_1 = input.LA(2);

                    if ( ((LA14_1>=IDENT && LA14_1<=EXTENDEDADAPTSAMELEVEL)||(LA14_1>=ADAPTCOPY && LA14_1<=IF)||(LA14_1>=IFDEF && LA14_1<=SELECT)||LA14_1==INSERT||(LA14_1>=INSERTBEFORE && LA14_1<=EXTENDEDBREAK)||(LA14_1>=BREAK && LA14_1<=WHILE)||LA14_1==SETLOOP||(LA14_1>=MESSAGE && LA14_1<=EXTENDEDMESSAGE)||(LA14_1>=MESSAGEIF && LA14_1<=TEXT)) ) {
                        alt14=1;
                    }


                }
                else if ( ((LA14_0>=NEGATION && LA14_0<=NL)||(LA14_0>=IDENT && LA14_0<=STRING)||(LA14_0>=REFERENCECHAR && LA14_0<=109)) ) {
                    alt14=2;
                }


                switch (alt14) {
            	case 1 :
            	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:239:9: command
            	    {
            	    pushFollow(FOLLOW_command_in_extendedAdapt430);
            	    command35=command();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, command35.getTree());

            	    }
            	    break;
            	case 2 :
            	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:239:19: str= ee
            	    {
            	    pushFollow(FOLLOW_ee_in_extendedAdapt436);
            	    str=ee();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, str.getTree());
            	    if ( state.backtracking==0 ) {
            	      /* write((str!=null?input.toString(str.start,str.stop):null)); */
            	    }

            	    }
            	    break;

            	default :
            	    break loop14;
                }
            } while (true);

            COMMANDCHAR36=(Token)match(input,COMMANDCHAR,FOLLOW_COMMANDCHAR_in_extendedAdapt446); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            COMMANDCHAR36_tree = (CommonTree)adaptor.create(COMMANDCHAR36);
            adaptor.addChild(root_0, COMMANDCHAR36_tree);
            }
            ENDADAPT37=(Token)match(input,ENDADAPT,FOLLOW_ENDADAPT_in_extendedAdapt448); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ENDADAPT37_tree = (CommonTree)adaptor.create(ENDADAPT37);
            adaptor.addChild(root_0, ENDADAPT37_tree);
            }
            if ( state.backtracking==0 ) {

                      //ExtendedAdaptCommand code
                      if (Utils.canWrite()){
                          new AdaptCommand((e!=null?input.toString(e.start,e.stop):null), sameLevel, adaptLineNo).execute();
              //            Utils.getFiles().pop();
                      }
                  
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException ex) {
                  throw new ARTSyntaxException("Syntax error in File: " + Utils.getCurrentFile() + " line: " + (ex.line == 0 ? Utils.getExpressionLine() : ex.line) + " (" + ex.getStackTrace()[0].getMethodName() + ")");
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "extendedAdapt"

    public static class adaptCopy_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "adaptCopy"
    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:252:1: adaptCopy : ADAPTCOPY ( ws )* e= expression ( ws )* ;
    public final commandParser.adaptCopy_return adaptCopy() throws RecognitionException {
        commandParser.adaptCopy_return retval = new commandParser.adaptCopy_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token ADAPTCOPY38=null;
        commandParser.expression_return e = null;

        commandParser.ws_return ws39 = null;

        commandParser.ws_return ws40 = null;


        CommonTree ADAPTCOPY38_tree=null;

        try {
            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:253:3: ( ADAPTCOPY ( ws )* e= expression ( ws )* )
            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:253:5: ADAPTCOPY ( ws )* e= expression ( ws )*
            {
            root_0 = (CommonTree)adaptor.nil();

            ADAPTCOPY38=(Token)match(input,ADAPTCOPY,FOLLOW_ADAPTCOPY_in_adaptCopy479); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ADAPTCOPY38_tree = (CommonTree)adaptor.create(ADAPTCOPY38);
            adaptor.addChild(root_0, ADAPTCOPY38_tree);
            }
            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:253:15: ( ws )*
            loop15:
            do {
                int alt15=2;
                int LA15_0 = input.LA(1);

                if ( (LA15_0==WS) ) {
                    int LA15_2 = input.LA(2);

                    if ( (synpred35_command()) ) {
                        alt15=1;
                    }


                }


                switch (alt15) {
            	case 1 :
            	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:0:0: ws
            	    {
            	    pushFollow(FOLLOW_ws_in_adaptCopy481);
            	    ws39=ws();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, ws39.getTree());

            	    }
            	    break;

            	default :
            	    break loop15;
                }
            } while (true);

            pushFollow(FOLLOW_expression_in_adaptCopy486);
            e=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, e.getTree());
            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:253:32: ( ws )*
            loop16:
            do {
                int alt16=2;
                int LA16_0 = input.LA(1);

                if ( (LA16_0==WS) ) {
                    int LA16_1 = input.LA(2);

                    if ( (synpred36_command()) ) {
                        alt16=1;
                    }


                }


                switch (alt16) {
            	case 1 :
            	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:0:0: ws
            	    {
            	    pushFollow(FOLLOW_ws_in_adaptCopy488);
            	    ws40=ws();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, ws40.getTree());

            	    }
            	    break;

            	default :
            	    break loop16;
                }
            } while (true);

            if ( state.backtracking==0 ) {

                    //AdaptCopy code
                    if (Utils.canWrite()){
                        new AdaptCopy((e!=null?input.toString(e.start,e.stop):null), lineNo).execute();
                    }
                 
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException ex) {
                  throw new ARTSyntaxException("Syntax error in File: " + Utils.getCurrentFile() + " line: " + (ex.line == 0 ? Utils.getExpressionLine() : ex.line) + " (" + ex.getStackTrace()[0].getMethodName() + ")");
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "adaptCopy"

    public static class adaptCopyBinary_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "adaptCopyBinary"
    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:262:1: adaptCopyBinary : ADAPTCOPY ( ws )* e1= expression ( ws )* e2= expression ( ws )* ;
    public final commandParser.adaptCopyBinary_return adaptCopyBinary() throws RecognitionException {
        commandParser.adaptCopyBinary_return retval = new commandParser.adaptCopyBinary_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token ADAPTCOPY41=null;
        commandParser.expression_return e1 = null;

        commandParser.expression_return e2 = null;

        commandParser.ws_return ws42 = null;

        commandParser.ws_return ws43 = null;

        commandParser.ws_return ws44 = null;


        CommonTree ADAPTCOPY41_tree=null;

        try {
            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:263:3: ( ADAPTCOPY ( ws )* e1= expression ( ws )* e2= expression ( ws )* )
            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:263:5: ADAPTCOPY ( ws )* e1= expression ( ws )* e2= expression ( ws )*
            {
            root_0 = (CommonTree)adaptor.nil();

            ADAPTCOPY41=(Token)match(input,ADAPTCOPY,FOLLOW_ADAPTCOPY_in_adaptCopyBinary509); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ADAPTCOPY41_tree = (CommonTree)adaptor.create(ADAPTCOPY41);
            adaptor.addChild(root_0, ADAPTCOPY41_tree);
            }
            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:263:15: ( ws )*
            loop17:
            do {
                int alt17=2;
                int LA17_0 = input.LA(1);

                if ( (LA17_0==WS) ) {
                    int LA17_2 = input.LA(2);

                    if ( (synpred37_command()) ) {
                        alt17=1;
                    }


                }


                switch (alt17) {
            	case 1 :
            	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:0:0: ws
            	    {
            	    pushFollow(FOLLOW_ws_in_adaptCopyBinary511);
            	    ws42=ws();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, ws42.getTree());

            	    }
            	    break;

            	default :
            	    break loop17;
                }
            } while (true);

            pushFollow(FOLLOW_expression_in_adaptCopyBinary516);
            e1=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, e1.getTree());
            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:263:33: ( ws )*
            loop18:
            do {
                int alt18=2;
                int LA18_0 = input.LA(1);

                if ( (LA18_0==WS) ) {
                    int LA18_2 = input.LA(2);

                    if ( (synpred38_command()) ) {
                        alt18=1;
                    }


                }


                switch (alt18) {
            	case 1 :
            	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:0:0: ws
            	    {
            	    pushFollow(FOLLOW_ws_in_adaptCopyBinary518);
            	    ws43=ws();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, ws43.getTree());

            	    }
            	    break;

            	default :
            	    break loop18;
                }
            } while (true);

            pushFollow(FOLLOW_expression_in_adaptCopyBinary523);
            e2=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, e2.getTree());
            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:263:51: ( ws )*
            loop19:
            do {
                int alt19=2;
                int LA19_0 = input.LA(1);

                if ( (LA19_0==WS) ) {
                    int LA19_1 = input.LA(2);

                    if ( (synpred39_command()) ) {
                        alt19=1;
                    }


                }


                switch (alt19) {
            	case 1 :
            	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:0:0: ws
            	    {
            	    pushFollow(FOLLOW_ws_in_adaptCopyBinary525);
            	    ws44=ws();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, ws44.getTree());

            	    }
            	    break;

            	default :
            	    break loop19;
                }
            } while (true);

            if ( state.backtracking==0 ) {

                    //AdaptCopy code
                    if (Utils.canWrite()){
                        new AdaptCopyBinary((e1!=null?input.toString(e1.start,e1.stop):null), (e2!=null?input.toString(e2.start,e2.stop):null), lineNo).execute();
                    }
                 
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException ex) {
                  throw new ARTSyntaxException("Syntax error in File: " + Utils.getCurrentFile() + " line: " + (ex.line == 0 ? Utils.getExpressionLine() : ex.line) + " (" + ex.getStackTrace()[0].getMethodName() + ")");
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "adaptCopyBinary"

    public static class set_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "set"
    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:273:1: set : (s1= SET | s2= SETDEFER ) ( ws )* i= IDENT ( ws )* '=' ( ws )* e1= expression ( ws )* ( ( ws )* ',' ( ws )* ( NL )* ( ws )* e2= expression )* ( ws )* ( NL )? ;
    public final commandParser.set_return set() throws RecognitionException {
        commandParser.set_return retval = new commandParser.set_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token s1=null;
        Token s2=null;
        Token i=null;
        Token char_literal47=null;
        Token char_literal51=null;
        Token NL53=null;
        Token NL56=null;
        commandParser.expression_return e1 = null;

        commandParser.expression_return e2 = null;

        commandParser.ws_return ws45 = null;

        commandParser.ws_return ws46 = null;

        commandParser.ws_return ws48 = null;

        commandParser.ws_return ws49 = null;

        commandParser.ws_return ws50 = null;

        commandParser.ws_return ws52 = null;

        commandParser.ws_return ws54 = null;

        commandParser.ws_return ws55 = null;


        CommonTree s1_tree=null;
        CommonTree s2_tree=null;
        CommonTree i_tree=null;
        CommonTree char_literal47_tree=null;
        CommonTree char_literal51_tree=null;
        CommonTree NL53_tree=null;
        CommonTree NL56_tree=null;

         List<String> valueList = new ArrayList<String>(); boolean defer = false;
        try {
            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:275:3: ( (s1= SET | s2= SETDEFER ) ( ws )* i= IDENT ( ws )* '=' ( ws )* e1= expression ( ws )* ( ( ws )* ',' ( ws )* ( NL )* ( ws )* e2= expression )* ( ws )* ( NL )? )
            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:275:6: (s1= SET | s2= SETDEFER ) ( ws )* i= IDENT ( ws )* '=' ( ws )* e1= expression ( ws )* ( ( ws )* ',' ( ws )* ( NL )* ( ws )* e2= expression )* ( ws )* ( NL )?
            {
            root_0 = (CommonTree)adaptor.nil();

            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:275:6: (s1= SET | s2= SETDEFER )
            int alt20=2;
            int LA20_0 = input.LA(1);

            if ( (LA20_0==SET) ) {
                alt20=1;
            }
            else if ( (LA20_0==SETDEFER) ) {
                alt20=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 20, 0, input);

                throw nvae;
            }
            switch (alt20) {
                case 1 :
                    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:275:7: s1= SET
                    {
                    s1=(Token)match(input,SET,FOLLOW_SET_in_set555); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    s1_tree = (CommonTree)adaptor.create(s1);
                    adaptor.addChild(root_0, s1_tree);
                    }

                    }
                    break;
                case 2 :
                    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:275:16: s2= SETDEFER
                    {
                    s2=(Token)match(input,SETDEFER,FOLLOW_SETDEFER_in_set561); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    s2_tree = (CommonTree)adaptor.create(s2);
                    adaptor.addChild(root_0, s2_tree);
                    }
                    if ( state.backtracking==0 ) {
                      defer = true;
                    }

                    }
                    break;

            }

            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:275:46: ( ws )*
            loop21:
            do {
                int alt21=2;
                int LA21_0 = input.LA(1);

                if ( (LA21_0==WS) ) {
                    alt21=1;
                }


                switch (alt21) {
            	case 1 :
            	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:0:0: ws
            	    {
            	    pushFollow(FOLLOW_ws_in_set567);
            	    ws45=ws();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, ws45.getTree());

            	    }
            	    break;

            	default :
            	    break loop21;
                }
            } while (true);

            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_set572); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            i_tree = (CommonTree)adaptor.create(i);
            adaptor.addChild(root_0, i_tree);
            }
            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:275:58: ( ws )*
            loop22:
            do {
                int alt22=2;
                int LA22_0 = input.LA(1);

                if ( (LA22_0==WS) ) {
                    alt22=1;
                }


                switch (alt22) {
            	case 1 :
            	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:0:0: ws
            	    {
            	    pushFollow(FOLLOW_ws_in_set574);
            	    ws46=ws();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, ws46.getTree());

            	    }
            	    break;

            	default :
            	    break loop22;
                }
            } while (true);

            char_literal47=(Token)match(input,84,FOLLOW_84_in_set577); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal47_tree = (CommonTree)adaptor.create(char_literal47);
            adaptor.addChild(root_0, char_literal47_tree);
            }
            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:275:66: ( ws )*
            loop23:
            do {
                int alt23=2;
                int LA23_0 = input.LA(1);

                if ( (LA23_0==WS) ) {
                    int LA23_2 = input.LA(2);

                    if ( (synpred43_command()) ) {
                        alt23=1;
                    }


                }


                switch (alt23) {
            	case 1 :
            	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:0:0: ws
            	    {
            	    pushFollow(FOLLOW_ws_in_set579);
            	    ws48=ws();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, ws48.getTree());

            	    }
            	    break;

            	default :
            	    break loop23;
                }
            } while (true);

            pushFollow(FOLLOW_expression_in_set584);
            e1=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, e1.getTree());
            if ( state.backtracking==0 ) {
              valueList.add((e1!=null?input.toString(e1.start,e1.stop):null));
            }
            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:275:111: ( ws )*
            loop24:
            do {
                int alt24=2;
                int LA24_0 = input.LA(1);

                if ( (LA24_0==WS) ) {
                    int LA24_1 = input.LA(2);

                    if ( (synpred44_command()) ) {
                        alt24=1;
                    }


                }


                switch (alt24) {
            	case 1 :
            	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:0:0: ws
            	    {
            	    pushFollow(FOLLOW_ws_in_set588);
            	    ws49=ws();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, ws49.getTree());

            	    }
            	    break;

            	default :
            	    break loop24;
                }
            } while (true);

            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:276:4: ( ( ws )* ',' ( ws )* ( NL )* ( ws )* e2= expression )*
            loop29:
            do {
                int alt29=2;
                alt29 = dfa29.predict(input);
                switch (alt29) {
            	case 1 :
            	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:276:6: ( ws )* ',' ( ws )* ( NL )* ( ws )* e2= expression
            	    {
            	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:276:6: ( ws )*
            	    loop25:
            	    do {
            	        int alt25=2;
            	        int LA25_0 = input.LA(1);

            	        if ( (LA25_0==WS) ) {
            	            alt25=1;
            	        }


            	        switch (alt25) {
            	    	case 1 :
            	    	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:0:0: ws
            	    	    {
            	    	    pushFollow(FOLLOW_ws_in_set596);
            	    	    ws50=ws();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, ws50.getTree());

            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop25;
            	        }
            	    } while (true);

            	    char_literal51=(Token)match(input,85,FOLLOW_85_in_set599); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal51_tree = (CommonTree)adaptor.create(char_literal51);
            	    adaptor.addChild(root_0, char_literal51_tree);
            	    }
            	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:276:14: ( ws )*
            	    loop26:
            	    do {
            	        int alt26=2;
            	        int LA26_0 = input.LA(1);

            	        if ( (LA26_0==WS) ) {
            	            int LA26_2 = input.LA(2);

            	            if ( (synpred46_command()) ) {
            	                alt26=1;
            	            }


            	        }


            	        switch (alt26) {
            	    	case 1 :
            	    	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:0:0: ws
            	    	    {
            	    	    pushFollow(FOLLOW_ws_in_set601);
            	    	    ws52=ws();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, ws52.getTree());

            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop26;
            	        }
            	    } while (true);

            	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:276:18: ( NL )*
            	    loop27:
            	    do {
            	        int alt27=2;
            	        int LA27_0 = input.LA(1);

            	        if ( (LA27_0==NL) ) {
            	            alt27=1;
            	        }


            	        switch (alt27) {
            	    	case 1 :
            	    	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:0:0: NL
            	    	    {
            	    	    NL53=(Token)match(input,NL,FOLLOW_NL_in_set604); if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) {
            	    	    NL53_tree = (CommonTree)adaptor.create(NL53);
            	    	    adaptor.addChild(root_0, NL53_tree);
            	    	    }

            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop27;
            	        }
            	    } while (true);

            	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:276:22: ( ws )*
            	    loop28:
            	    do {
            	        int alt28=2;
            	        int LA28_0 = input.LA(1);

            	        if ( (LA28_0==WS) ) {
            	            int LA28_2 = input.LA(2);

            	            if ( (synpred48_command()) ) {
            	                alt28=1;
            	            }


            	        }


            	        switch (alt28) {
            	    	case 1 :
            	    	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:0:0: ws
            	    	    {
            	    	    pushFollow(FOLLOW_ws_in_set607);
            	    	    ws54=ws();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, ws54.getTree());

            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop28;
            	        }
            	    } while (true);

            	    pushFollow(FOLLOW_expression_in_set612);
            	    e2=expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, e2.getTree());
            	    if ( state.backtracking==0 ) {
            	      valueList.add((e2!=null?input.toString(e2.start,e2.stop):null));
            	    }

            	    }
            	    break;

            	default :
            	    break loop29;
                }
            } while (true);

            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:276:70: ( ws )*
            loop30:
            do {
                int alt30=2;
                int LA30_0 = input.LA(1);

                if ( (LA30_0==WS) ) {
                    int LA30_2 = input.LA(2);

                    if ( (synpred50_command()) ) {
                        alt30=1;
                    }


                }


                switch (alt30) {
            	case 1 :
            	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:0:0: ws
            	    {
            	    pushFollow(FOLLOW_ws_in_set619);
            	    ws55=ws();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, ws55.getTree());

            	    }
            	    break;

            	default :
            	    break loop30;
                }
            } while (true);

            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:276:74: ( NL )?
            int alt31=2;
            int LA31_0 = input.LA(1);

            if ( (LA31_0==NL) ) {
                int LA31_1 = input.LA(2);

                if ( (synpred51_command()) ) {
                    alt31=1;
                }
            }
            switch (alt31) {
                case 1 :
                    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:0:0: NL
                    {
                    NL56=(Token)match(input,NL,FOLLOW_NL_in_set622); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NL56_tree = (CommonTree)adaptor.create(NL56);
                    adaptor.addChild(root_0, NL56_tree);
                    }

                    }
                    break;

            }

            if ( state.backtracking==0 ) {

                    //SetCommand code
                    if (Utils.canWrite()){
                        if (!(null == s1)) {Utils.setExpressionLine(s1.getLine()); }
                        if (!(null == s2)) {Utils.setExpressionLine(s2.getLine()); }
                        new SetCommand((i!=null?i.getText():null), valueList, defer, lineNo).execute();
                    }
                  
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException ex) {
                  throw new ARTSyntaxException("Syntax error in File: " + Utils.getCurrentFile() + " line: " + (ex.line == 0 ? Utils.getExpressionLine() : ex.line) + " (" + ex.getStackTrace()[0].getMethodName() + ")");
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "set"

    public static class outputCommand_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "outputCommand"
    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:288:1: outputCommand : ( fullOutputCommand | outdirCommand | outfileCommand );
    public final commandParser.outputCommand_return outputCommand() throws RecognitionException {
        commandParser.outputCommand_return retval = new commandParser.outputCommand_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        commandParser.fullOutputCommand_return fullOutputCommand57 = null;

        commandParser.outdirCommand_return outdirCommand58 = null;

        commandParser.outfileCommand_return outfileCommand59 = null;



        try {
            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:288:15: ( fullOutputCommand | outdirCommand | outfileCommand )
            int alt32=3;
            switch ( input.LA(1) ) {
            case OUTPUT:
                {
                alt32=1;
                }
                break;
            case OUTDIR:
                {
                alt32=2;
                }
                break;
            case OUTFILE:
                {
                alt32=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 32, 0, input);

                throw nvae;
            }

            switch (alt32) {
                case 1 :
                    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:288:17: fullOutputCommand
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_fullOutputCommand_in_outputCommand643);
                    fullOutputCommand57=fullOutputCommand();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, fullOutputCommand57.getTree());

                    }
                    break;
                case 2 :
                    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:288:37: outdirCommand
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_outdirCommand_in_outputCommand647);
                    outdirCommand58=outdirCommand();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, outdirCommand58.getTree());

                    }
                    break;
                case 3 :
                    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:288:53: outfileCommand
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_outfileCommand_in_outputCommand651);
                    outfileCommand59=outfileCommand();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, outfileCommand59.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException ex) {
                  throw new ARTSyntaxException("Syntax error in File: " + Utils.getCurrentFile() + " line: " + (ex.line == 0 ? Utils.getExpressionLine() : ex.line) + " (" + ex.getStackTrace()[0].getMethodName() + ")");
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "outputCommand"

    public static class fullOutputCommand_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "fullOutputCommand"
    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:290:1: fullOutputCommand : o= OUTPUT ( ws )* e= expression ( ws )* ( NL )? ;
    public final commandParser.fullOutputCommand_return fullOutputCommand() throws RecognitionException {
        commandParser.fullOutputCommand_return retval = new commandParser.fullOutputCommand_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token o=null;
        Token NL62=null;
        commandParser.expression_return e = null;

        commandParser.ws_return ws60 = null;

        commandParser.ws_return ws61 = null;


        CommonTree o_tree=null;
        CommonTree NL62_tree=null;

        try {
            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:291:3: (o= OUTPUT ( ws )* e= expression ( ws )* ( NL )? )
            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:291:5: o= OUTPUT ( ws )* e= expression ( ws )* ( NL )?
            {
            root_0 = (CommonTree)adaptor.nil();

            o=(Token)match(input,OUTPUT,FOLLOW_OUTPUT_in_fullOutputCommand665); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            o_tree = (CommonTree)adaptor.create(o);
            adaptor.addChild(root_0, o_tree);
            }
            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:291:14: ( ws )*
            loop33:
            do {
                int alt33=2;
                int LA33_0 = input.LA(1);

                if ( (LA33_0==WS) ) {
                    int LA33_2 = input.LA(2);

                    if ( (synpred54_command()) ) {
                        alt33=1;
                    }


                }


                switch (alt33) {
            	case 1 :
            	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:0:0: ws
            	    {
            	    pushFollow(FOLLOW_ws_in_fullOutputCommand667);
            	    ws60=ws();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, ws60.getTree());

            	    }
            	    break;

            	default :
            	    break loop33;
                }
            } while (true);

            pushFollow(FOLLOW_expression_in_fullOutputCommand672);
            e=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, e.getTree());
            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:291:31: ( ws )*
            loop34:
            do {
                int alt34=2;
                int LA34_0 = input.LA(1);

                if ( (LA34_0==WS) ) {
                    int LA34_2 = input.LA(2);

                    if ( (synpred55_command()) ) {
                        alt34=1;
                    }


                }


                switch (alt34) {
            	case 1 :
            	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:0:0: ws
            	    {
            	    pushFollow(FOLLOW_ws_in_fullOutputCommand674);
            	    ws61=ws();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, ws61.getTree());

            	    }
            	    break;

            	default :
            	    break loop34;
                }
            } while (true);

            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:291:35: ( NL )?
            int alt35=2;
            int LA35_0 = input.LA(1);

            if ( (LA35_0==NL) ) {
                int LA35_1 = input.LA(2);

                if ( (synpred56_command()) ) {
                    alt35=1;
                }
            }
            switch (alt35) {
                case 1 :
                    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:0:0: NL
                    {
                    NL62=(Token)match(input,NL,FOLLOW_NL_in_fullOutputCommand677); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NL62_tree = (CommonTree)adaptor.create(NL62);
                    adaptor.addChild(root_0, NL62_tree);
                    }

                    }
                    break;

            }

            if ( state.backtracking==0 ) {

                    //Output command
                    if (Utils.canWrite()){
                        new OutputCommand((e!=null?input.toString(e.start,e.stop):null), lineNo).execute();
                          out = Utils.getActualOutput();
                    }
                
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException ex) {
                  throw new ARTSyntaxException("Syntax error in File: " + Utils.getCurrentFile() + " line: " + (ex.line == 0 ? Utils.getExpressionLine() : ex.line) + " (" + ex.getStackTrace()[0].getMethodName() + ")");
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "fullOutputCommand"

    public static class outdirCommand_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "outdirCommand"
    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:302:1: outdirCommand : OUTDIR ( ws )* e= expression ( ws )* ( NL )? ;
    public final commandParser.outdirCommand_return outdirCommand() throws RecognitionException {
        commandParser.outdirCommand_return retval = new commandParser.outdirCommand_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token OUTDIR63=null;
        Token NL66=null;
        commandParser.expression_return e = null;

        commandParser.ws_return ws64 = null;

        commandParser.ws_return ws65 = null;


        CommonTree OUTDIR63_tree=null;
        CommonTree NL66_tree=null;

        try {
            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:303:3: ( OUTDIR ( ws )* e= expression ( ws )* ( NL )? )
            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:303:5: OUTDIR ( ws )* e= expression ( ws )* ( NL )?
            {
            root_0 = (CommonTree)adaptor.nil();

            OUTDIR63=(Token)match(input,OUTDIR,FOLLOW_OUTDIR_in_outdirCommand700); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            OUTDIR63_tree = (CommonTree)adaptor.create(OUTDIR63);
            adaptor.addChild(root_0, OUTDIR63_tree);
            }
            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:303:12: ( ws )*
            loop36:
            do {
                int alt36=2;
                int LA36_0 = input.LA(1);

                if ( (LA36_0==WS) ) {
                    int LA36_2 = input.LA(2);

                    if ( (synpred57_command()) ) {
                        alt36=1;
                    }


                }


                switch (alt36) {
            	case 1 :
            	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:0:0: ws
            	    {
            	    pushFollow(FOLLOW_ws_in_outdirCommand702);
            	    ws64=ws();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, ws64.getTree());

            	    }
            	    break;

            	default :
            	    break loop36;
                }
            } while (true);

            pushFollow(FOLLOW_expression_in_outdirCommand707);
            e=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, e.getTree());
            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:303:29: ( ws )*
            loop37:
            do {
                int alt37=2;
                int LA37_0 = input.LA(1);

                if ( (LA37_0==WS) ) {
                    int LA37_2 = input.LA(2);

                    if ( (synpred58_command()) ) {
                        alt37=1;
                    }


                }


                switch (alt37) {
            	case 1 :
            	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:0:0: ws
            	    {
            	    pushFollow(FOLLOW_ws_in_outdirCommand709);
            	    ws65=ws();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, ws65.getTree());

            	    }
            	    break;

            	default :
            	    break loop37;
                }
            } while (true);

            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:303:33: ( NL )?
            int alt38=2;
            int LA38_0 = input.LA(1);

            if ( (LA38_0==NL) ) {
                int LA38_1 = input.LA(2);

                if ( (synpred59_command()) ) {
                    alt38=1;
                }
            }
            switch (alt38) {
                case 1 :
                    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:0:0: NL
                    {
                    NL66=(Token)match(input,NL,FOLLOW_NL_in_outdirCommand712); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NL66_tree = (CommonTree)adaptor.create(NL66);
                    adaptor.addChild(root_0, NL66_tree);
                    }

                    }
                    break;

            }

            if ( state.backtracking==0 ) {

                    //Output command
                    if (Utils.canWrite()){
                        new OutdirCommand((e!=null?input.toString(e.start,e.stop):null), lineNo).execute();
                          out = Utils.getActualOutput();
                    }
                
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException ex) {
                  throw new ARTSyntaxException("Syntax error in File: " + Utils.getCurrentFile() + " line: " + (ex.line == 0 ? Utils.getExpressionLine() : ex.line) + " (" + ex.getStackTrace()[0].getMethodName() + ")");
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "outdirCommand"

    public static class outfileCommand_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "outfileCommand"
    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:314:1: outfileCommand : OUTFILE ( ws )* e= expression ( ws )* ( NL )? ;
    public final commandParser.outfileCommand_return outfileCommand() throws RecognitionException {
        commandParser.outfileCommand_return retval = new commandParser.outfileCommand_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token OUTFILE67=null;
        Token NL70=null;
        commandParser.expression_return e = null;

        commandParser.ws_return ws68 = null;

        commandParser.ws_return ws69 = null;


        CommonTree OUTFILE67_tree=null;
        CommonTree NL70_tree=null;

        try {
            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:315:3: ( OUTFILE ( ws )* e= expression ( ws )* ( NL )? )
            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:315:5: OUTFILE ( ws )* e= expression ( ws )* ( NL )?
            {
            root_0 = (CommonTree)adaptor.nil();

            OUTFILE67=(Token)match(input,OUTFILE,FOLLOW_OUTFILE_in_outfileCommand735); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            OUTFILE67_tree = (CommonTree)adaptor.create(OUTFILE67);
            adaptor.addChild(root_0, OUTFILE67_tree);
            }
            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:315:13: ( ws )*
            loop39:
            do {
                int alt39=2;
                int LA39_0 = input.LA(1);

                if ( (LA39_0==WS) ) {
                    int LA39_2 = input.LA(2);

                    if ( (synpred60_command()) ) {
                        alt39=1;
                    }


                }


                switch (alt39) {
            	case 1 :
            	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:0:0: ws
            	    {
            	    pushFollow(FOLLOW_ws_in_outfileCommand737);
            	    ws68=ws();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, ws68.getTree());

            	    }
            	    break;

            	default :
            	    break loop39;
                }
            } while (true);

            pushFollow(FOLLOW_expression_in_outfileCommand742);
            e=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, e.getTree());
            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:315:30: ( ws )*
            loop40:
            do {
                int alt40=2;
                int LA40_0 = input.LA(1);

                if ( (LA40_0==WS) ) {
                    int LA40_2 = input.LA(2);

                    if ( (synpred61_command()) ) {
                        alt40=1;
                    }


                }


                switch (alt40) {
            	case 1 :
            	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:0:0: ws
            	    {
            	    pushFollow(FOLLOW_ws_in_outfileCommand744);
            	    ws69=ws();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, ws69.getTree());

            	    }
            	    break;

            	default :
            	    break loop40;
                }
            } while (true);

            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:315:34: ( NL )?
            int alt41=2;
            int LA41_0 = input.LA(1);

            if ( (LA41_0==NL) ) {
                int LA41_1 = input.LA(2);

                if ( (synpred62_command()) ) {
                    alt41=1;
                }
            }
            switch (alt41) {
                case 1 :
                    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:0:0: NL
                    {
                    NL70=(Token)match(input,NL,FOLLOW_NL_in_outfileCommand747); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NL70_tree = (CommonTree)adaptor.create(NL70);
                    adaptor.addChild(root_0, NL70_tree);
                    }

                    }
                    break;

            }

            if ( state.backtracking==0 ) {

                    //Output command
                    if (Utils.canWrite()){
                        new OutfileCommand((e!=null?input.toString(e.start,e.stop):null), lineNo).execute();
                          out = Utils.getActualOutput();
                    }
                
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException ex) {
                  throw new ARTSyntaxException("Syntax error in File: " + Utils.getCurrentFile() + " line: " + (ex.line == 0 ? Utils.getExpressionLine() : ex.line) + " (" + ex.getStackTrace()[0].getMethodName() + ")");
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "outfileCommand"

    public static class ifCommand_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ifCommand"
    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:326:1: ifCommand : IF ( ws )* ( '(' )? e= freeExpression ( ')' )? ( NL )? ( command | se= stringExpression | str= ee )* ( ws )* ( COMMANDCHAR elifPart )* ( COMMANDCHAR elsePart )? COMMANDCHAR ENDIF ( NL )? ;
    public final commandParser.ifCommand_return ifCommand() throws RecognitionException {
        commandParser.ifCommand_return retval = new commandParser.ifCommand_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token IF71=null;
        Token char_literal73=null;
        Token char_literal74=null;
        Token NL75=null;
        Token COMMANDCHAR78=null;
        Token COMMANDCHAR80=null;
        Token COMMANDCHAR82=null;
        Token ENDIF83=null;
        Token NL84=null;
        commandParser.freeExpression_return e = null;

        commandParser.stringExpression_return se = null;

        commandParser.ee_return str = null;

        commandParser.ws_return ws72 = null;

        commandParser.command_return command76 = null;

        commandParser.ws_return ws77 = null;

        commandParser.elifPart_return elifPart79 = null;

        commandParser.elsePart_return elsePart81 = null;


        CommonTree IF71_tree=null;
        CommonTree char_literal73_tree=null;
        CommonTree char_literal74_tree=null;
        CommonTree NL75_tree=null;
        CommonTree COMMANDCHAR78_tree=null;
        CommonTree COMMANDCHAR80_tree=null;
        CommonTree COMMANDCHAR82_tree=null;
        CommonTree ENDIF83_tree=null;
        CommonTree NL84_tree=null;

        try {
            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:327:4: ( IF ( ws )* ( '(' )? e= freeExpression ( ')' )? ( NL )? ( command | se= stringExpression | str= ee )* ( ws )* ( COMMANDCHAR elifPart )* ( COMMANDCHAR elsePart )? COMMANDCHAR ENDIF ( NL )? )
            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:327:6: IF ( ws )* ( '(' )? e= freeExpression ( ')' )? ( NL )? ( command | se= stringExpression | str= ee )* ( ws )* ( COMMANDCHAR elifPart )* ( COMMANDCHAR elsePart )? COMMANDCHAR ENDIF ( NL )?
            {
            root_0 = (CommonTree)adaptor.nil();

            IF71=(Token)match(input,IF,FOLLOW_IF_in_ifCommand771); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            IF71_tree = (CommonTree)adaptor.create(IF71);
            adaptor.addChild(root_0, IF71_tree);
            }
            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:327:9: ( ws )*
            loop42:
            do {
                int alt42=2;
                int LA42_0 = input.LA(1);

                if ( (LA42_0==WS) ) {
                    int LA42_2 = input.LA(2);

                    if ( (synpred63_command()) ) {
                        alt42=1;
                    }


                }


                switch (alt42) {
            	case 1 :
            	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:0:0: ws
            	    {
            	    pushFollow(FOLLOW_ws_in_ifCommand773);
            	    ws72=ws();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, ws72.getTree());

            	    }
            	    break;

            	default :
            	    break loop42;
                }
            } while (true);

            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:327:13: ( '(' )?
            int alt43=2;
            alt43 = dfa43.predict(input);
            switch (alt43) {
                case 1 :
                    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:0:0: '('
                    {
                    char_literal73=(Token)match(input,86,FOLLOW_86_in_ifCommand776); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal73_tree = (CommonTree)adaptor.create(char_literal73);
                    adaptor.addChild(root_0, char_literal73_tree);
                    }

                    }
                    break;

            }

            pushFollow(FOLLOW_freeExpression_in_ifCommand781);
            e=freeExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, e.getTree());
            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:327:35: ( ')' )?
            int alt44=2;
            int LA44_0 = input.LA(1);

            if ( (LA44_0==87) ) {
                int LA44_1 = input.LA(2);

                if ( (synpred65_command()) ) {
                    alt44=1;
                }
            }
            switch (alt44) {
                case 1 :
                    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:0:0: ')'
                    {
                    char_literal74=(Token)match(input,87,FOLLOW_87_in_ifCommand783); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal74_tree = (CommonTree)adaptor.create(char_literal74);
                    adaptor.addChild(root_0, char_literal74_tree);
                    }

                    }
                    break;

            }

            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:327:40: ( NL )?
            int alt45=2;
            int LA45_0 = input.LA(1);

            if ( (LA45_0==NL) ) {
                int LA45_1 = input.LA(2);

                if ( (synpred66_command()) ) {
                    alt45=1;
                }
            }
            switch (alt45) {
                case 1 :
                    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:0:0: NL
                    {
                    NL75=(Token)match(input,NL,FOLLOW_NL_in_ifCommand786); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NL75_tree = (CommonTree)adaptor.create(NL75);
                    adaptor.addChild(root_0, NL75_tree);
                    }

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
               
                    Utils.getSkipIfStack().add(false);
                    Utils.getElseStack().add(false);
                
            }
            if ( state.backtracking==0 ) {

                    //IfCommand code
                    if (Utils.canWrite()){
                        new IfCommand((e!=null?input.toString(e.start,e.stop):null), lineNo).execute();
                    } else {
                        Utils.setSkipIf(true);
                    }
                 
            }
            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:342:5: ( command | se= stringExpression | str= ee )*
            loop46:
            do {
                int alt46=4;
                switch ( input.LA(1) ) {
                case WS:
                    {
                    int LA46_1 = input.LA(2);

                    if ( (synpred69_command()) ) {
                        alt46=3;
                    }


                    }
                    break;
                case COMMANDCHAR:
                    {
                    int LA46_2 = input.LA(2);

                    if ( ((LA46_2>=IDENT && LA46_2<=EXTENDEDADAPTSAMELEVEL)||(LA46_2>=ADAPTCOPY && LA46_2<=IF)||(LA46_2>=IFDEF && LA46_2<=SELECT)||LA46_2==INSERT||(LA46_2>=INSERTBEFORE && LA46_2<=EXTENDEDBREAK)||(LA46_2>=BREAK && LA46_2<=WHILE)||LA46_2==SETLOOP||(LA46_2>=MESSAGE && LA46_2<=EXTENDEDMESSAGE)||(LA46_2>=MESSAGEIF && LA46_2<=TEXT)) ) {
                        alt46=1;
                    }


                    }
                    break;
                case STRING:
                    {
                    int LA46_3 = input.LA(2);

                    if ( (synpred68_command()) ) {
                        alt46=2;
                    }
                    else if ( (synpred69_command()) ) {
                        alt46=3;
                    }


                    }
                    break;
                case EPRESSIONCHAR:
                    {
                    alt46=2;
                    }
                    break;
                case NEGATION:
                case DEFINED:
                case ARTVARCHAR:
                case NL:
                case IDENT:
                case SIMPLEADAPT:
                case ADAPTSAMELEVEL:
                case EXTENDEDADAPT:
                case EXTENDEDADAPTSAMELEVEL:
                case ENDADAPT:
                case ADAPTCOPY:
                case SET:
                case SETDEFER:
                case OUTPUT:
                case OUTDIR:
                case OUTFILE:
                case IF:
                case ENDIF:
                case ELIF:
                case ELSE:
                case IFDEF:
                case IFNDEF:
                case REMOVE:
                case SELECT:
                case ENDSELECT:
                case OPTIONUNDEFINED:
                case ENDOPTION:
                case OPTION:
                case OTHERWISE:
                case ENDOTHERWISE:
                case INSERT:
                case ENDINSERT:
                case INSERTBEFORE:
                case INSERTAFTER:
                case EXTENDEDBREAK:
                case ENDBREAK:
                case BREAK:
                case WHILE:
                case ENDWHILE:
                case SETLOOP:
                case ENDSETLOOP:
                case VARS:
                case ENDVARS:
                case VAR:
                case ITER:
                case MESSAGE:
                case EXTENDEDMESSAGE:
                case ENDMESSAGE:
                case MESSAGEIF:
                case EXTENDEDMESSAGEIF:
                case MESSAGEDEBUG:
                case EXTENDEDMESSAGEDEBUG:
                case TEXT:
                case ENDTEXT:
                case REFERENCECHAR:
                case INTEGER:
                case ISLAST:
                case ISFIRST:
                case SIZE:
                case ISNUMERIC:
                case ULCAP:
                case LLCAP:
                case DEBUGMODE:
                case CURRENTFILE:
                case DEFAULTOUTPUT:
                case COMMENTCHAR:
                case QUOTATIONMARK:
                case STRINGNOEND:
                case NOTNEWLINE:
                case COMMENT:
                case ESCCOMMENT:
                case DIGIT:
                case SPECCHAR:
                case LETTER:
                case DOT:
                case ANYCHAR:
                case 84:
                case 85:
                case 86:
                case 87:
                case 88:
                case 89:
                case 90:
                case 91:
                case 92:
                case 93:
                case 94:
                case 95:
                case 96:
                case 97:
                case 98:
                case 99:
                case 100:
                case 101:
                case 102:
                case 103:
                case 104:
                case 105:
                case 106:
                case 107:
                case 108:
                case 109:
                    {
                    alt46=3;
                    }
                    break;

                }

                switch (alt46) {
            	case 1 :
            	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:342:6: command
            	    {
            	    pushFollow(FOLLOW_command_in_ifCommand810);
            	    command76=command();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, command76.getTree());

            	    }
            	    break;
            	case 2 :
            	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:343:10: se= stringExpression
            	    {
            	    pushFollow(FOLLOW_stringExpression_in_ifCommand823);
            	    se=stringExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, se.getTree());
            	    if ( state.backtracking==0 ) {
            	       writeExpression((se!=null?input.toString(se.start,se.stop):null), se.tree.getLine()); 
            	    }

            	    }
            	    break;
            	case 3 :
            	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:344:10: str= ee
            	    {
            	    pushFollow(FOLLOW_ee_in_ifCommand838);
            	    str=ee();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, str.getTree());
            	    if ( state.backtracking==0 ) {
            	       write((str!=null?input.toString(str.start,str.stop):null));
            	    }

            	    }
            	    break;

            	default :
            	    break loop46;
                }
            } while (true);

            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:345:8: ( ws )*
            loop47:
            do {
                int alt47=2;
                int LA47_0 = input.LA(1);

                if ( (LA47_0==WS) ) {
                    alt47=1;
                }


                switch (alt47) {
            	case 1 :
            	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:0:0: ws
            	    {
            	    pushFollow(FOLLOW_ws_in_ifCommand850);
            	    ws77=ws();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, ws77.getTree());

            	    }
            	    break;

            	default :
            	    break loop47;
                }
            } while (true);

            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:347:7: ( COMMANDCHAR elifPart )*
            loop48:
            do {
                int alt48=2;
                int LA48_0 = input.LA(1);

                if ( (LA48_0==COMMANDCHAR) ) {
                    int LA48_1 = input.LA(2);

                    if ( (LA48_1==ELIF) ) {
                        alt48=1;
                    }


                }


                switch (alt48) {
            	case 1 :
            	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:347:8: COMMANDCHAR elifPart
            	    {
            	    COMMANDCHAR78=(Token)match(input,COMMANDCHAR,FOLLOW_COMMANDCHAR_in_ifCommand866); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    COMMANDCHAR78_tree = (CommonTree)adaptor.create(COMMANDCHAR78);
            	    adaptor.addChild(root_0, COMMANDCHAR78_tree);
            	    }
            	    pushFollow(FOLLOW_elifPart_in_ifCommand868);
            	    elifPart79=elifPart();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, elifPart79.getTree());

            	    }
            	    break;

            	default :
            	    break loop48;
                }
            } while (true);

            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:348:7: ( COMMANDCHAR elsePart )?
            int alt49=2;
            int LA49_0 = input.LA(1);

            if ( (LA49_0==COMMANDCHAR) ) {
                int LA49_1 = input.LA(2);

                if ( (LA49_1==ELSE) ) {
                    alt49=1;
                }
            }
            switch (alt49) {
                case 1 :
                    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:348:8: COMMANDCHAR elsePart
                    {
                    COMMANDCHAR80=(Token)match(input,COMMANDCHAR,FOLLOW_COMMANDCHAR_in_ifCommand879); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COMMANDCHAR80_tree = (CommonTree)adaptor.create(COMMANDCHAR80);
                    adaptor.addChild(root_0, COMMANDCHAR80_tree);
                    }
                    pushFollow(FOLLOW_elsePart_in_ifCommand881);
                    elsePart81=elsePart();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, elsePart81.getTree());

                    }
                    break;

            }

            COMMANDCHAR82=(Token)match(input,COMMANDCHAR,FOLLOW_COMMANDCHAR_in_ifCommand890); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            COMMANDCHAR82_tree = (CommonTree)adaptor.create(COMMANDCHAR82);
            adaptor.addChild(root_0, COMMANDCHAR82_tree);
            }
            ENDIF83=(Token)match(input,ENDIF,FOLLOW_ENDIF_in_ifCommand892); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ENDIF83_tree = (CommonTree)adaptor.create(ENDIF83);
            adaptor.addChild(root_0, ENDIF83_tree);
            }
            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:349:24: ( NL )?
            int alt50=2;
            int LA50_0 = input.LA(1);

            if ( (LA50_0==NL) ) {
                int LA50_1 = input.LA(2);

                if ( (synpred73_command()) ) {
                    alt50=1;
                }
            }
            switch (alt50) {
                case 1 :
                    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:0:0: NL
                    {
                    NL84=(Token)match(input,NL,FOLLOW_NL_in_ifCommand894); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NL84_tree = (CommonTree)adaptor.create(NL84);
                    adaptor.addChild(root_0, NL84_tree);
                    }

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
                
                   if (Utils.getElseStack().size() > 0){
                      Utils.getElseStack().pop();
                   }
                   if (Utils.getSkipIfStack().size() > 0){
                      Utils.getSkipIfStack().pop();
                   }
                   
                   Utils.removeWriteblocker("if"); 
                 
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException ex) {
                  throw new ARTSyntaxException("Syntax error in File: " + Utils.getCurrentFile() + " line: " + (ex.line == 0 ? Utils.getExpressionLine() : ex.line) + " (" + ex.getStackTrace()[0].getMethodName() + ")");
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "ifCommand"

    public static class elifPart_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "elifPart"
    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:363:1: elifPart : ELIF ( ws )* ( '(' )? e= freeExpression ( ')' )? ( NL )? ( command | se= stringExpression | str= ee )* ( ws )* ;
    public final commandParser.elifPart_return elifPart() throws RecognitionException {
        commandParser.elifPart_return retval = new commandParser.elifPart_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token ELIF85=null;
        Token char_literal87=null;
        Token char_literal88=null;
        Token NL89=null;
        commandParser.freeExpression_return e = null;

        commandParser.stringExpression_return se = null;

        commandParser.ee_return str = null;

        commandParser.ws_return ws86 = null;

        commandParser.command_return command90 = null;

        commandParser.ws_return ws91 = null;


        CommonTree ELIF85_tree=null;
        CommonTree char_literal87_tree=null;
        CommonTree char_literal88_tree=null;
        CommonTree NL89_tree=null;

        try {
            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:364:3: ( ELIF ( ws )* ( '(' )? e= freeExpression ( ')' )? ( NL )? ( command | se= stringExpression | str= ee )* ( ws )* )
            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:364:5: ELIF ( ws )* ( '(' )? e= freeExpression ( ')' )? ( NL )? ( command | se= stringExpression | str= ee )* ( ws )*
            {
            root_0 = (CommonTree)adaptor.nil();

            ELIF85=(Token)match(input,ELIF,FOLLOW_ELIF_in_elifPart921); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ELIF85_tree = (CommonTree)adaptor.create(ELIF85);
            adaptor.addChild(root_0, ELIF85_tree);
            }
            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:364:10: ( ws )*
            loop51:
            do {
                int alt51=2;
                int LA51_0 = input.LA(1);

                if ( (LA51_0==WS) ) {
                    int LA51_2 = input.LA(2);

                    if ( (synpred74_command()) ) {
                        alt51=1;
                    }


                }


                switch (alt51) {
            	case 1 :
            	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:0:0: ws
            	    {
            	    pushFollow(FOLLOW_ws_in_elifPart923);
            	    ws86=ws();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, ws86.getTree());

            	    }
            	    break;

            	default :
            	    break loop51;
                }
            } while (true);

            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:364:14: ( '(' )?
            int alt52=2;
            alt52 = dfa52.predict(input);
            switch (alt52) {
                case 1 :
                    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:0:0: '('
                    {
                    char_literal87=(Token)match(input,86,FOLLOW_86_in_elifPart926); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal87_tree = (CommonTree)adaptor.create(char_literal87);
                    adaptor.addChild(root_0, char_literal87_tree);
                    }

                    }
                    break;

            }

            pushFollow(FOLLOW_freeExpression_in_elifPart931);
            e=freeExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, e.getTree());
            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:364:36: ( ')' )?
            int alt53=2;
            int LA53_0 = input.LA(1);

            if ( (LA53_0==87) ) {
                int LA53_1 = input.LA(2);

                if ( (synpred76_command()) ) {
                    alt53=1;
                }
            }
            switch (alt53) {
                case 1 :
                    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:0:0: ')'
                    {
                    char_literal88=(Token)match(input,87,FOLLOW_87_in_elifPart933); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal88_tree = (CommonTree)adaptor.create(char_literal88);
                    adaptor.addChild(root_0, char_literal88_tree);
                    }

                    }
                    break;

            }

            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:364:41: ( NL )?
            int alt54=2;
            int LA54_0 = input.LA(1);

            if ( (LA54_0==NL) ) {
                int LA54_1 = input.LA(2);

                if ( (synpred77_command()) ) {
                    alt54=1;
                }
            }
            switch (alt54) {
                case 1 :
                    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:0:0: NL
                    {
                    NL89=(Token)match(input,NL,FOLLOW_NL_in_elifPart936); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NL89_tree = (CommonTree)adaptor.create(NL89);
                    adaptor.addChild(root_0, NL89_tree);
                    }

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
              Utils.removeWriteblocker("if");
            }
            if ( state.backtracking==0 ) {
               
                
                
            }
            if ( state.backtracking==0 ) {
               
                if (Utils.isSkipElse() || Utils.isSkipIf() || !(Utils.getExpressionsVal((e!=null?input.toString(e.start,e.stop):null), e.tree.getLine()).equals("true"))) {
                         Utils.addWriteblocker("if");
                   } else {
                         Utils.setSkipElse(true);
                   }
                
            }
            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:380:5: ( command | se= stringExpression | str= ee )*
            loop55:
            do {
                int alt55=4;
                switch ( input.LA(1) ) {
                case WS:
                    {
                    int LA55_1 = input.LA(2);

                    if ( (synpred80_command()) ) {
                        alt55=3;
                    }


                    }
                    break;
                case COMMANDCHAR:
                    {
                    int LA55_2 = input.LA(2);

                    if ( ((LA55_2>=IDENT && LA55_2<=EXTENDEDADAPTSAMELEVEL)||(LA55_2>=ADAPTCOPY && LA55_2<=IF)||(LA55_2>=IFDEF && LA55_2<=SELECT)||LA55_2==INSERT||(LA55_2>=INSERTBEFORE && LA55_2<=EXTENDEDBREAK)||(LA55_2>=BREAK && LA55_2<=WHILE)||LA55_2==SETLOOP||(LA55_2>=MESSAGE && LA55_2<=EXTENDEDMESSAGE)||(LA55_2>=MESSAGEIF && LA55_2<=TEXT)) ) {
                        alt55=1;
                    }


                    }
                    break;
                case STRING:
                    {
                    int LA55_4 = input.LA(2);

                    if ( (synpred79_command()) ) {
                        alt55=2;
                    }
                    else if ( (synpred80_command()) ) {
                        alt55=3;
                    }


                    }
                    break;
                case EPRESSIONCHAR:
                    {
                    alt55=2;
                    }
                    break;
                case NEGATION:
                case DEFINED:
                case ARTVARCHAR:
                case NL:
                case IDENT:
                case SIMPLEADAPT:
                case ADAPTSAMELEVEL:
                case EXTENDEDADAPT:
                case EXTENDEDADAPTSAMELEVEL:
                case ENDADAPT:
                case ADAPTCOPY:
                case SET:
                case SETDEFER:
                case OUTPUT:
                case OUTDIR:
                case OUTFILE:
                case IF:
                case ENDIF:
                case ELIF:
                case ELSE:
                case IFDEF:
                case IFNDEF:
                case REMOVE:
                case SELECT:
                case ENDSELECT:
                case OPTIONUNDEFINED:
                case ENDOPTION:
                case OPTION:
                case OTHERWISE:
                case ENDOTHERWISE:
                case INSERT:
                case ENDINSERT:
                case INSERTBEFORE:
                case INSERTAFTER:
                case EXTENDEDBREAK:
                case ENDBREAK:
                case BREAK:
                case WHILE:
                case ENDWHILE:
                case SETLOOP:
                case ENDSETLOOP:
                case VARS:
                case ENDVARS:
                case VAR:
                case ITER:
                case MESSAGE:
                case EXTENDEDMESSAGE:
                case ENDMESSAGE:
                case MESSAGEIF:
                case EXTENDEDMESSAGEIF:
                case MESSAGEDEBUG:
                case EXTENDEDMESSAGEDEBUG:
                case TEXT:
                case ENDTEXT:
                case REFERENCECHAR:
                case INTEGER:
                case ISLAST:
                case ISFIRST:
                case SIZE:
                case ISNUMERIC:
                case ULCAP:
                case LLCAP:
                case DEBUGMODE:
                case CURRENTFILE:
                case DEFAULTOUTPUT:
                case COMMENTCHAR:
                case QUOTATIONMARK:
                case STRINGNOEND:
                case NOTNEWLINE:
                case COMMENT:
                case ESCCOMMENT:
                case DIGIT:
                case SPECCHAR:
                case LETTER:
                case DOT:
                case ANYCHAR:
                case 84:
                case 85:
                case 86:
                case 87:
                case 88:
                case 89:
                case 90:
                case 91:
                case 92:
                case 93:
                case 94:
                case 95:
                case 96:
                case 97:
                case 98:
                case 99:
                case 100:
                case 101:
                case 102:
                case 103:
                case 104:
                case 105:
                case 106:
                case 107:
                case 108:
                case 109:
                    {
                    alt55=3;
                    }
                    break;

                }

                switch (alt55) {
            	case 1 :
            	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:380:6: command
            	    {
            	    pushFollow(FOLLOW_command_in_elifPart968);
            	    command90=command();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, command90.getTree());

            	    }
            	    break;
            	case 2 :
            	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:381:10: se= stringExpression
            	    {
            	    pushFollow(FOLLOW_stringExpression_in_elifPart981);
            	    se=stringExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, se.getTree());
            	    if ( state.backtracking==0 ) {
            	       writeExpression((se!=null?input.toString(se.start,se.stop):null), se.tree.getLine()); 
            	    }

            	    }
            	    break;
            	case 3 :
            	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:382:10: str= ee
            	    {
            	    pushFollow(FOLLOW_ee_in_elifPart996);
            	    str=ee();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, str.getTree());
            	    if ( state.backtracking==0 ) {
            	       write((str!=null?input.toString(str.start,str.stop):null));
            	    }

            	    }
            	    break;

            	default :
            	    break loop55;
                }
            } while (true);

            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:383:8: ( ws )*
            loop56:
            do {
                int alt56=2;
                int LA56_0 = input.LA(1);

                if ( (LA56_0==WS) ) {
                    alt56=1;
                }


                switch (alt56) {
            	case 1 :
            	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:0:0: ws
            	    {
            	    pushFollow(FOLLOW_ws_in_elifPart1008);
            	    ws91=ws();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, ws91.getTree());

            	    }
            	    break;

            	default :
            	    break loop56;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException ex) {
                  throw new ARTSyntaxException("Syntax error in File: " + Utils.getCurrentFile() + " line: " + (ex.line == 0 ? Utils.getExpressionLine() : ex.line) + " (" + ex.getStackTrace()[0].getMethodName() + ")");
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "elifPart"

    public static class elsePart_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "elsePart"
    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:386:1: elsePart : ELSE ( NL )? ( command | se= stringExpression | str= ee )* ( ws )* ;
    public final commandParser.elsePart_return elsePart() throws RecognitionException {
        commandParser.elsePart_return retval = new commandParser.elsePart_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token ELSE92=null;
        Token NL93=null;
        commandParser.stringExpression_return se = null;

        commandParser.ee_return str = null;

        commandParser.command_return command94 = null;

        commandParser.ws_return ws95 = null;


        CommonTree ELSE92_tree=null;
        CommonTree NL93_tree=null;

        try {
            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:387:3: ( ELSE ( NL )? ( command | se= stringExpression | str= ee )* ( ws )* )
            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:387:5: ELSE ( NL )? ( command | se= stringExpression | str= ee )* ( ws )*
            {
            root_0 = (CommonTree)adaptor.nil();

            ELSE92=(Token)match(input,ELSE,FOLLOW_ELSE_in_elsePart1026); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ELSE92_tree = (CommonTree)adaptor.create(ELSE92);
            adaptor.addChild(root_0, ELSE92_tree);
            }
            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:387:10: ( NL )?
            int alt57=2;
            int LA57_0 = input.LA(1);

            if ( (LA57_0==NL) ) {
                int LA57_1 = input.LA(2);

                if ( (synpred82_command()) ) {
                    alt57=1;
                }
            }
            switch (alt57) {
                case 1 :
                    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:0:0: NL
                    {
                    NL93=(Token)match(input,NL,FOLLOW_NL_in_elsePart1028); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NL93_tree = (CommonTree)adaptor.create(NL93);
                    adaptor.addChild(root_0, NL93_tree);
                    }

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
               
                  Utils.removeWriteblocker("if");
                { 
                
                }
                if (Utils.isSkipElse() || Utils.isSkipIf() || !(Utils.canWrite())) {
                         Utils.addWriteblocker("if");
                   }
                
            }
            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:399:5: ( command | se= stringExpression | str= ee )*
            loop58:
            do {
                int alt58=4;
                switch ( input.LA(1) ) {
                case WS:
                    {
                    int LA58_1 = input.LA(2);

                    if ( (synpred85_command()) ) {
                        alt58=3;
                    }


                    }
                    break;
                case COMMANDCHAR:
                    {
                    int LA58_2 = input.LA(2);

                    if ( ((LA58_2>=IDENT && LA58_2<=EXTENDEDADAPTSAMELEVEL)||(LA58_2>=ADAPTCOPY && LA58_2<=IF)||(LA58_2>=IFDEF && LA58_2<=SELECT)||LA58_2==INSERT||(LA58_2>=INSERTBEFORE && LA58_2<=EXTENDEDBREAK)||(LA58_2>=BREAK && LA58_2<=WHILE)||LA58_2==SETLOOP||(LA58_2>=MESSAGE && LA58_2<=EXTENDEDMESSAGE)||(LA58_2>=MESSAGEIF && LA58_2<=TEXT)) ) {
                        alt58=1;
                    }


                    }
                    break;
                case STRING:
                    {
                    int LA58_4 = input.LA(2);

                    if ( (synpred84_command()) ) {
                        alt58=2;
                    }
                    else if ( (synpred85_command()) ) {
                        alt58=3;
                    }


                    }
                    break;
                case EPRESSIONCHAR:
                    {
                    alt58=2;
                    }
                    break;
                case NEGATION:
                case DEFINED:
                case ARTVARCHAR:
                case NL:
                case IDENT:
                case SIMPLEADAPT:
                case ADAPTSAMELEVEL:
                case EXTENDEDADAPT:
                case EXTENDEDADAPTSAMELEVEL:
                case ENDADAPT:
                case ADAPTCOPY:
                case SET:
                case SETDEFER:
                case OUTPUT:
                case OUTDIR:
                case OUTFILE:
                case IF:
                case ENDIF:
                case ELIF:
                case ELSE:
                case IFDEF:
                case IFNDEF:
                case REMOVE:
                case SELECT:
                case ENDSELECT:
                case OPTIONUNDEFINED:
                case ENDOPTION:
                case OPTION:
                case OTHERWISE:
                case ENDOTHERWISE:
                case INSERT:
                case ENDINSERT:
                case INSERTBEFORE:
                case INSERTAFTER:
                case EXTENDEDBREAK:
                case ENDBREAK:
                case BREAK:
                case WHILE:
                case ENDWHILE:
                case SETLOOP:
                case ENDSETLOOP:
                case VARS:
                case ENDVARS:
                case VAR:
                case ITER:
                case MESSAGE:
                case EXTENDEDMESSAGE:
                case ENDMESSAGE:
                case MESSAGEIF:
                case EXTENDEDMESSAGEIF:
                case MESSAGEDEBUG:
                case EXTENDEDMESSAGEDEBUG:
                case TEXT:
                case ENDTEXT:
                case REFERENCECHAR:
                case INTEGER:
                case ISLAST:
                case ISFIRST:
                case SIZE:
                case ISNUMERIC:
                case ULCAP:
                case LLCAP:
                case DEBUGMODE:
                case CURRENTFILE:
                case DEFAULTOUTPUT:
                case COMMENTCHAR:
                case QUOTATIONMARK:
                case STRINGNOEND:
                case NOTNEWLINE:
                case COMMENT:
                case ESCCOMMENT:
                case DIGIT:
                case SPECCHAR:
                case LETTER:
                case DOT:
                case ANYCHAR:
                case 84:
                case 85:
                case 86:
                case 87:
                case 88:
                case 89:
                case 90:
                case 91:
                case 92:
                case 93:
                case 94:
                case 95:
                case 96:
                case 97:
                case 98:
                case 99:
                case 100:
                case 101:
                case 102:
                case 103:
                case 104:
                case 105:
                case 106:
                case 107:
                case 108:
                case 109:
                    {
                    alt58=3;
                    }
                    break;

                }

                switch (alt58) {
            	case 1 :
            	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:399:6: command
            	    {
            	    pushFollow(FOLLOW_command_in_elsePart1044);
            	    command94=command();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, command94.getTree());

            	    }
            	    break;
            	case 2 :
            	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:400:10: se= stringExpression
            	    {
            	    pushFollow(FOLLOW_stringExpression_in_elsePart1057);
            	    se=stringExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, se.getTree());
            	    if ( state.backtracking==0 ) {
            	        writeExpression((se!=null?input.toString(se.start,se.stop):null), se.tree.getLine()); 
            	    }

            	    }
            	    break;
            	case 3 :
            	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:401:10: str= ee
            	    {
            	    pushFollow(FOLLOW_ee_in_elsePart1072);
            	    str=ee();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, str.getTree());
            	    if ( state.backtracking==0 ) {
            	       write((str!=null?input.toString(str.start,str.stop):null));
            	    }

            	    }
            	    break;

            	default :
            	    break loop58;
                }
            } while (true);

            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:402:8: ( ws )*
            loop59:
            do {
                int alt59=2;
                int LA59_0 = input.LA(1);

                if ( (LA59_0==WS) ) {
                    alt59=1;
                }


                switch (alt59) {
            	case 1 :
            	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:0:0: ws
            	    {
            	    pushFollow(FOLLOW_ws_in_elsePart1084);
            	    ws95=ws();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, ws95.getTree());

            	    }
            	    break;

            	default :
            	    break loop59;
                }
            } while (true);

            if ( state.backtracking==0 ) {

                    Utils.removeWriteblocker("if");
                  
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException ex) {
                  throw new ARTSyntaxException("Syntax error in File: " + Utils.getCurrentFile() + " line: " + (ex.line == 0 ? Utils.getExpressionLine() : ex.line) + " (" + ex.getStackTrace()[0].getMethodName() + ")");
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "elsePart"

    public static class ifDefCommand_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ifDefCommand"
    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:409:1: ifDefCommand : IFDEF ( ws )* i= IDENT ( command | se= stringExpression | str= ee )* ( ws )* COMMANDCHAR ENDIF ;
    public final commandParser.ifDefCommand_return ifDefCommand() throws RecognitionException {
        commandParser.ifDefCommand_return retval = new commandParser.ifDefCommand_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token IFDEF96=null;
        Token COMMANDCHAR100=null;
        Token ENDIF101=null;
        commandParser.stringExpression_return se = null;

        commandParser.ee_return str = null;

        commandParser.ws_return ws97 = null;

        commandParser.command_return command98 = null;

        commandParser.ws_return ws99 = null;


        CommonTree i_tree=null;
        CommonTree IFDEF96_tree=null;
        CommonTree COMMANDCHAR100_tree=null;
        CommonTree ENDIF101_tree=null;

        try {
            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:410:3: ( IFDEF ( ws )* i= IDENT ( command | se= stringExpression | str= ee )* ( ws )* COMMANDCHAR ENDIF )
            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:410:5: IFDEF ( ws )* i= IDENT ( command | se= stringExpression | str= ee )* ( ws )* COMMANDCHAR ENDIF
            {
            root_0 = (CommonTree)adaptor.nil();

            IFDEF96=(Token)match(input,IFDEF,FOLLOW_IFDEF_in_ifDefCommand1110); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            IFDEF96_tree = (CommonTree)adaptor.create(IFDEF96);
            adaptor.addChild(root_0, IFDEF96_tree);
            }
            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:410:11: ( ws )*
            loop60:
            do {
                int alt60=2;
                int LA60_0 = input.LA(1);

                if ( (LA60_0==WS) ) {
                    alt60=1;
                }


                switch (alt60) {
            	case 1 :
            	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:0:0: ws
            	    {
            	    pushFollow(FOLLOW_ws_in_ifDefCommand1112);
            	    ws97=ws();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, ws97.getTree());

            	    }
            	    break;

            	default :
            	    break loop60;
                }
            } while (true);

            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_ifDefCommand1117); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            i_tree = (CommonTree)adaptor.create(i);
            adaptor.addChild(root_0, i_tree);
            }
            if ( state.backtracking==0 ) {

                      //IfDefCommand code
                      if (!(Utils.getVariables().containsKey((i!=null?i.getText():null))) || !(Utils.canWrite())){
                          Utils.addWriteblocker("if");
                      }
                      
                      try {
                        if(statParam.isStatEnabled()) {
                          IfdefRecord idr = new IfdefRecord();
                      idr.setFileId(statParam.getCurrentFileId());
                      idr.setLineNo(lineNo);
                      idr.setVarName((i!=null?i.getText():null));
                      idr.save();
                    }
                  } catch (Exception e) {
                    System.out.println("Error occured while processing statistics." + e.getMessage());
                    // e.printStackTrace();
                  }
                  
            }
            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:430:5: ( command | se= stringExpression | str= ee )*
            loop61:
            do {
                int alt61=4;
                switch ( input.LA(1) ) {
                case WS:
                    {
                    int LA61_1 = input.LA(2);

                    if ( (synpred90_command()) ) {
                        alt61=3;
                    }


                    }
                    break;
                case COMMANDCHAR:
                    {
                    int LA61_2 = input.LA(2);

                    if ( ((LA61_2>=IDENT && LA61_2<=EXTENDEDADAPTSAMELEVEL)||(LA61_2>=ADAPTCOPY && LA61_2<=IF)||(LA61_2>=IFDEF && LA61_2<=SELECT)||LA61_2==INSERT||(LA61_2>=INSERTBEFORE && LA61_2<=EXTENDEDBREAK)||(LA61_2>=BREAK && LA61_2<=WHILE)||LA61_2==SETLOOP||(LA61_2>=MESSAGE && LA61_2<=EXTENDEDMESSAGE)||(LA61_2>=MESSAGEIF && LA61_2<=TEXT)) ) {
                        alt61=1;
                    }


                    }
                    break;
                case STRING:
                    {
                    int LA61_3 = input.LA(2);

                    if ( (synpred89_command()) ) {
                        alt61=2;
                    }
                    else if ( (synpred90_command()) ) {
                        alt61=3;
                    }


                    }
                    break;
                case EPRESSIONCHAR:
                    {
                    alt61=2;
                    }
                    break;
                case NEGATION:
                case DEFINED:
                case ARTVARCHAR:
                case NL:
                case IDENT:
                case SIMPLEADAPT:
                case ADAPTSAMELEVEL:
                case EXTENDEDADAPT:
                case EXTENDEDADAPTSAMELEVEL:
                case ENDADAPT:
                case ADAPTCOPY:
                case SET:
                case SETDEFER:
                case OUTPUT:
                case OUTDIR:
                case OUTFILE:
                case IF:
                case ENDIF:
                case ELIF:
                case ELSE:
                case IFDEF:
                case IFNDEF:
                case REMOVE:
                case SELECT:
                case ENDSELECT:
                case OPTIONUNDEFINED:
                case ENDOPTION:
                case OPTION:
                case OTHERWISE:
                case ENDOTHERWISE:
                case INSERT:
                case ENDINSERT:
                case INSERTBEFORE:
                case INSERTAFTER:
                case EXTENDEDBREAK:
                case ENDBREAK:
                case BREAK:
                case WHILE:
                case ENDWHILE:
                case SETLOOP:
                case ENDSETLOOP:
                case VARS:
                case ENDVARS:
                case VAR:
                case ITER:
                case MESSAGE:
                case EXTENDEDMESSAGE:
                case ENDMESSAGE:
                case MESSAGEIF:
                case EXTENDEDMESSAGEIF:
                case MESSAGEDEBUG:
                case EXTENDEDMESSAGEDEBUG:
                case TEXT:
                case ENDTEXT:
                case REFERENCECHAR:
                case INTEGER:
                case ISLAST:
                case ISFIRST:
                case SIZE:
                case ISNUMERIC:
                case ULCAP:
                case LLCAP:
                case DEBUGMODE:
                case CURRENTFILE:
                case DEFAULTOUTPUT:
                case COMMENTCHAR:
                case QUOTATIONMARK:
                case STRINGNOEND:
                case NOTNEWLINE:
                case COMMENT:
                case ESCCOMMENT:
                case DIGIT:
                case SPECCHAR:
                case LETTER:
                case DOT:
                case ANYCHAR:
                case 84:
                case 85:
                case 86:
                case 87:
                case 88:
                case 89:
                case 90:
                case 91:
                case 92:
                case 93:
                case 94:
                case 95:
                case 96:
                case 97:
                case 98:
                case 99:
                case 100:
                case 101:
                case 102:
                case 103:
                case 104:
                case 105:
                case 106:
                case 107:
                case 108:
                case 109:
                    {
                    alt61=3;
                    }
                    break;

                }

                switch (alt61) {
            	case 1 :
            	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:430:6: command
            	    {
            	    pushFollow(FOLLOW_command_in_ifDefCommand1130);
            	    command98=command();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, command98.getTree());

            	    }
            	    break;
            	case 2 :
            	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:431:10: se= stringExpression
            	    {
            	    pushFollow(FOLLOW_stringExpression_in_ifDefCommand1143);
            	    se=stringExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, se.getTree());
            	    if ( state.backtracking==0 ) {
            	        writeExpression((se!=null?input.toString(se.start,se.stop):null), se.tree.getLine()); 
            	    }

            	    }
            	    break;
            	case 3 :
            	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:432:10: str= ee
            	    {
            	    pushFollow(FOLLOW_ee_in_ifDefCommand1158);
            	    str=ee();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, str.getTree());
            	    if ( state.backtracking==0 ) {
            	       write((str!=null?input.toString(str.start,str.stop):null));
            	    }

            	    }
            	    break;

            	default :
            	    break loop61;
                }
            } while (true);

            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:433:8: ( ws )*
            loop62:
            do {
                int alt62=2;
                int LA62_0 = input.LA(1);

                if ( (LA62_0==WS) ) {
                    alt62=1;
                }


                switch (alt62) {
            	case 1 :
            	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:0:0: ws
            	    {
            	    pushFollow(FOLLOW_ws_in_ifDefCommand1170);
            	    ws99=ws();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, ws99.getTree());

            	    }
            	    break;

            	default :
            	    break loop62;
                }
            } while (true);

            COMMANDCHAR100=(Token)match(input,COMMANDCHAR,FOLLOW_COMMANDCHAR_in_ifDefCommand1178); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            COMMANDCHAR100_tree = (CommonTree)adaptor.create(COMMANDCHAR100);
            adaptor.addChild(root_0, COMMANDCHAR100_tree);
            }
            ENDIF101=(Token)match(input,ENDIF,FOLLOW_ENDIF_in_ifDefCommand1180); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ENDIF101_tree = (CommonTree)adaptor.create(ENDIF101);
            adaptor.addChild(root_0, ENDIF101_tree);
            }
            if ( state.backtracking==0 ) {
              Utils.removeWriteblocker("if");
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException ex) {
                  throw new ARTSyntaxException("Syntax error in File: " + Utils.getCurrentFile() + " line: " + (ex.line == 0 ? Utils.getExpressionLine() : ex.line) + " (" + ex.getStackTrace()[0].getMethodName() + ")");
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "ifDefCommand"

    public static class ifnDefCommand_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ifnDefCommand"
    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:437:1: ifnDefCommand : IFNDEF ( ws )* i= IDENT ( command | se= stringExpression | str= ee )* ( ws )* COMMANDCHAR ENDIF ;
    public final commandParser.ifnDefCommand_return ifnDefCommand() throws RecognitionException {
        commandParser.ifnDefCommand_return retval = new commandParser.ifnDefCommand_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token IFNDEF102=null;
        Token COMMANDCHAR106=null;
        Token ENDIF107=null;
        commandParser.stringExpression_return se = null;

        commandParser.ee_return str = null;

        commandParser.ws_return ws103 = null;

        commandParser.command_return command104 = null;

        commandParser.ws_return ws105 = null;


        CommonTree i_tree=null;
        CommonTree IFNDEF102_tree=null;
        CommonTree COMMANDCHAR106_tree=null;
        CommonTree ENDIF107_tree=null;

        try {
            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:438:3: ( IFNDEF ( ws )* i= IDENT ( command | se= stringExpression | str= ee )* ( ws )* COMMANDCHAR ENDIF )
            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:438:5: IFNDEF ( ws )* i= IDENT ( command | se= stringExpression | str= ee )* ( ws )* COMMANDCHAR ENDIF
            {
            root_0 = (CommonTree)adaptor.nil();

            IFNDEF102=(Token)match(input,IFNDEF,FOLLOW_IFNDEF_in_ifnDefCommand1198); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            IFNDEF102_tree = (CommonTree)adaptor.create(IFNDEF102);
            adaptor.addChild(root_0, IFNDEF102_tree);
            }
            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:438:12: ( ws )*
            loop63:
            do {
                int alt63=2;
                int LA63_0 = input.LA(1);

                if ( (LA63_0==WS) ) {
                    alt63=1;
                }


                switch (alt63) {
            	case 1 :
            	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:0:0: ws
            	    {
            	    pushFollow(FOLLOW_ws_in_ifnDefCommand1200);
            	    ws103=ws();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, ws103.getTree());

            	    }
            	    break;

            	default :
            	    break loop63;
                }
            } while (true);

            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_ifnDefCommand1205); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            i_tree = (CommonTree)adaptor.create(i);
            adaptor.addChild(root_0, i_tree);
            }
            if ( state.backtracking==0 ) {

                      //IfDefCommand code
                      if (Utils.getVariables().containsKey((i!=null?i.getText():null)) || !(Utils.canWrite())){
                          Utils.addWriteblocker("if");
                      }
                      
                      try {
                        if(statParam.isStatEnabled()) {
                          IfndefRecord idr = new IfndefRecord();
                      idr.setFileId(statParam.getCurrentFileId());
                      idr.setLineNo(lineNo);
                      idr.setVarName((i!=null?i.getText():null));
                      idr.save();
                    }
                  } catch (Exception e) {
                    System.out.println("Error occured while processing statistics." + e.getMessage());
                    // e.printStackTrace();
                  }
                  
            }
            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:458:5: ( command | se= stringExpression | str= ee )*
            loop64:
            do {
                int alt64=4;
                switch ( input.LA(1) ) {
                case WS:
                    {
                    int LA64_1 = input.LA(2);

                    if ( (synpred95_command()) ) {
                        alt64=3;
                    }


                    }
                    break;
                case COMMANDCHAR:
                    {
                    int LA64_2 = input.LA(2);

                    if ( ((LA64_2>=IDENT && LA64_2<=EXTENDEDADAPTSAMELEVEL)||(LA64_2>=ADAPTCOPY && LA64_2<=IF)||(LA64_2>=IFDEF && LA64_2<=SELECT)||LA64_2==INSERT||(LA64_2>=INSERTBEFORE && LA64_2<=EXTENDEDBREAK)||(LA64_2>=BREAK && LA64_2<=WHILE)||LA64_2==SETLOOP||(LA64_2>=MESSAGE && LA64_2<=EXTENDEDMESSAGE)||(LA64_2>=MESSAGEIF && LA64_2<=TEXT)) ) {
                        alt64=1;
                    }


                    }
                    break;
                case STRING:
                    {
                    int LA64_3 = input.LA(2);

                    if ( (synpred94_command()) ) {
                        alt64=2;
                    }
                    else if ( (synpred95_command()) ) {
                        alt64=3;
                    }


                    }
                    break;
                case EPRESSIONCHAR:
                    {
                    alt64=2;
                    }
                    break;
                case NEGATION:
                case DEFINED:
                case ARTVARCHAR:
                case NL:
                case IDENT:
                case SIMPLEADAPT:
                case ADAPTSAMELEVEL:
                case EXTENDEDADAPT:
                case EXTENDEDADAPTSAMELEVEL:
                case ENDADAPT:
                case ADAPTCOPY:
                case SET:
                case SETDEFER:
                case OUTPUT:
                case OUTDIR:
                case OUTFILE:
                case IF:
                case ENDIF:
                case ELIF:
                case ELSE:
                case IFDEF:
                case IFNDEF:
                case REMOVE:
                case SELECT:
                case ENDSELECT:
                case OPTIONUNDEFINED:
                case ENDOPTION:
                case OPTION:
                case OTHERWISE:
                case ENDOTHERWISE:
                case INSERT:
                case ENDINSERT:
                case INSERTBEFORE:
                case INSERTAFTER:
                case EXTENDEDBREAK:
                case ENDBREAK:
                case BREAK:
                case WHILE:
                case ENDWHILE:
                case SETLOOP:
                case ENDSETLOOP:
                case VARS:
                case ENDVARS:
                case VAR:
                case ITER:
                case MESSAGE:
                case EXTENDEDMESSAGE:
                case ENDMESSAGE:
                case MESSAGEIF:
                case EXTENDEDMESSAGEIF:
                case MESSAGEDEBUG:
                case EXTENDEDMESSAGEDEBUG:
                case TEXT:
                case ENDTEXT:
                case REFERENCECHAR:
                case INTEGER:
                case ISLAST:
                case ISFIRST:
                case SIZE:
                case ISNUMERIC:
                case ULCAP:
                case LLCAP:
                case DEBUGMODE:
                case CURRENTFILE:
                case DEFAULTOUTPUT:
                case COMMENTCHAR:
                case QUOTATIONMARK:
                case STRINGNOEND:
                case NOTNEWLINE:
                case COMMENT:
                case ESCCOMMENT:
                case DIGIT:
                case SPECCHAR:
                case LETTER:
                case DOT:
                case ANYCHAR:
                case 84:
                case 85:
                case 86:
                case 87:
                case 88:
                case 89:
                case 90:
                case 91:
                case 92:
                case 93:
                case 94:
                case 95:
                case 96:
                case 97:
                case 98:
                case 99:
                case 100:
                case 101:
                case 102:
                case 103:
                case 104:
                case 105:
                case 106:
                case 107:
                case 108:
                case 109:
                    {
                    alt64=3;
                    }
                    break;

                }

                switch (alt64) {
            	case 1 :
            	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:458:6: command
            	    {
            	    pushFollow(FOLLOW_command_in_ifnDefCommand1218);
            	    command104=command();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, command104.getTree());

            	    }
            	    break;
            	case 2 :
            	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:459:10: se= stringExpression
            	    {
            	    pushFollow(FOLLOW_stringExpression_in_ifnDefCommand1231);
            	    se=stringExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, se.getTree());
            	    if ( state.backtracking==0 ) {
            	        writeExpression((se!=null?input.toString(se.start,se.stop):null), se.tree.getLine()); 
            	    }

            	    }
            	    break;
            	case 3 :
            	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:460:10: str= ee
            	    {
            	    pushFollow(FOLLOW_ee_in_ifnDefCommand1246);
            	    str=ee();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, str.getTree());
            	    if ( state.backtracking==0 ) {
            	       write((str!=null?input.toString(str.start,str.stop):null));
            	    }

            	    }
            	    break;

            	default :
            	    break loop64;
                }
            } while (true);

            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:461:8: ( ws )*
            loop65:
            do {
                int alt65=2;
                int LA65_0 = input.LA(1);

                if ( (LA65_0==WS) ) {
                    alt65=1;
                }


                switch (alt65) {
            	case 1 :
            	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:0:0: ws
            	    {
            	    pushFollow(FOLLOW_ws_in_ifnDefCommand1258);
            	    ws105=ws();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, ws105.getTree());

            	    }
            	    break;

            	default :
            	    break loop65;
                }
            } while (true);

            COMMANDCHAR106=(Token)match(input,COMMANDCHAR,FOLLOW_COMMANDCHAR_in_ifnDefCommand1266); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            COMMANDCHAR106_tree = (CommonTree)adaptor.create(COMMANDCHAR106);
            adaptor.addChild(root_0, COMMANDCHAR106_tree);
            }
            ENDIF107=(Token)match(input,ENDIF,FOLLOW_ENDIF_in_ifnDefCommand1268); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ENDIF107_tree = (CommonTree)adaptor.create(ENDIF107);
            adaptor.addChild(root_0, ENDIF107_tree);
            }
            if ( state.backtracking==0 ) {
              Utils.removeWriteblocker("if");
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException ex) {
                  throw new ARTSyntaxException("Syntax error in File: " + Utils.getCurrentFile() + " line: " + (ex.line == 0 ? Utils.getExpressionLine() : ex.line) + " (" + ex.getStackTrace()[0].getMethodName() + ")");
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "ifnDefCommand"

    public static class removeCommand_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "removeCommand"
    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:465:1: removeCommand : r= REMOVE ( ws )* i= IDENT ;
    public final commandParser.removeCommand_return removeCommand() throws RecognitionException {
        commandParser.removeCommand_return retval = new commandParser.removeCommand_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token r=null;
        Token i=null;
        commandParser.ws_return ws108 = null;


        CommonTree r_tree=null;
        CommonTree i_tree=null;

        try {
            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:466:3: (r= REMOVE ( ws )* i= IDENT )
            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:466:5: r= REMOVE ( ws )* i= IDENT
            {
            root_0 = (CommonTree)adaptor.nil();

            r=(Token)match(input,REMOVE,FOLLOW_REMOVE_in_removeCommand1287); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            r_tree = (CommonTree)adaptor.create(r);
            adaptor.addChild(root_0, r_tree);
            }
            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:466:14: ( ws )*
            loop66:
            do {
                int alt66=2;
                int LA66_0 = input.LA(1);

                if ( (LA66_0==WS) ) {
                    alt66=1;
                }


                switch (alt66) {
            	case 1 :
            	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:0:0: ws
            	    {
            	    pushFollow(FOLLOW_ws_in_removeCommand1289);
            	    ws108=ws();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, ws108.getTree());

            	    }
            	    break;

            	default :
            	    break loop66;
                }
            } while (true);

            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_removeCommand1294); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            i_tree = (CommonTree)adaptor.create(i);
            adaptor.addChild(root_0, i_tree);
            }
            if ( state.backtracking==0 ) {

                    //Remove command
                    if (Utils.canWrite()){
                        new RemoveCommand((i!=null?i.getText():null), r.getLine()).execute();
                    }
                
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException ex) {
                  throw new ARTSyntaxException("Syntax error in File: " + Utils.getCurrentFile() + " line: " + (ex.line == 0 ? Utils.getExpressionLine() : ex.line) + " (" + ex.getStackTrace()[0].getMethodName() + ")");
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "removeCommand"

    public static class selectCommand_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "selectCommand"
    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:476:1: selectCommand : s= SELECT ( ws )* e= expression ( ws | nl )* ( COMMANDCHAR optionUndef )? ( ws | nl )* ( COMMANDCHAR option ( ws | nl )* )* ( COMMANDCHAR otherwise )? ( ws | nl )* COMMANDCHAR ENDSELECT ;
    public final commandParser.selectCommand_return selectCommand() throws RecognitionException {
        commandParser.selectCommand_return retval = new commandParser.selectCommand_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token s=null;
        Token COMMANDCHAR112=null;
        Token COMMANDCHAR116=null;
        Token COMMANDCHAR120=null;
        Token COMMANDCHAR124=null;
        Token ENDSELECT125=null;
        commandParser.expression_return e = null;

        commandParser.ws_return ws109 = null;

        commandParser.ws_return ws110 = null;

        commandParser.nl_return nl111 = null;

        commandParser.optionUndef_return optionUndef113 = null;

        commandParser.ws_return ws114 = null;

        commandParser.nl_return nl115 = null;

        commandParser.option_return option117 = null;

        commandParser.ws_return ws118 = null;

        commandParser.nl_return nl119 = null;

        commandParser.otherwise_return otherwise121 = null;

        commandParser.ws_return ws122 = null;

        commandParser.nl_return nl123 = null;


        CommonTree s_tree=null;
        CommonTree COMMANDCHAR112_tree=null;
        CommonTree COMMANDCHAR116_tree=null;
        CommonTree COMMANDCHAR120_tree=null;
        CommonTree COMMANDCHAR124_tree=null;
        CommonTree ENDSELECT125_tree=null;

        try {
            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:477:3: (s= SELECT ( ws )* e= expression ( ws | nl )* ( COMMANDCHAR optionUndef )? ( ws | nl )* ( COMMANDCHAR option ( ws | nl )* )* ( COMMANDCHAR otherwise )? ( ws | nl )* COMMANDCHAR ENDSELECT )
            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:477:5: s= SELECT ( ws )* e= expression ( ws | nl )* ( COMMANDCHAR optionUndef )? ( ws | nl )* ( COMMANDCHAR option ( ws | nl )* )* ( COMMANDCHAR otherwise )? ( ws | nl )* COMMANDCHAR ENDSELECT
            {
            root_0 = (CommonTree)adaptor.nil();

            s=(Token)match(input,SELECT,FOLLOW_SELECT_in_selectCommand1316); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            s_tree = (CommonTree)adaptor.create(s);
            adaptor.addChild(root_0, s_tree);
            }
            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:477:14: ( ws )*
            loop67:
            do {
                int alt67=2;
                int LA67_0 = input.LA(1);

                if ( (LA67_0==WS) ) {
                    int LA67_2 = input.LA(2);

                    if ( (synpred98_command()) ) {
                        alt67=1;
                    }


                }


                switch (alt67) {
            	case 1 :
            	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:0:0: ws
            	    {
            	    pushFollow(FOLLOW_ws_in_selectCommand1318);
            	    ws109=ws();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, ws109.getTree());

            	    }
            	    break;

            	default :
            	    break loop67;
                }
            } while (true);

            pushFollow(FOLLOW_expression_in_selectCommand1323);
            e=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, e.getTree());
            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:477:31: ( ws | nl )*
            loop68:
            do {
                int alt68=3;
                int LA68_0 = input.LA(1);

                if ( (LA68_0==WS) ) {
                    int LA68_2 = input.LA(2);

                    if ( (synpred99_command()) ) {
                        alt68=1;
                    }


                }
                else if ( (LA68_0==NL) ) {
                    int LA68_3 = input.LA(2);

                    if ( (synpred100_command()) ) {
                        alt68=2;
                    }


                }


                switch (alt68) {
            	case 1 :
            	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:477:32: ws
            	    {
            	    pushFollow(FOLLOW_ws_in_selectCommand1326);
            	    ws110=ws();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, ws110.getTree());

            	    }
            	    break;
            	case 2 :
            	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:477:37: nl
            	    {
            	    pushFollow(FOLLOW_nl_in_selectCommand1330);
            	    nl111=nl();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nl111.getTree());

            	    }
            	    break;

            	default :
            	    break loop68;
                }
            } while (true);

            if ( state.backtracking==0 ) {

                    //SelectCommand code
                    if (Utils.canWrite()){
                        new SelectCommand((e!=null?input.toString(e.start,e.stop):null), lineNo).execute();
                    }
                 
            }
            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:486:7: ( COMMANDCHAR optionUndef )?
            int alt69=2;
            int LA69_0 = input.LA(1);

            if ( (LA69_0==COMMANDCHAR) ) {
                int LA69_1 = input.LA(2);

                if ( (LA69_1==OPTIONUNDEFINED) ) {
                    alt69=1;
                }
            }
            switch (alt69) {
                case 1 :
                    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:486:8: COMMANDCHAR optionUndef
                    {
                    COMMANDCHAR112=(Token)match(input,COMMANDCHAR,FOLLOW_COMMANDCHAR_in_selectCommand1353); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COMMANDCHAR112_tree = (CommonTree)adaptor.create(COMMANDCHAR112);
                    adaptor.addChild(root_0, COMMANDCHAR112_tree);
                    }
                    pushFollow(FOLLOW_optionUndef_in_selectCommand1355);
                    optionUndef113=optionUndef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, optionUndef113.getTree());

                    }
                    break;

            }

            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:486:34: ( ws | nl )*
            loop70:
            do {
                int alt70=3;
                int LA70_0 = input.LA(1);

                if ( (LA70_0==WS) ) {
                    int LA70_2 = input.LA(2);

                    if ( (synpred102_command()) ) {
                        alt70=1;
                    }


                }
                else if ( (LA70_0==NL) ) {
                    int LA70_3 = input.LA(2);

                    if ( (synpred103_command()) ) {
                        alt70=2;
                    }


                }


                switch (alt70) {
            	case 1 :
            	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:486:35: ws
            	    {
            	    pushFollow(FOLLOW_ws_in_selectCommand1360);
            	    ws114=ws();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, ws114.getTree());

            	    }
            	    break;
            	case 2 :
            	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:486:40: nl
            	    {
            	    pushFollow(FOLLOW_nl_in_selectCommand1364);
            	    nl115=nl();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nl115.getTree());

            	    }
            	    break;

            	default :
            	    break loop70;
                }
            } while (true);

            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:487:7: ( COMMANDCHAR option ( ws | nl )* )*
            loop72:
            do {
                int alt72=2;
                int LA72_0 = input.LA(1);

                if ( (LA72_0==COMMANDCHAR) ) {
                    int LA72_1 = input.LA(2);

                    if ( (LA72_1==OPTION) ) {
                        alt72=1;
                    }


                }


                switch (alt72) {
            	case 1 :
            	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:487:8: COMMANDCHAR option ( ws | nl )*
            	    {
            	    COMMANDCHAR116=(Token)match(input,COMMANDCHAR,FOLLOW_COMMANDCHAR_in_selectCommand1375); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    COMMANDCHAR116_tree = (CommonTree)adaptor.create(COMMANDCHAR116);
            	    adaptor.addChild(root_0, COMMANDCHAR116_tree);
            	    }
            	    pushFollow(FOLLOW_option_in_selectCommand1377);
            	    option117=option();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, option117.getTree());
            	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:487:27: ( ws | nl )*
            	    loop71:
            	    do {
            	        int alt71=3;
            	        int LA71_0 = input.LA(1);

            	        if ( (LA71_0==WS) ) {
            	            int LA71_2 = input.LA(2);

            	            if ( (synpred104_command()) ) {
            	                alt71=1;
            	            }


            	        }
            	        else if ( (LA71_0==NL) ) {
            	            int LA71_3 = input.LA(2);

            	            if ( (synpred105_command()) ) {
            	                alt71=2;
            	            }


            	        }


            	        switch (alt71) {
            	    	case 1 :
            	    	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:487:28: ws
            	    	    {
            	    	    pushFollow(FOLLOW_ws_in_selectCommand1380);
            	    	    ws118=ws();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, ws118.getTree());

            	    	    }
            	    	    break;
            	    	case 2 :
            	    	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:487:33: nl
            	    	    {
            	    	    pushFollow(FOLLOW_nl_in_selectCommand1384);
            	    	    nl119=nl();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nl119.getTree());

            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop71;
            	        }
            	    } while (true);


            	    }
            	    break;

            	default :
            	    break loop72;
                }
            } while (true);

            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:488:7: ( COMMANDCHAR otherwise )?
            int alt73=2;
            int LA73_0 = input.LA(1);

            if ( (LA73_0==COMMANDCHAR) ) {
                int LA73_1 = input.LA(2);

                if ( (LA73_1==OTHERWISE) ) {
                    alt73=1;
                }
            }
            switch (alt73) {
                case 1 :
                    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:488:8: COMMANDCHAR otherwise
                    {
                    COMMANDCHAR120=(Token)match(input,COMMANDCHAR,FOLLOW_COMMANDCHAR_in_selectCommand1398); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COMMANDCHAR120_tree = (CommonTree)adaptor.create(COMMANDCHAR120);
                    adaptor.addChild(root_0, COMMANDCHAR120_tree);
                    }
                    pushFollow(FOLLOW_otherwise_in_selectCommand1400);
                    otherwise121=otherwise();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, otherwise121.getTree());

                    }
                    break;

            }

            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:488:32: ( ws | nl )*
            loop74:
            do {
                int alt74=3;
                int LA74_0 = input.LA(1);

                if ( (LA74_0==WS) ) {
                    alt74=1;
                }
                else if ( (LA74_0==NL) ) {
                    alt74=2;
                }


                switch (alt74) {
            	case 1 :
            	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:488:33: ws
            	    {
            	    pushFollow(FOLLOW_ws_in_selectCommand1405);
            	    ws122=ws();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, ws122.getTree());

            	    }
            	    break;
            	case 2 :
            	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:488:38: nl
            	    {
            	    pushFollow(FOLLOW_nl_in_selectCommand1409);
            	    nl123=nl();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nl123.getTree());

            	    }
            	    break;

            	default :
            	    break loop74;
                }
            } while (true);

            COMMANDCHAR124=(Token)match(input,COMMANDCHAR,FOLLOW_COMMANDCHAR_in_selectCommand1420); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            COMMANDCHAR124_tree = (CommonTree)adaptor.create(COMMANDCHAR124);
            adaptor.addChild(root_0, COMMANDCHAR124_tree);
            }
            ENDSELECT125=(Token)match(input,ENDSELECT,FOLLOW_ENDSELECT_in_selectCommand1422); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ENDSELECT125_tree = (CommonTree)adaptor.create(ENDSELECT125);
            adaptor.addChild(root_0, ENDSELECT125_tree);
            }
            if ( state.backtracking==0 ) {
                
                   if (Utils.canWrite()){
                      SelectInfo.popSelect();
                   }
                 
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException ex) {
                  throw new ARTSyntaxException("Syntax error in File: " + Utils.getCurrentFile() + " line: " + (ex.line == 0 ? Utils.getExpressionLine() : ex.line) + " (" + ex.getStackTrace()[0].getMethodName() + ")");
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "selectCommand"

    public static class optionUndef_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "optionUndef"
    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:497:1: optionUndef : OPTIONUNDEFINED ( command | se= stringExpression | str= ee )* ( ws )* COMMANDCHAR ENDOPTION ;
    public final commandParser.optionUndef_return optionUndef() throws RecognitionException {
        commandParser.optionUndef_return retval = new commandParser.optionUndef_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token OPTIONUNDEFINED126=null;
        Token COMMANDCHAR129=null;
        Token ENDOPTION130=null;
        commandParser.stringExpression_return se = null;

        commandParser.ee_return str = null;

        commandParser.command_return command127 = null;

        commandParser.ws_return ws128 = null;


        CommonTree OPTIONUNDEFINED126_tree=null;
        CommonTree COMMANDCHAR129_tree=null;
        CommonTree ENDOPTION130_tree=null;

        try {
            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:498:3: ( OPTIONUNDEFINED ( command | se= stringExpression | str= ee )* ( ws )* COMMANDCHAR ENDOPTION )
            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:498:5: OPTIONUNDEFINED ( command | se= stringExpression | str= ee )* ( ws )* COMMANDCHAR ENDOPTION
            {
            root_0 = (CommonTree)adaptor.nil();

            OPTIONUNDEFINED126=(Token)match(input,OPTIONUNDEFINED,FOLLOW_OPTIONUNDEFINED_in_optionUndef1444); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            OPTIONUNDEFINED126_tree = (CommonTree)adaptor.create(OPTIONUNDEFINED126);
            adaptor.addChild(root_0, OPTIONUNDEFINED126_tree);
            }
            if ( state.backtracking==0 ) {

                      //Option undef code
                      if (!SelectInfo.undefined() || !(Utils.canWrite())){
                          Utils.addWriteblocker("option");
                      } else {
                          SelectInfo.setSkipOtherwise(true);
                      }
                  
            }
            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:508:5: ( command | se= stringExpression | str= ee )*
            loop75:
            do {
                int alt75=4;
                switch ( input.LA(1) ) {
                case WS:
                    {
                    int LA75_1 = input.LA(2);

                    if ( (synpred112_command()) ) {
                        alt75=3;
                    }


                    }
                    break;
                case COMMANDCHAR:
                    {
                    int LA75_2 = input.LA(2);

                    if ( ((LA75_2>=IDENT && LA75_2<=EXTENDEDADAPTSAMELEVEL)||(LA75_2>=ADAPTCOPY && LA75_2<=IF)||(LA75_2>=IFDEF && LA75_2<=SELECT)||LA75_2==INSERT||(LA75_2>=INSERTBEFORE && LA75_2<=EXTENDEDBREAK)||(LA75_2>=BREAK && LA75_2<=WHILE)||LA75_2==SETLOOP||(LA75_2>=MESSAGE && LA75_2<=EXTENDEDMESSAGE)||(LA75_2>=MESSAGEIF && LA75_2<=TEXT)) ) {
                        alt75=1;
                    }


                    }
                    break;
                case STRING:
                    {
                    int LA75_3 = input.LA(2);

                    if ( (synpred111_command()) ) {
                        alt75=2;
                    }
                    else if ( (synpred112_command()) ) {
                        alt75=3;
                    }


                    }
                    break;
                case EPRESSIONCHAR:
                    {
                    alt75=2;
                    }
                    break;
                case NEGATION:
                case DEFINED:
                case ARTVARCHAR:
                case NL:
                case IDENT:
                case SIMPLEADAPT:
                case ADAPTSAMELEVEL:
                case EXTENDEDADAPT:
                case EXTENDEDADAPTSAMELEVEL:
                case ENDADAPT:
                case ADAPTCOPY:
                case SET:
                case SETDEFER:
                case OUTPUT:
                case OUTDIR:
                case OUTFILE:
                case IF:
                case ENDIF:
                case ELIF:
                case ELSE:
                case IFDEF:
                case IFNDEF:
                case REMOVE:
                case SELECT:
                case ENDSELECT:
                case OPTIONUNDEFINED:
                case ENDOPTION:
                case OPTION:
                case OTHERWISE:
                case ENDOTHERWISE:
                case INSERT:
                case ENDINSERT:
                case INSERTBEFORE:
                case INSERTAFTER:
                case EXTENDEDBREAK:
                case ENDBREAK:
                case BREAK:
                case WHILE:
                case ENDWHILE:
                case SETLOOP:
                case ENDSETLOOP:
                case VARS:
                case ENDVARS:
                case VAR:
                case ITER:
                case MESSAGE:
                case EXTENDEDMESSAGE:
                case ENDMESSAGE:
                case MESSAGEIF:
                case EXTENDEDMESSAGEIF:
                case MESSAGEDEBUG:
                case EXTENDEDMESSAGEDEBUG:
                case TEXT:
                case ENDTEXT:
                case REFERENCECHAR:
                case INTEGER:
                case ISLAST:
                case ISFIRST:
                case SIZE:
                case ISNUMERIC:
                case ULCAP:
                case LLCAP:
                case DEBUGMODE:
                case CURRENTFILE:
                case DEFAULTOUTPUT:
                case COMMENTCHAR:
                case QUOTATIONMARK:
                case STRINGNOEND:
                case NOTNEWLINE:
                case COMMENT:
                case ESCCOMMENT:
                case DIGIT:
                case SPECCHAR:
                case LETTER:
                case DOT:
                case ANYCHAR:
                case 84:
                case 85:
                case 86:
                case 87:
                case 88:
                case 89:
                case 90:
                case 91:
                case 92:
                case 93:
                case 94:
                case 95:
                case 96:
                case 97:
                case 98:
                case 99:
                case 100:
                case 101:
                case 102:
                case 103:
                case 104:
                case 105:
                case 106:
                case 107:
                case 108:
                case 109:
                    {
                    alt75=3;
                    }
                    break;

                }

                switch (alt75) {
            	case 1 :
            	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:508:6: command
            	    {
            	    pushFollow(FOLLOW_command_in_optionUndef1465);
            	    command127=command();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, command127.getTree());

            	    }
            	    break;
            	case 2 :
            	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:509:10: se= stringExpression
            	    {
            	    pushFollow(FOLLOW_stringExpression_in_optionUndef1478);
            	    se=stringExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, se.getTree());
            	    if ( state.backtracking==0 ) {
            	        writeExpression((se!=null?input.toString(se.start,se.stop):null), se.tree.getLine()); 
            	    }

            	    }
            	    break;
            	case 3 :
            	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:510:10: str= ee
            	    {
            	    pushFollow(FOLLOW_ee_in_optionUndef1493);
            	    str=ee();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, str.getTree());
            	    if ( state.backtracking==0 ) {
            	       write((str!=null?input.toString(str.start,str.stop):null));
            	    }

            	    }
            	    break;

            	default :
            	    break loop75;
                }
            } while (true);

            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:511:8: ( ws )*
            loop76:
            do {
                int alt76=2;
                int LA76_0 = input.LA(1);

                if ( (LA76_0==WS) ) {
                    alt76=1;
                }


                switch (alt76) {
            	case 1 :
            	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:0:0: ws
            	    {
            	    pushFollow(FOLLOW_ws_in_optionUndef1505);
            	    ws128=ws();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, ws128.getTree());

            	    }
            	    break;

            	default :
            	    break loop76;
                }
            } while (true);

            COMMANDCHAR129=(Token)match(input,COMMANDCHAR,FOLLOW_COMMANDCHAR_in_optionUndef1518); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            COMMANDCHAR129_tree = (CommonTree)adaptor.create(COMMANDCHAR129);
            adaptor.addChild(root_0, COMMANDCHAR129_tree);
            }
            ENDOPTION130=(Token)match(input,ENDOPTION,FOLLOW_ENDOPTION_in_optionUndef1520); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ENDOPTION130_tree = (CommonTree)adaptor.create(ENDOPTION130);
            adaptor.addChild(root_0, ENDOPTION130_tree);
            }
            if ( state.backtracking==0 ) {
              Utils.removeWriteblocker("option");
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException ex) {
                  throw new ARTSyntaxException("Syntax error in File: " + Utils.getCurrentFile() + " line: " + (ex.line == 0 ? Utils.getExpressionLine() : ex.line) + " (" + ex.getStackTrace()[0].getMethodName() + ")");
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "optionUndef"

    public static class option_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "option"
    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:516:1: option : o= OPTION ( ws )* e1= expression ( ( ws )* '|' ( ws )* e2= expression )* ( command | se= stringExpression | str= ee )* ( ws )* COMMANDCHAR ENDOPTION ;
    public final commandParser.option_return option() throws RecognitionException {
        commandParser.option_return retval = new commandParser.option_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token o=null;
        Token char_literal133=null;
        Token COMMANDCHAR137=null;
        Token ENDOPTION138=null;
        commandParser.expression_return e1 = null;

        commandParser.expression_return e2 = null;

        commandParser.stringExpression_return se = null;

        commandParser.ee_return str = null;

        commandParser.ws_return ws131 = null;

        commandParser.ws_return ws132 = null;

        commandParser.ws_return ws134 = null;

        commandParser.command_return command135 = null;

        commandParser.ws_return ws136 = null;


        CommonTree o_tree=null;
        CommonTree char_literal133_tree=null;
        CommonTree COMMANDCHAR137_tree=null;
        CommonTree ENDOPTION138_tree=null;

        List<String> optionList = new ArrayList<String>();
        try {
            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:518:3: (o= OPTION ( ws )* e1= expression ( ( ws )* '|' ( ws )* e2= expression )* ( command | se= stringExpression | str= ee )* ( ws )* COMMANDCHAR ENDOPTION )
            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:518:5: o= OPTION ( ws )* e1= expression ( ( ws )* '|' ( ws )* e2= expression )* ( command | se= stringExpression | str= ee )* ( ws )* COMMANDCHAR ENDOPTION
            {
            root_0 = (CommonTree)adaptor.nil();

            o=(Token)match(input,OPTION,FOLLOW_OPTION_in_option1545); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            o_tree = (CommonTree)adaptor.create(o);
            adaptor.addChild(root_0, o_tree);
            }
            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:518:14: ( ws )*
            loop77:
            do {
                int alt77=2;
                int LA77_0 = input.LA(1);

                if ( (LA77_0==WS) ) {
                    int LA77_2 = input.LA(2);

                    if ( (synpred114_command()) ) {
                        alt77=1;
                    }


                }


                switch (alt77) {
            	case 1 :
            	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:0:0: ws
            	    {
            	    pushFollow(FOLLOW_ws_in_option1547);
            	    ws131=ws();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, ws131.getTree());

            	    }
            	    break;

            	default :
            	    break loop77;
                }
            } while (true);

            pushFollow(FOLLOW_expression_in_option1552);
            e1=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, e1.getTree());
            if ( state.backtracking==0 ) {
              optionList.add((e1!=null?input.toString(e1.start,e1.stop):null));
            }
            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:519:5: ( ( ws )* '|' ( ws )* e2= expression )*
            loop80:
            do {
                int alt80=2;
                int LA80_0 = input.LA(1);

                if ( (LA80_0==WS) ) {
                    int LA80_4 = input.LA(2);

                    if ( (synpred117_command()) ) {
                        alt80=1;
                    }


                }
                else if ( (LA80_0==88) ) {
                    int LA80_5 = input.LA(2);

                    if ( (synpred117_command()) ) {
                        alt80=1;
                    }


                }


                switch (alt80) {
            	case 1 :
            	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:519:6: ( ws )* '|' ( ws )* e2= expression
            	    {
            	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:519:6: ( ws )*
            	    loop78:
            	    do {
            	        int alt78=2;
            	        int LA78_0 = input.LA(1);

            	        if ( (LA78_0==WS) ) {
            	            alt78=1;
            	        }


            	        switch (alt78) {
            	    	case 1 :
            	    	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:0:0: ws
            	    	    {
            	    	    pushFollow(FOLLOW_ws_in_option1562);
            	    	    ws132=ws();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, ws132.getTree());

            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop78;
            	        }
            	    } while (true);

            	    char_literal133=(Token)match(input,88,FOLLOW_88_in_option1565); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal133_tree = (CommonTree)adaptor.create(char_literal133);
            	    adaptor.addChild(root_0, char_literal133_tree);
            	    }
            	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:519:14: ( ws )*
            	    loop79:
            	    do {
            	        int alt79=2;
            	        int LA79_0 = input.LA(1);

            	        if ( (LA79_0==WS) ) {
            	            int LA79_2 = input.LA(2);

            	            if ( (synpred116_command()) ) {
            	                alt79=1;
            	            }


            	        }


            	        switch (alt79) {
            	    	case 1 :
            	    	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:0:0: ws
            	    	    {
            	    	    pushFollow(FOLLOW_ws_in_option1567);
            	    	    ws134=ws();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, ws134.getTree());

            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop79;
            	        }
            	    } while (true);

            	    pushFollow(FOLLOW_expression_in_option1572);
            	    e2=expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, e2.getTree());
            	    if ( state.backtracking==0 ) {
            	      optionList.add((e2!=null?input.toString(e2.start,e2.stop):null));
            	    }

            	    }
            	    break;

            	default :
            	    break loop80;
                }
            } while (true);

            if ( state.backtracking==0 ) {

                      //Option code
                      if (Utils.canWrite()){
                          new OptionCommandPart(optionList, o.getLine()).execute();
                      }
                
            }
            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:528:5: ( command | se= stringExpression | str= ee )*
            loop81:
            do {
                int alt81=4;
                switch ( input.LA(1) ) {
                case WS:
                    {
                    int LA81_1 = input.LA(2);

                    if ( (synpred120_command()) ) {
                        alt81=3;
                    }


                    }
                    break;
                case COMMANDCHAR:
                    {
                    int LA81_2 = input.LA(2);

                    if ( ((LA81_2>=IDENT && LA81_2<=EXTENDEDADAPTSAMELEVEL)||(LA81_2>=ADAPTCOPY && LA81_2<=IF)||(LA81_2>=IFDEF && LA81_2<=SELECT)||LA81_2==INSERT||(LA81_2>=INSERTBEFORE && LA81_2<=EXTENDEDBREAK)||(LA81_2>=BREAK && LA81_2<=WHILE)||LA81_2==SETLOOP||(LA81_2>=MESSAGE && LA81_2<=EXTENDEDMESSAGE)||(LA81_2>=MESSAGEIF && LA81_2<=TEXT)) ) {
                        alt81=1;
                    }


                    }
                    break;
                case STRING:
                    {
                    int LA81_3 = input.LA(2);

                    if ( (synpred119_command()) ) {
                        alt81=2;
                    }
                    else if ( (synpred120_command()) ) {
                        alt81=3;
                    }


                    }
                    break;
                case EPRESSIONCHAR:
                    {
                    alt81=2;
                    }
                    break;
                case NEGATION:
                case DEFINED:
                case ARTVARCHAR:
                case NL:
                case IDENT:
                case SIMPLEADAPT:
                case ADAPTSAMELEVEL:
                case EXTENDEDADAPT:
                case EXTENDEDADAPTSAMELEVEL:
                case ENDADAPT:
                case ADAPTCOPY:
                case SET:
                case SETDEFER:
                case OUTPUT:
                case OUTDIR:
                case OUTFILE:
                case IF:
                case ENDIF:
                case ELIF:
                case ELSE:
                case IFDEF:
                case IFNDEF:
                case REMOVE:
                case SELECT:
                case ENDSELECT:
                case OPTIONUNDEFINED:
                case ENDOPTION:
                case OPTION:
                case OTHERWISE:
                case ENDOTHERWISE:
                case INSERT:
                case ENDINSERT:
                case INSERTBEFORE:
                case INSERTAFTER:
                case EXTENDEDBREAK:
                case ENDBREAK:
                case BREAK:
                case WHILE:
                case ENDWHILE:
                case SETLOOP:
                case ENDSETLOOP:
                case VARS:
                case ENDVARS:
                case VAR:
                case ITER:
                case MESSAGE:
                case EXTENDEDMESSAGE:
                case ENDMESSAGE:
                case MESSAGEIF:
                case EXTENDEDMESSAGEIF:
                case MESSAGEDEBUG:
                case EXTENDEDMESSAGEDEBUG:
                case TEXT:
                case ENDTEXT:
                case REFERENCECHAR:
                case INTEGER:
                case ISLAST:
                case ISFIRST:
                case SIZE:
                case ISNUMERIC:
                case ULCAP:
                case LLCAP:
                case DEBUGMODE:
                case CURRENTFILE:
                case DEFAULTOUTPUT:
                case COMMENTCHAR:
                case QUOTATIONMARK:
                case STRINGNOEND:
                case NOTNEWLINE:
                case COMMENT:
                case ESCCOMMENT:
                case DIGIT:
                case SPECCHAR:
                case LETTER:
                case DOT:
                case ANYCHAR:
                case 84:
                case 85:
                case 86:
                case 87:
                case 88:
                case 89:
                case 90:
                case 91:
                case 92:
                case 93:
                case 94:
                case 95:
                case 96:
                case 97:
                case 98:
                case 99:
                case 100:
                case 101:
                case 102:
                case 103:
                case 104:
                case 105:
                case 106:
                case 107:
                case 108:
                case 109:
                    {
                    alt81=3;
                    }
                    break;

                }

                switch (alt81) {
            	case 1 :
            	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:528:6: command
            	    {
            	    pushFollow(FOLLOW_command_in_option1600);
            	    command135=command();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, command135.getTree());

            	    }
            	    break;
            	case 2 :
            	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:529:10: se= stringExpression
            	    {
            	    pushFollow(FOLLOW_stringExpression_in_option1613);
            	    se=stringExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, se.getTree());
            	    if ( state.backtracking==0 ) {
            	        writeExpression((se!=null?input.toString(se.start,se.stop):null), se.tree.getLine()); 
            	    }

            	    }
            	    break;
            	case 3 :
            	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:530:10: str= ee
            	    {
            	    pushFollow(FOLLOW_ee_in_option1628);
            	    str=ee();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, str.getTree());
            	    if ( state.backtracking==0 ) {
            	       write((str!=null?input.toString(str.start,str.stop):null));
            	    }

            	    }
            	    break;

            	default :
            	    break loop81;
                }
            } while (true);

            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:531:8: ( ws )*
            loop82:
            do {
                int alt82=2;
                int LA82_0 = input.LA(1);

                if ( (LA82_0==WS) ) {
                    alt82=1;
                }


                switch (alt82) {
            	case 1 :
            	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:0:0: ws
            	    {
            	    pushFollow(FOLLOW_ws_in_option1640);
            	    ws136=ws();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, ws136.getTree());

            	    }
            	    break;

            	default :
            	    break loop82;
                }
            } while (true);

            COMMANDCHAR137=(Token)match(input,COMMANDCHAR,FOLLOW_COMMANDCHAR_in_option1652); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            COMMANDCHAR137_tree = (CommonTree)adaptor.create(COMMANDCHAR137);
            adaptor.addChild(root_0, COMMANDCHAR137_tree);
            }
            ENDOPTION138=(Token)match(input,ENDOPTION,FOLLOW_ENDOPTION_in_option1654); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ENDOPTION138_tree = (CommonTree)adaptor.create(ENDOPTION138);
            adaptor.addChild(root_0, ENDOPTION138_tree);
            }
            if ( state.backtracking==0 ) {
              Utils.removeWriteblocker("option");
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException ex) {
                  throw new ARTSyntaxException("Syntax error in File: " + Utils.getCurrentFile() + " line: " + (ex.line == 0 ? Utils.getExpressionLine() : ex.line) + " (" + ex.getStackTrace()[0].getMethodName() + ")");
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "option"

    public static class otherwise_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "otherwise"
    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:536:1: otherwise : OTHERWISE ( command | se= stringExpression | str= ee )* ( ws )* COMMANDCHAR ENDOTHERWISE ;
    public final commandParser.otherwise_return otherwise() throws RecognitionException {
        commandParser.otherwise_return retval = new commandParser.otherwise_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token OTHERWISE139=null;
        Token COMMANDCHAR142=null;
        Token ENDOTHERWISE143=null;
        commandParser.stringExpression_return se = null;

        commandParser.ee_return str = null;

        commandParser.command_return command140 = null;

        commandParser.ws_return ws141 = null;


        CommonTree OTHERWISE139_tree=null;
        CommonTree COMMANDCHAR142_tree=null;
        CommonTree ENDOTHERWISE143_tree=null;

        int numberofPops = 0;
        try {
            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:538:3: ( OTHERWISE ( command | se= stringExpression | str= ee )* ( ws )* COMMANDCHAR ENDOTHERWISE )
            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:538:5: OTHERWISE ( command | se= stringExpression | str= ee )* ( ws )* COMMANDCHAR ENDOTHERWISE
            {
            root_0 = (CommonTree)adaptor.nil();

            OTHERWISE139=(Token)match(input,OTHERWISE,FOLLOW_OTHERWISE_in_otherwise1675); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            OTHERWISE139_tree = (CommonTree)adaptor.create(OTHERWISE139);
            adaptor.addChild(root_0, OTHERWISE139_tree);
            }
            if ( state.backtracking==0 ) {

                       //the while and the insert are containing writeblockers, because they will insert the content after
                       //parsing the command's body. This can stop the otherwise from emitting while or insert contnet inside
                       //it's body. Here I pop insert and while writeblockers, and put them back after processing the otherwise
                      
                       //Just in the while commands happen

                        while ((!Utils.getWriteblockStack().isEmpty()) && Utils.getWriteblockStack().peek().equals("while")) {
                          Utils.removeWriteblocker("while");
                          numberofPops++;
                        }
                            
                       if (SelectInfo.undefined() || !(Utils.canWrite()) || SelectInfo.isSkipOtherwise()){
                           Utils.addWriteblocker("option");
                       }
                     
            }
            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:558:5: ( command | se= stringExpression | str= ee )*
            loop83:
            do {
                int alt83=4;
                switch ( input.LA(1) ) {
                case WS:
                    {
                    int LA83_1 = input.LA(2);

                    if ( (synpred124_command()) ) {
                        alt83=3;
                    }


                    }
                    break;
                case COMMANDCHAR:
                    {
                    int LA83_2 = input.LA(2);

                    if ( ((LA83_2>=IDENT && LA83_2<=EXTENDEDADAPTSAMELEVEL)||(LA83_2>=ADAPTCOPY && LA83_2<=IF)||(LA83_2>=IFDEF && LA83_2<=SELECT)||LA83_2==INSERT||(LA83_2>=INSERTBEFORE && LA83_2<=EXTENDEDBREAK)||(LA83_2>=BREAK && LA83_2<=WHILE)||LA83_2==SETLOOP||(LA83_2>=MESSAGE && LA83_2<=EXTENDEDMESSAGE)||(LA83_2>=MESSAGEIF && LA83_2<=TEXT)) ) {
                        alt83=1;
                    }


                    }
                    break;
                case STRING:
                    {
                    int LA83_3 = input.LA(2);

                    if ( (synpred123_command()) ) {
                        alt83=2;
                    }
                    else if ( (synpred124_command()) ) {
                        alt83=3;
                    }


                    }
                    break;
                case EPRESSIONCHAR:
                    {
                    alt83=2;
                    }
                    break;
                case NEGATION:
                case DEFINED:
                case ARTVARCHAR:
                case NL:
                case IDENT:
                case SIMPLEADAPT:
                case ADAPTSAMELEVEL:
                case EXTENDEDADAPT:
                case EXTENDEDADAPTSAMELEVEL:
                case ENDADAPT:
                case ADAPTCOPY:
                case SET:
                case SETDEFER:
                case OUTPUT:
                case OUTDIR:
                case OUTFILE:
                case IF:
                case ENDIF:
                case ELIF:
                case ELSE:
                case IFDEF:
                case IFNDEF:
                case REMOVE:
                case SELECT:
                case ENDSELECT:
                case OPTIONUNDEFINED:
                case ENDOPTION:
                case OPTION:
                case OTHERWISE:
                case ENDOTHERWISE:
                case INSERT:
                case ENDINSERT:
                case INSERTBEFORE:
                case INSERTAFTER:
                case EXTENDEDBREAK:
                case ENDBREAK:
                case BREAK:
                case WHILE:
                case ENDWHILE:
                case SETLOOP:
                case ENDSETLOOP:
                case VARS:
                case ENDVARS:
                case VAR:
                case ITER:
                case MESSAGE:
                case EXTENDEDMESSAGE:
                case ENDMESSAGE:
                case MESSAGEIF:
                case EXTENDEDMESSAGEIF:
                case MESSAGEDEBUG:
                case EXTENDEDMESSAGEDEBUG:
                case TEXT:
                case ENDTEXT:
                case REFERENCECHAR:
                case INTEGER:
                case ISLAST:
                case ISFIRST:
                case SIZE:
                case ISNUMERIC:
                case ULCAP:
                case LLCAP:
                case DEBUGMODE:
                case CURRENTFILE:
                case DEFAULTOUTPUT:
                case COMMENTCHAR:
                case QUOTATIONMARK:
                case STRINGNOEND:
                case NOTNEWLINE:
                case COMMENT:
                case ESCCOMMENT:
                case DIGIT:
                case SPECCHAR:
                case LETTER:
                case DOT:
                case ANYCHAR:
                case 84:
                case 85:
                case 86:
                case 87:
                case 88:
                case 89:
                case 90:
                case 91:
                case 92:
                case 93:
                case 94:
                case 95:
                case 96:
                case 97:
                case 98:
                case 99:
                case 100:
                case 101:
                case 102:
                case 103:
                case 104:
                case 105:
                case 106:
                case 107:
                case 108:
                case 109:
                    {
                    alt83=3;
                    }
                    break;

                }

                switch (alt83) {
            	case 1 :
            	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:558:6: command
            	    {
            	    pushFollow(FOLLOW_command_in_otherwise1703);
            	    command140=command();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, command140.getTree());

            	    }
            	    break;
            	case 2 :
            	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:559:10: se= stringExpression
            	    {
            	    pushFollow(FOLLOW_stringExpression_in_otherwise1716);
            	    se=stringExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, se.getTree());
            	    if ( state.backtracking==0 ) {
            	        writeExpression((se!=null?input.toString(se.start,se.stop):null), se.tree.getLine()); 
            	    }

            	    }
            	    break;
            	case 3 :
            	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:560:10: str= ee
            	    {
            	    pushFollow(FOLLOW_ee_in_otherwise1731);
            	    str=ee();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, str.getTree());
            	    if ( state.backtracking==0 ) {
            	       write((str!=null?input.toString(str.start,str.stop):null)); 
            	    }

            	    }
            	    break;

            	default :
            	    break loop83;
                }
            } while (true);

            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:561:8: ( ws )*
            loop84:
            do {
                int alt84=2;
                int LA84_0 = input.LA(1);

                if ( (LA84_0==WS) ) {
                    alt84=1;
                }


                switch (alt84) {
            	case 1 :
            	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:0:0: ws
            	    {
            	    pushFollow(FOLLOW_ws_in_otherwise1742);
            	    ws141=ws();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, ws141.getTree());

            	    }
            	    break;

            	default :
            	    break loop84;
                }
            } while (true);

            COMMANDCHAR142=(Token)match(input,COMMANDCHAR,FOLLOW_COMMANDCHAR_in_otherwise1754); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            COMMANDCHAR142_tree = (CommonTree)adaptor.create(COMMANDCHAR142);
            adaptor.addChild(root_0, COMMANDCHAR142_tree);
            }
            ENDOTHERWISE143=(Token)match(input,ENDOTHERWISE,FOLLOW_ENDOTHERWISE_in_otherwise1756); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ENDOTHERWISE143_tree = (CommonTree)adaptor.create(ENDOTHERWISE143);
            adaptor.addChild(root_0, ENDOTHERWISE143_tree);
            }
            if ( state.backtracking==0 ) {

                    Utils.removeWriteblocker("option");
                    //putting back the writeBlockers
                    for (int i = 0; i < numberofPops; i++) {
                      Utils.addWriteblocker("while");
                    }
                  
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException ex) {
                  throw new ARTSyntaxException("Syntax error in File: " + Utils.getCurrentFile() + " line: " + (ex.line == 0 ? Utils.getExpressionLine() : ex.line) + " (" + ex.getStackTrace()[0].getMethodName() + ")");
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "otherwise"

    public static class insertCommand_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "insertCommand"
    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:573:1: insertCommand : ( INSERT ( ws )* e= expression ( NL )? (c= command (w1= ws )* | cc1= COMMANDCHAR v= varDesc (w2= ws )* | cc2= COMMANDCHAR i= iter (w3= ws )* | se= stringExpression (w4= ws )* | str= ee (w5= ws )* )* ( ws )* COMMANDCHAR ENDINSERT ) ;
    public final commandParser.insertCommand_return insertCommand() throws RecognitionException {
        commandParser.insertCommand_return retval = new commandParser.insertCommand_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token cc1=null;
        Token cc2=null;
        Token INSERT144=null;
        Token NL146=null;
        Token COMMANDCHAR148=null;
        Token ENDINSERT149=null;
        commandParser.expression_return e = null;

        commandParser.command_return c = null;

        commandParser.ws_return w1 = null;

        commandParser.varDesc_return v = null;

        commandParser.ws_return w2 = null;

        commandParser.iter_return i = null;

        commandParser.ws_return w3 = null;

        commandParser.stringExpression_return se = null;

        commandParser.ws_return w4 = null;

        commandParser.ee_return str = null;

        commandParser.ws_return w5 = null;

        commandParser.ws_return ws145 = null;

        commandParser.ws_return ws147 = null;


        CommonTree cc1_tree=null;
        CommonTree cc2_tree=null;
        CommonTree INSERT144_tree=null;
        CommonTree NL146_tree=null;
        CommonTree COMMANDCHAR148_tree=null;
        CommonTree ENDINSERT149_tree=null;

         InsertType type = InsertType.INTO; StringBuilder sb = new StringBuilder(); int insertLineNo = lineNo;
        try {
            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:575:3: ( ( INSERT ( ws )* e= expression ( NL )? (c= command (w1= ws )* | cc1= COMMANDCHAR v= varDesc (w2= ws )* | cc2= COMMANDCHAR i= iter (w3= ws )* | se= stringExpression (w4= ws )* | str= ee (w5= ws )* )* ( ws )* COMMANDCHAR ENDINSERT ) )
            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:575:5: ( INSERT ( ws )* e= expression ( NL )? (c= command (w1= ws )* | cc1= COMMANDCHAR v= varDesc (w2= ws )* | cc2= COMMANDCHAR i= iter (w3= ws )* | se= stringExpression (w4= ws )* | str= ee (w5= ws )* )* ( ws )* COMMANDCHAR ENDINSERT )
            {
            root_0 = (CommonTree)adaptor.nil();

            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:575:5: ( INSERT ( ws )* e= expression ( NL )? (c= command (w1= ws )* | cc1= COMMANDCHAR v= varDesc (w2= ws )* | cc2= COMMANDCHAR i= iter (w3= ws )* | se= stringExpression (w4= ws )* | str= ee (w5= ws )* )* ( ws )* COMMANDCHAR ENDINSERT )
            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:575:6: INSERT ( ws )* e= expression ( NL )? (c= command (w1= ws )* | cc1= COMMANDCHAR v= varDesc (w2= ws )* | cc2= COMMANDCHAR i= iter (w3= ws )* | se= stringExpression (w4= ws )* | str= ee (w5= ws )* )* ( ws )* COMMANDCHAR ENDINSERT
            {
            INSERT144=(Token)match(input,INSERT,FOLLOW_INSERT_in_insertCommand1783); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            INSERT144_tree = (CommonTree)adaptor.create(INSERT144);
            adaptor.addChild(root_0, INSERT144_tree);
            }
            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:575:13: ( ws )*
            loop85:
            do {
                int alt85=2;
                int LA85_0 = input.LA(1);

                if ( (LA85_0==WS) ) {
                    int LA85_2 = input.LA(2);

                    if ( (synpred126_command()) ) {
                        alt85=1;
                    }


                }


                switch (alt85) {
            	case 1 :
            	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:0:0: ws
            	    {
            	    pushFollow(FOLLOW_ws_in_insertCommand1785);
            	    ws145=ws();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, ws145.getTree());

            	    }
            	    break;

            	default :
            	    break loop85;
                }
            } while (true);

            pushFollow(FOLLOW_expression_in_insertCommand1790);
            e=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, e.getTree());
            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:575:30: ( NL )?
            int alt86=2;
            int LA86_0 = input.LA(1);

            if ( (LA86_0==NL) ) {
                int LA86_1 = input.LA(2);

                if ( (synpred127_command()) ) {
                    alt86=1;
                }
            }
            switch (alt86) {
                case 1 :
                    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:0:0: NL
                    {
                    NL146=(Token)match(input,NL,FOLLOW_NL_in_insertCommand1792); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NL146_tree = (CommonTree)adaptor.create(NL146);
                    adaptor.addChild(root_0, NL146_tree);
                    }

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
               Utils.addWriteblocker("insert"); 
            }
            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:579:5: (c= command (w1= ws )* | cc1= COMMANDCHAR v= varDesc (w2= ws )* | cc2= COMMANDCHAR i= iter (w3= ws )* | se= stringExpression (w4= ws )* | str= ee (w5= ws )* )*
            loop92:
            do {
                int alt92=6;
                alt92 = dfa92.predict(input);
                switch (alt92) {
            	case 1 :
            	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:579:6: c= command (w1= ws )*
            	    {
            	    pushFollow(FOLLOW_command_in_insertCommand1812);
            	    c=command();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, c.getTree());
            	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:579:18: (w1= ws )*
            	    loop87:
            	    do {
            	        int alt87=2;
            	        int LA87_0 = input.LA(1);

            	        if ( (LA87_0==WS) ) {
            	            int LA87_1 = input.LA(2);

            	            if ( (synpred128_command()) ) {
            	                alt87=1;
            	            }


            	        }


            	        switch (alt87) {
            	    	case 1 :
            	    	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:0:0: w1= ws
            	    	    {
            	    	    pushFollow(FOLLOW_ws_in_insertCommand1816);
            	    	    w1=ws();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, w1.getTree());

            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop87;
            	        }
            	    } while (true);

            	    if ( state.backtracking==0 ) {
            	       append(sb, (c!=null?input.toString(c.start,c.stop):null)); append(sb, (w1!=null?input.toString(w1.start,w1.stop):null)); 
            	    }

            	    }
            	    break;
            	case 2 :
            	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:580:10: cc1= COMMANDCHAR v= varDesc (w2= ws )*
            	    {
            	    cc1=(Token)match(input,COMMANDCHAR,FOLLOW_COMMANDCHAR_in_insertCommand1832); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    cc1_tree = (CommonTree)adaptor.create(cc1);
            	    adaptor.addChild(root_0, cc1_tree);
            	    }
            	    pushFollow(FOLLOW_varDesc_in_insertCommand1836);
            	    v=varDesc();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, v.getTree());
            	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:580:38: (w2= ws )*
            	    loop88:
            	    do {
            	        int alt88=2;
            	        int LA88_0 = input.LA(1);

            	        if ( (LA88_0==WS) ) {
            	            int LA88_1 = input.LA(2);

            	            if ( (synpred130_command()) ) {
            	                alt88=1;
            	            }


            	        }


            	        switch (alt88) {
            	    	case 1 :
            	    	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:0:0: w2= ws
            	    	    {
            	    	    pushFollow(FOLLOW_ws_in_insertCommand1840);
            	    	    w2=ws();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, w2.getTree());

            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop88;
            	        }
            	    } while (true);

            	    if ( state.backtracking==0 ) {
            	       append(sb, (cc1!=null?cc1.getText():null)); append(sb, (v!=null?input.toString(v.start,v.stop):null)); append(sb, (w2!=null?input.toString(w2.start,w2.stop):null)); 
            	    }

            	    }
            	    break;
            	case 3 :
            	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:581:10: cc2= COMMANDCHAR i= iter (w3= ws )*
            	    {
            	    cc2=(Token)match(input,COMMANDCHAR,FOLLOW_COMMANDCHAR_in_insertCommand1856); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    cc2_tree = (CommonTree)adaptor.create(cc2);
            	    adaptor.addChild(root_0, cc2_tree);
            	    }
            	    pushFollow(FOLLOW_iter_in_insertCommand1860);
            	    i=iter();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, i.getTree());
            	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:581:35: (w3= ws )*
            	    loop89:
            	    do {
            	        int alt89=2;
            	        int LA89_0 = input.LA(1);

            	        if ( (LA89_0==WS) ) {
            	            int LA89_1 = input.LA(2);

            	            if ( (synpred132_command()) ) {
            	                alt89=1;
            	            }


            	        }


            	        switch (alt89) {
            	    	case 1 :
            	    	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:0:0: w3= ws
            	    	    {
            	    	    pushFollow(FOLLOW_ws_in_insertCommand1864);
            	    	    w3=ws();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, w3.getTree());

            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop89;
            	        }
            	    } while (true);

            	    if ( state.backtracking==0 ) {
            	       append(sb, (cc2!=null?cc2.getText():null)); append(sb, (i!=null?input.toString(i.start,i.stop):null)); append(sb, (w3!=null?input.toString(w3.start,w3.stop):null)); 
            	    }

            	    }
            	    break;
            	case 4 :
            	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:582:10: se= stringExpression (w4= ws )*
            	    {
            	    pushFollow(FOLLOW_stringExpression_in_insertCommand1880);
            	    se=stringExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, se.getTree());
            	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:582:32: (w4= ws )*
            	    loop90:
            	    do {
            	        int alt90=2;
            	        int LA90_0 = input.LA(1);

            	        if ( (LA90_0==WS) ) {
            	            int LA90_1 = input.LA(2);

            	            if ( (synpred134_command()) ) {
            	                alt90=1;
            	            }


            	        }


            	        switch (alt90) {
            	    	case 1 :
            	    	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:0:0: w4= ws
            	    	    {
            	    	    pushFollow(FOLLOW_ws_in_insertCommand1884);
            	    	    w4=ws();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, w4.getTree());

            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop90;
            	        }
            	    } while (true);

            	    if ( state.backtracking==0 ) {
            	       append(sb, (se!=null?input.toString(se.start,se.stop):null)); append(sb, (w4!=null?input.toString(w4.start,w4.stop):null));
            	    }

            	    }
            	    break;
            	case 5 :
            	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:583:10: str= ee (w5= ws )*
            	    {
            	    pushFollow(FOLLOW_ee_in_insertCommand1901);
            	    str=ee();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, str.getTree());
            	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:583:19: (w5= ws )*
            	    loop91:
            	    do {
            	        int alt91=2;
            	        int LA91_0 = input.LA(1);

            	        if ( (LA91_0==WS) ) {
            	            int LA91_1 = input.LA(2);

            	            if ( (synpred136_command()) ) {
            	                alt91=1;
            	            }


            	        }


            	        switch (alt91) {
            	    	case 1 :
            	    	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:0:0: w5= ws
            	    	    {
            	    	    pushFollow(FOLLOW_ws_in_insertCommand1905);
            	    	    w5=ws();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, w5.getTree());

            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop91;
            	        }
            	    } while (true);

            	    if ( state.backtracking==0 ) {
            	       append(sb, (str!=null?input.toString(str.start,str.stop):null)); append(sb, (w5!=null?input.toString(w5.start,w5.stop):null)); 
            	    }

            	    }
            	    break;

            	default :
            	    break loop92;
                }
            } while (true);

            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:584:8: ( ws )*
            loop93:
            do {
                int alt93=2;
                int LA93_0 = input.LA(1);

                if ( (LA93_0==WS) ) {
                    alt93=1;
                }


                switch (alt93) {
            	case 1 :
            	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:0:0: ws
            	    {
            	    pushFollow(FOLLOW_ws_in_insertCommand1917);
            	    ws147=ws();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, ws147.getTree());

            	    }
            	    break;

            	default :
            	    break loop93;
                }
            } while (true);

            COMMANDCHAR148=(Token)match(input,COMMANDCHAR,FOLLOW_COMMANDCHAR_in_insertCommand1930); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            COMMANDCHAR148_tree = (CommonTree)adaptor.create(COMMANDCHAR148);
            adaptor.addChild(root_0, COMMANDCHAR148_tree);
            }
            ENDINSERT149=(Token)match(input,ENDINSERT,FOLLOW_ENDINSERT_in_insertCommand1932); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ENDINSERT149_tree = (CommonTree)adaptor.create(ENDINSERT149);
            adaptor.addChild(root_0, ENDINSERT149_tree);
            }

            }

            if ( state.backtracking==0 ) {
               Utils.removeWriteblocker("insert"); 
            }
            if ( state.backtracking==0 ) {

                        //Insert command
                        if (Utils.canWrite()){
                            new InsertCommand((e!=null?input.toString(e.start,e.stop):null), type, sb.toString(), insertLineNo).execute();
                        }
                   
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException ex) {
                  throw new ARTSyntaxException("Syntax error in File: " + Utils.getCurrentFile() + " line: " + (ex.line == 0 ? Utils.getExpressionLine() : ex.line) + " (" + ex.getStackTrace()[0].getMethodName() + ")");
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "insertCommand"

    public static class insertBefCommand_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "insertBefCommand"
    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:599:1: insertBefCommand : ( INSERTBEFORE ( ws )* e= expression (c= command (w1= ws )* | se= stringExpression (w2= ws )* | str= ee (w3= ws )* )* ( ws )* COMMANDCHAR ENDINSERT ) ;
    public final commandParser.insertBefCommand_return insertBefCommand() throws RecognitionException {
        commandParser.insertBefCommand_return retval = new commandParser.insertBefCommand_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token INSERTBEFORE150=null;
        Token COMMANDCHAR153=null;
        Token ENDINSERT154=null;
        commandParser.expression_return e = null;

        commandParser.command_return c = null;

        commandParser.ws_return w1 = null;

        commandParser.stringExpression_return se = null;

        commandParser.ws_return w2 = null;

        commandParser.ee_return str = null;

        commandParser.ws_return w3 = null;

        commandParser.ws_return ws151 = null;

        commandParser.ws_return ws152 = null;


        CommonTree INSERTBEFORE150_tree=null;
        CommonTree COMMANDCHAR153_tree=null;
        CommonTree ENDINSERT154_tree=null;

         InsertType type = InsertType.INTO; StringBuilder sb = new StringBuilder(); int insertLineNo = lineNo;
        try {
            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:601:3: ( ( INSERTBEFORE ( ws )* e= expression (c= command (w1= ws )* | se= stringExpression (w2= ws )* | str= ee (w3= ws )* )* ( ws )* COMMANDCHAR ENDINSERT ) )
            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:601:5: ( INSERTBEFORE ( ws )* e= expression (c= command (w1= ws )* | se= stringExpression (w2= ws )* | str= ee (w3= ws )* )* ( ws )* COMMANDCHAR ENDINSERT )
            {
            root_0 = (CommonTree)adaptor.nil();

            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:601:5: ( INSERTBEFORE ( ws )* e= expression (c= command (w1= ws )* | se= stringExpression (w2= ws )* | str= ee (w3= ws )* )* ( ws )* COMMANDCHAR ENDINSERT )
            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:601:7: INSERTBEFORE ( ws )* e= expression (c= command (w1= ws )* | se= stringExpression (w2= ws )* | str= ee (w3= ws )* )* ( ws )* COMMANDCHAR ENDINSERT
            {
            INSERTBEFORE150=(Token)match(input,INSERTBEFORE,FOLLOW_INSERTBEFORE_in_insertBefCommand1979); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            INSERTBEFORE150_tree = (CommonTree)adaptor.create(INSERTBEFORE150);
            adaptor.addChild(root_0, INSERTBEFORE150_tree);
            }
            if ( state.backtracking==0 ) {
              type = InsertType.BEFORE;
            }
            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:601:48: ( ws )*
            loop94:
            do {
                int alt94=2;
                int LA94_0 = input.LA(1);

                if ( (LA94_0==WS) ) {
                    int LA94_2 = input.LA(2);

                    if ( (synpred139_command()) ) {
                        alt94=1;
                    }


                }


                switch (alt94) {
            	case 1 :
            	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:0:0: ws
            	    {
            	    pushFollow(FOLLOW_ws_in_insertBefCommand1983);
            	    ws151=ws();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, ws151.getTree());

            	    }
            	    break;

            	default :
            	    break loop94;
                }
            } while (true);

            pushFollow(FOLLOW_expression_in_insertBefCommand1988);
            e=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, e.getTree());
            if ( state.backtracking==0 ) {
               Utils.addWriteblocker("insert"); 
            }
            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:605:5: (c= command (w1= ws )* | se= stringExpression (w2= ws )* | str= ee (w3= ws )* )*
            loop98:
            do {
                int alt98=4;
                switch ( input.LA(1) ) {
                case WS:
                    {
                    int LA98_1 = input.LA(2);

                    if ( (synpred145_command()) ) {
                        alt98=3;
                    }


                    }
                    break;
                case COMMANDCHAR:
                    {
                    int LA98_2 = input.LA(2);

                    if ( ((LA98_2>=IDENT && LA98_2<=EXTENDEDADAPTSAMELEVEL)||(LA98_2>=ADAPTCOPY && LA98_2<=IF)||(LA98_2>=IFDEF && LA98_2<=SELECT)||LA98_2==INSERT||(LA98_2>=INSERTBEFORE && LA98_2<=EXTENDEDBREAK)||(LA98_2>=BREAK && LA98_2<=WHILE)||LA98_2==SETLOOP||(LA98_2>=MESSAGE && LA98_2<=EXTENDEDMESSAGE)||(LA98_2>=MESSAGEIF && LA98_2<=TEXT)) ) {
                        alt98=1;
                    }


                    }
                    break;
                case STRING:
                    {
                    int LA98_3 = input.LA(2);

                    if ( (synpred143_command()) ) {
                        alt98=2;
                    }
                    else if ( (synpred145_command()) ) {
                        alt98=3;
                    }


                    }
                    break;
                case EPRESSIONCHAR:
                    {
                    alt98=2;
                    }
                    break;
                case NEGATION:
                case DEFINED:
                case ARTVARCHAR:
                case NL:
                case IDENT:
                case SIMPLEADAPT:
                case ADAPTSAMELEVEL:
                case EXTENDEDADAPT:
                case EXTENDEDADAPTSAMELEVEL:
                case ENDADAPT:
                case ADAPTCOPY:
                case SET:
                case SETDEFER:
                case OUTPUT:
                case OUTDIR:
                case OUTFILE:
                case IF:
                case ENDIF:
                case ELIF:
                case ELSE:
                case IFDEF:
                case IFNDEF:
                case REMOVE:
                case SELECT:
                case ENDSELECT:
                case OPTIONUNDEFINED:
                case ENDOPTION:
                case OPTION:
                case OTHERWISE:
                case ENDOTHERWISE:
                case INSERT:
                case ENDINSERT:
                case INSERTBEFORE:
                case INSERTAFTER:
                case EXTENDEDBREAK:
                case ENDBREAK:
                case BREAK:
                case WHILE:
                case ENDWHILE:
                case SETLOOP:
                case ENDSETLOOP:
                case VARS:
                case ENDVARS:
                case VAR:
                case ITER:
                case MESSAGE:
                case EXTENDEDMESSAGE:
                case ENDMESSAGE:
                case MESSAGEIF:
                case EXTENDEDMESSAGEIF:
                case MESSAGEDEBUG:
                case EXTENDEDMESSAGEDEBUG:
                case TEXT:
                case ENDTEXT:
                case REFERENCECHAR:
                case INTEGER:
                case ISLAST:
                case ISFIRST:
                case SIZE:
                case ISNUMERIC:
                case ULCAP:
                case LLCAP:
                case DEBUGMODE:
                case CURRENTFILE:
                case DEFAULTOUTPUT:
                case COMMENTCHAR:
                case QUOTATIONMARK:
                case STRINGNOEND:
                case NOTNEWLINE:
                case COMMENT:
                case ESCCOMMENT:
                case DIGIT:
                case SPECCHAR:
                case LETTER:
                case DOT:
                case ANYCHAR:
                case 84:
                case 85:
                case 86:
                case 87:
                case 88:
                case 89:
                case 90:
                case 91:
                case 92:
                case 93:
                case 94:
                case 95:
                case 96:
                case 97:
                case 98:
                case 99:
                case 100:
                case 101:
                case 102:
                case 103:
                case 104:
                case 105:
                case 106:
                case 107:
                case 108:
                case 109:
                    {
                    alt98=3;
                    }
                    break;

                }

                switch (alt98) {
            	case 1 :
            	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:605:6: c= command (w1= ws )*
            	    {
            	    pushFollow(FOLLOW_command_in_insertBefCommand2007);
            	    c=command();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, c.getTree());
            	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:605:18: (w1= ws )*
            	    loop95:
            	    do {
            	        int alt95=2;
            	        int LA95_0 = input.LA(1);

            	        if ( (LA95_0==WS) ) {
            	            int LA95_1 = input.LA(2);

            	            if ( (synpred140_command()) ) {
            	                alt95=1;
            	            }


            	        }


            	        switch (alt95) {
            	    	case 1 :
            	    	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:0:0: w1= ws
            	    	    {
            	    	    pushFollow(FOLLOW_ws_in_insertBefCommand2011);
            	    	    w1=ws();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, w1.getTree());

            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop95;
            	        }
            	    } while (true);

            	    if ( state.backtracking==0 ) {
            	       append(sb, (c!=null?input.toString(c.start,c.stop):null)); append(sb, (w1!=null?input.toString(w1.start,w1.stop):null)); 
            	    }

            	    }
            	    break;
            	case 2 :
            	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:606:10: se= stringExpression (w2= ws )*
            	    {
            	    pushFollow(FOLLOW_stringExpression_in_insertBefCommand2027);
            	    se=stringExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, se.getTree());
            	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:606:32: (w2= ws )*
            	    loop96:
            	    do {
            	        int alt96=2;
            	        int LA96_0 = input.LA(1);

            	        if ( (LA96_0==WS) ) {
            	            int LA96_1 = input.LA(2);

            	            if ( (synpred142_command()) ) {
            	                alt96=1;
            	            }


            	        }


            	        switch (alt96) {
            	    	case 1 :
            	    	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:0:0: w2= ws
            	    	    {
            	    	    pushFollow(FOLLOW_ws_in_insertBefCommand2031);
            	    	    w2=ws();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, w2.getTree());

            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop96;
            	        }
            	    } while (true);

            	    if ( state.backtracking==0 ) {
            	       append(sb, (se!=null?input.toString(se.start,se.stop):null)); append(sb, (w2!=null?input.toString(w2.start,w2.stop):null));
            	    }

            	    }
            	    break;
            	case 3 :
            	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:607:10: str= ee (w3= ws )*
            	    {
            	    pushFollow(FOLLOW_ee_in_insertBefCommand2048);
            	    str=ee();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, str.getTree());
            	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:607:19: (w3= ws )*
            	    loop97:
            	    do {
            	        int alt97=2;
            	        int LA97_0 = input.LA(1);

            	        if ( (LA97_0==WS) ) {
            	            int LA97_1 = input.LA(2);

            	            if ( (synpred144_command()) ) {
            	                alt97=1;
            	            }


            	        }


            	        switch (alt97) {
            	    	case 1 :
            	    	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:0:0: w3= ws
            	    	    {
            	    	    pushFollow(FOLLOW_ws_in_insertBefCommand2052);
            	    	    w3=ws();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, w3.getTree());

            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop97;
            	        }
            	    } while (true);

            	    if ( state.backtracking==0 ) {
            	       append(sb, (str!=null?input.toString(str.start,str.stop):null)); append(sb, (w3!=null?input.toString(w3.start,w3.stop):null)); 
            	    }

            	    }
            	    break;

            	default :
            	    break loop98;
                }
            } while (true);

            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:608:8: ( ws )*
            loop99:
            do {
                int alt99=2;
                int LA99_0 = input.LA(1);

                if ( (LA99_0==WS) ) {
                    alt99=1;
                }


                switch (alt99) {
            	case 1 :
            	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:0:0: ws
            	    {
            	    pushFollow(FOLLOW_ws_in_insertBefCommand2064);
            	    ws152=ws();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, ws152.getTree());

            	    }
            	    break;

            	default :
            	    break loop99;
                }
            } while (true);

            COMMANDCHAR153=(Token)match(input,COMMANDCHAR,FOLLOW_COMMANDCHAR_in_insertBefCommand2077); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            COMMANDCHAR153_tree = (CommonTree)adaptor.create(COMMANDCHAR153);
            adaptor.addChild(root_0, COMMANDCHAR153_tree);
            }
            ENDINSERT154=(Token)match(input,ENDINSERT,FOLLOW_ENDINSERT_in_insertBefCommand2079); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ENDINSERT154_tree = (CommonTree)adaptor.create(ENDINSERT154);
            adaptor.addChild(root_0, ENDINSERT154_tree);
            }

            }

            if ( state.backtracking==0 ) {
               Utils.removeWriteblocker("insert"); 
            }
            if ( state.backtracking==0 ) {

                        //Insert command
                        if (Utils.canWrite()){
                            new InsertCommand((e!=null?input.toString(e.start,e.stop):null), type, sb.toString(), insertLineNo).execute();
                        }
                   
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException ex) {
                  throw new ARTSyntaxException("Syntax error in File: " + Utils.getCurrentFile() + " line: " + (ex.line == 0 ? Utils.getExpressionLine() : ex.line) + " (" + ex.getStackTrace()[0].getMethodName() + ")");
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "insertBefCommand"

    public static class insertAftCommand_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "insertAftCommand"
    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:623:1: insertAftCommand : ( INSERTAFTER ( ws )* e= expression (c= command (w1= ws )* | se= stringExpression (w2= ws )* | str= ee (w3= ws )* )* ( ws )* COMMANDCHAR ENDINSERT ) ;
    public final commandParser.insertAftCommand_return insertAftCommand() throws RecognitionException {
        commandParser.insertAftCommand_return retval = new commandParser.insertAftCommand_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token INSERTAFTER155=null;
        Token COMMANDCHAR158=null;
        Token ENDINSERT159=null;
        commandParser.expression_return e = null;

        commandParser.command_return c = null;

        commandParser.ws_return w1 = null;

        commandParser.stringExpression_return se = null;

        commandParser.ws_return w2 = null;

        commandParser.ee_return str = null;

        commandParser.ws_return w3 = null;

        commandParser.ws_return ws156 = null;

        commandParser.ws_return ws157 = null;


        CommonTree INSERTAFTER155_tree=null;
        CommonTree COMMANDCHAR158_tree=null;
        CommonTree ENDINSERT159_tree=null;

         InsertType type = InsertType.INTO; StringBuilder sb = new StringBuilder(); int insertLineNo = lineNo;
        try {
            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:625:3: ( ( INSERTAFTER ( ws )* e= expression (c= command (w1= ws )* | se= stringExpression (w2= ws )* | str= ee (w3= ws )* )* ( ws )* COMMANDCHAR ENDINSERT ) )
            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:625:5: ( INSERTAFTER ( ws )* e= expression (c= command (w1= ws )* | se= stringExpression (w2= ws )* | str= ee (w3= ws )* )* ( ws )* COMMANDCHAR ENDINSERT )
            {
            root_0 = (CommonTree)adaptor.nil();

            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:625:5: ( INSERTAFTER ( ws )* e= expression (c= command (w1= ws )* | se= stringExpression (w2= ws )* | str= ee (w3= ws )* )* ( ws )* COMMANDCHAR ENDINSERT )
            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:625:7: INSERTAFTER ( ws )* e= expression (c= command (w1= ws )* | se= stringExpression (w2= ws )* | str= ee (w3= ws )* )* ( ws )* COMMANDCHAR ENDINSERT
            {
            INSERTAFTER155=(Token)match(input,INSERTAFTER,FOLLOW_INSERTAFTER_in_insertAftCommand2126); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            INSERTAFTER155_tree = (CommonTree)adaptor.create(INSERTAFTER155);
            adaptor.addChild(root_0, INSERTAFTER155_tree);
            }
            if ( state.backtracking==0 ) {
              type = InsertType.AFTER;
            }
            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:625:46: ( ws )*
            loop100:
            do {
                int alt100=2;
                int LA100_0 = input.LA(1);

                if ( (LA100_0==WS) ) {
                    int LA100_2 = input.LA(2);

                    if ( (synpred147_command()) ) {
                        alt100=1;
                    }


                }


                switch (alt100) {
            	case 1 :
            	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:0:0: ws
            	    {
            	    pushFollow(FOLLOW_ws_in_insertAftCommand2130);
            	    ws156=ws();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, ws156.getTree());

            	    }
            	    break;

            	default :
            	    break loop100;
                }
            } while (true);

            pushFollow(FOLLOW_expression_in_insertAftCommand2135);
            e=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, e.getTree());
            if ( state.backtracking==0 ) {
               Utils.addWriteblocker("insert"); 
            }
            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:629:5: (c= command (w1= ws )* | se= stringExpression (w2= ws )* | str= ee (w3= ws )* )*
            loop104:
            do {
                int alt104=4;
                switch ( input.LA(1) ) {
                case WS:
                    {
                    int LA104_1 = input.LA(2);

                    if ( (synpred153_command()) ) {
                        alt104=3;
                    }


                    }
                    break;
                case COMMANDCHAR:
                    {
                    int LA104_2 = input.LA(2);

                    if ( ((LA104_2>=IDENT && LA104_2<=EXTENDEDADAPTSAMELEVEL)||(LA104_2>=ADAPTCOPY && LA104_2<=IF)||(LA104_2>=IFDEF && LA104_2<=SELECT)||LA104_2==INSERT||(LA104_2>=INSERTBEFORE && LA104_2<=EXTENDEDBREAK)||(LA104_2>=BREAK && LA104_2<=WHILE)||LA104_2==SETLOOP||(LA104_2>=MESSAGE && LA104_2<=EXTENDEDMESSAGE)||(LA104_2>=MESSAGEIF && LA104_2<=TEXT)) ) {
                        alt104=1;
                    }


                    }
                    break;
                case STRING:
                    {
                    int LA104_3 = input.LA(2);

                    if ( (synpred151_command()) ) {
                        alt104=2;
                    }
                    else if ( (synpred153_command()) ) {
                        alt104=3;
                    }


                    }
                    break;
                case EPRESSIONCHAR:
                    {
                    alt104=2;
                    }
                    break;
                case NEGATION:
                case DEFINED:
                case ARTVARCHAR:
                case NL:
                case IDENT:
                case SIMPLEADAPT:
                case ADAPTSAMELEVEL:
                case EXTENDEDADAPT:
                case EXTENDEDADAPTSAMELEVEL:
                case ENDADAPT:
                case ADAPTCOPY:
                case SET:
                case SETDEFER:
                case OUTPUT:
                case OUTDIR:
                case OUTFILE:
                case IF:
                case ENDIF:
                case ELIF:
                case ELSE:
                case IFDEF:
                case IFNDEF:
                case REMOVE:
                case SELECT:
                case ENDSELECT:
                case OPTIONUNDEFINED:
                case ENDOPTION:
                case OPTION:
                case OTHERWISE:
                case ENDOTHERWISE:
                case INSERT:
                case ENDINSERT:
                case INSERTBEFORE:
                case INSERTAFTER:
                case EXTENDEDBREAK:
                case ENDBREAK:
                case BREAK:
                case WHILE:
                case ENDWHILE:
                case SETLOOP:
                case ENDSETLOOP:
                case VARS:
                case ENDVARS:
                case VAR:
                case ITER:
                case MESSAGE:
                case EXTENDEDMESSAGE:
                case ENDMESSAGE:
                case MESSAGEIF:
                case EXTENDEDMESSAGEIF:
                case MESSAGEDEBUG:
                case EXTENDEDMESSAGEDEBUG:
                case TEXT:
                case ENDTEXT:
                case REFERENCECHAR:
                case INTEGER:
                case ISLAST:
                case ISFIRST:
                case SIZE:
                case ISNUMERIC:
                case ULCAP:
                case LLCAP:
                case DEBUGMODE:
                case CURRENTFILE:
                case DEFAULTOUTPUT:
                case COMMENTCHAR:
                case QUOTATIONMARK:
                case STRINGNOEND:
                case NOTNEWLINE:
                case COMMENT:
                case ESCCOMMENT:
                case DIGIT:
                case SPECCHAR:
                case LETTER:
                case DOT:
                case ANYCHAR:
                case 84:
                case 85:
                case 86:
                case 87:
                case 88:
                case 89:
                case 90:
                case 91:
                case 92:
                case 93:
                case 94:
                case 95:
                case 96:
                case 97:
                case 98:
                case 99:
                case 100:
                case 101:
                case 102:
                case 103:
                case 104:
                case 105:
                case 106:
                case 107:
                case 108:
                case 109:
                    {
                    alt104=3;
                    }
                    break;

                }

                switch (alt104) {
            	case 1 :
            	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:629:6: c= command (w1= ws )*
            	    {
            	    pushFollow(FOLLOW_command_in_insertAftCommand2155);
            	    c=command();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, c.getTree());
            	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:629:18: (w1= ws )*
            	    loop101:
            	    do {
            	        int alt101=2;
            	        int LA101_0 = input.LA(1);

            	        if ( (LA101_0==WS) ) {
            	            int LA101_1 = input.LA(2);

            	            if ( (synpred148_command()) ) {
            	                alt101=1;
            	            }


            	        }


            	        switch (alt101) {
            	    	case 1 :
            	    	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:0:0: w1= ws
            	    	    {
            	    	    pushFollow(FOLLOW_ws_in_insertAftCommand2159);
            	    	    w1=ws();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, w1.getTree());

            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop101;
            	        }
            	    } while (true);

            	    if ( state.backtracking==0 ) {
            	       append(sb, (c!=null?input.toString(c.start,c.stop):null)); append(sb, (w1!=null?input.toString(w1.start,w1.stop):null)); 
            	    }

            	    }
            	    break;
            	case 2 :
            	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:630:10: se= stringExpression (w2= ws )*
            	    {
            	    pushFollow(FOLLOW_stringExpression_in_insertAftCommand2175);
            	    se=stringExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, se.getTree());
            	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:630:32: (w2= ws )*
            	    loop102:
            	    do {
            	        int alt102=2;
            	        int LA102_0 = input.LA(1);

            	        if ( (LA102_0==WS) ) {
            	            int LA102_1 = input.LA(2);

            	            if ( (synpred150_command()) ) {
            	                alt102=1;
            	            }


            	        }


            	        switch (alt102) {
            	    	case 1 :
            	    	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:0:0: w2= ws
            	    	    {
            	    	    pushFollow(FOLLOW_ws_in_insertAftCommand2179);
            	    	    w2=ws();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, w2.getTree());

            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop102;
            	        }
            	    } while (true);

            	    if ( state.backtracking==0 ) {
            	       append(sb, (se!=null?input.toString(se.start,se.stop):null)); append(sb, (w2!=null?input.toString(w2.start,w2.stop):null));
            	    }

            	    }
            	    break;
            	case 3 :
            	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:631:10: str= ee (w3= ws )*
            	    {
            	    pushFollow(FOLLOW_ee_in_insertAftCommand2196);
            	    str=ee();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, str.getTree());
            	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:631:19: (w3= ws )*
            	    loop103:
            	    do {
            	        int alt103=2;
            	        int LA103_0 = input.LA(1);

            	        if ( (LA103_0==WS) ) {
            	            int LA103_1 = input.LA(2);

            	            if ( (synpred152_command()) ) {
            	                alt103=1;
            	            }


            	        }


            	        switch (alt103) {
            	    	case 1 :
            	    	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:0:0: w3= ws
            	    	    {
            	    	    pushFollow(FOLLOW_ws_in_insertAftCommand2200);
            	    	    w3=ws();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, w3.getTree());

            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop103;
            	        }
            	    } while (true);

            	    if ( state.backtracking==0 ) {
            	       append(sb, (str!=null?input.toString(str.start,str.stop):null)); append(sb, (w3!=null?input.toString(w3.start,w3.stop):null)); 
            	    }

            	    }
            	    break;

            	default :
            	    break loop104;
                }
            } while (true);

            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:632:8: ( ws )*
            loop105:
            do {
                int alt105=2;
                int LA105_0 = input.LA(1);

                if ( (LA105_0==WS) ) {
                    alt105=1;
                }


                switch (alt105) {
            	case 1 :
            	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:0:0: ws
            	    {
            	    pushFollow(FOLLOW_ws_in_insertAftCommand2212);
            	    ws157=ws();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, ws157.getTree());

            	    }
            	    break;

            	default :
            	    break loop105;
                }
            } while (true);

            COMMANDCHAR158=(Token)match(input,COMMANDCHAR,FOLLOW_COMMANDCHAR_in_insertAftCommand2225); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            COMMANDCHAR158_tree = (CommonTree)adaptor.create(COMMANDCHAR158);
            adaptor.addChild(root_0, COMMANDCHAR158_tree);
            }
            ENDINSERT159=(Token)match(input,ENDINSERT,FOLLOW_ENDINSERT_in_insertAftCommand2227); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ENDINSERT159_tree = (CommonTree)adaptor.create(ENDINSERT159);
            adaptor.addChild(root_0, ENDINSERT159_tree);
            }

            }

            if ( state.backtracking==0 ) {
               Utils.removeWriteblocker("insert"); 
            }
            if ( state.backtracking==0 ) {

                        //Insert command
                        if (Utils.canWrite()){
                            new InsertCommand((e!=null?input.toString(e.start,e.stop):null), type, sb.toString(), insertLineNo).execute();
                        }
                   
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException ex) {
                  throw new ARTSyntaxException("Syntax error in File: " + Utils.getCurrentFile() + " line: " + (ex.line == 0 ? Utils.getExpressionLine() : ex.line) + " (" + ex.getStackTrace()[0].getMethodName() + ")");
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "insertAftCommand"

    public static class breakCommand_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "breakCommand"
    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:647:1: breakCommand : ( ( EXTENDEDBREAK ( ws )* e1= expression (c= command (w1= ws )* | cc1= COMMANDCHAR v= varDesc (w2= ws )* | cc2= COMMANDCHAR i= iter (w3= ws )* | se= stringExpression (w4= ws )* | str= ee (w5= ws )* )* ( ws )* COMMANDCHAR ENDBREAK ) | BREAK ( ws )* e2= expression );
    public final commandParser.breakCommand_return breakCommand() throws RecognitionException {
        commandParser.breakCommand_return retval = new commandParser.breakCommand_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token cc1=null;
        Token cc2=null;
        Token EXTENDEDBREAK160=null;
        Token COMMANDCHAR163=null;
        Token ENDBREAK164=null;
        Token BREAK165=null;
        commandParser.expression_return e1 = null;

        commandParser.command_return c = null;

        commandParser.ws_return w1 = null;

        commandParser.varDesc_return v = null;

        commandParser.ws_return w2 = null;

        commandParser.iter_return i = null;

        commandParser.ws_return w3 = null;

        commandParser.stringExpression_return se = null;

        commandParser.ws_return w4 = null;

        commandParser.ee_return str = null;

        commandParser.ws_return w5 = null;

        commandParser.expression_return e2 = null;

        commandParser.ws_return ws161 = null;

        commandParser.ws_return ws162 = null;

        commandParser.ws_return ws166 = null;


        CommonTree cc1_tree=null;
        CommonTree cc2_tree=null;
        CommonTree EXTENDEDBREAK160_tree=null;
        CommonTree COMMANDCHAR163_tree=null;
        CommonTree ENDBREAK164_tree=null;
        CommonTree BREAK165_tree=null;

         StringBuilder sb = new StringBuilder(); 
        try {
            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:649:3: ( ( EXTENDEDBREAK ( ws )* e1= expression (c= command (w1= ws )* | cc1= COMMANDCHAR v= varDesc (w2= ws )* | cc2= COMMANDCHAR i= iter (w3= ws )* | se= stringExpression (w4= ws )* | str= ee (w5= ws )* )* ( ws )* COMMANDCHAR ENDBREAK ) | BREAK ( ws )* e2= expression )
            int alt115=2;
            int LA115_0 = input.LA(1);

            if ( (LA115_0==EXTENDEDBREAK) ) {
                alt115=1;
            }
            else if ( (LA115_0==BREAK) ) {
                alt115=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 115, 0, input);

                throw nvae;
            }
            switch (alt115) {
                case 1 :
                    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:649:5: ( EXTENDEDBREAK ( ws )* e1= expression (c= command (w1= ws )* | cc1= COMMANDCHAR v= varDesc (w2= ws )* | cc2= COMMANDCHAR i= iter (w3= ws )* | se= stringExpression (w4= ws )* | str= ee (w5= ws )* )* ( ws )* COMMANDCHAR ENDBREAK )
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:649:5: ( EXTENDEDBREAK ( ws )* e1= expression (c= command (w1= ws )* | cc1= COMMANDCHAR v= varDesc (w2= ws )* | cc2= COMMANDCHAR i= iter (w3= ws )* | se= stringExpression (w4= ws )* | str= ee (w5= ws )* )* ( ws )* COMMANDCHAR ENDBREAK )
                    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:649:6: EXTENDEDBREAK ( ws )* e1= expression (c= command (w1= ws )* | cc1= COMMANDCHAR v= varDesc (w2= ws )* | cc2= COMMANDCHAR i= iter (w3= ws )* | se= stringExpression (w4= ws )* | str= ee (w5= ws )* )* ( ws )* COMMANDCHAR ENDBREAK
                    {
                    EXTENDEDBREAK160=(Token)match(input,EXTENDEDBREAK,FOLLOW_EXTENDEDBREAK_in_breakCommand2273); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    EXTENDEDBREAK160_tree = (CommonTree)adaptor.create(EXTENDEDBREAK160);
                    adaptor.addChild(root_0, EXTENDEDBREAK160_tree);
                    }
                    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:649:20: ( ws )*
                    loop106:
                    do {
                        int alt106=2;
                        int LA106_0 = input.LA(1);

                        if ( (LA106_0==WS) ) {
                            int LA106_2 = input.LA(2);

                            if ( (synpred155_command()) ) {
                                alt106=1;
                            }


                        }


                        switch (alt106) {
                    	case 1 :
                    	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:0:0: ws
                    	    {
                    	    pushFollow(FOLLOW_ws_in_breakCommand2275);
                    	    ws161=ws();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, ws161.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop106;
                        }
                    } while (true);

                    pushFollow(FOLLOW_expression_in_breakCommand2280);
                    e1=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, e1.getTree());
                    if ( state.backtracking==0 ) {
                       Utils.addWriteblocker("break"); 
                    }
                    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:653:6: (c= command (w1= ws )* | cc1= COMMANDCHAR v= varDesc (w2= ws )* | cc2= COMMANDCHAR i= iter (w3= ws )* | se= stringExpression (w4= ws )* | str= ee (w5= ws )* )*
                    loop112:
                    do {
                        int alt112=6;
                        alt112 = dfa112.predict(input);
                        switch (alt112) {
                    	case 1 :
                    	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:653:7: c= command (w1= ws )*
                    	    {
                    	    pushFollow(FOLLOW_command_in_breakCommand2300);
                    	    c=command();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, c.getTree());
                    	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:653:19: (w1= ws )*
                    	    loop107:
                    	    do {
                    	        int alt107=2;
                    	        int LA107_0 = input.LA(1);

                    	        if ( (LA107_0==WS) ) {
                    	            int LA107_1 = input.LA(2);

                    	            if ( (synpred156_command()) ) {
                    	                alt107=1;
                    	            }


                    	        }


                    	        switch (alt107) {
                    	    	case 1 :
                    	    	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:0:0: w1= ws
                    	    	    {
                    	    	    pushFollow(FOLLOW_ws_in_breakCommand2304);
                    	    	    w1=ws();

                    	    	    state._fsp--;
                    	    	    if (state.failed) return retval;
                    	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, w1.getTree());

                    	    	    }
                    	    	    break;

                    	    	default :
                    	    	    break loop107;
                    	        }
                    	    } while (true);

                    	    if ( state.backtracking==0 ) {
                    	       append(sb, (c!=null?input.toString(c.start,c.stop):null)); append(sb, (w1!=null?input.toString(w1.start,w1.stop):null)); 
                    	    }

                    	    }
                    	    break;
                    	case 2 :
                    	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:654:10: cc1= COMMANDCHAR v= varDesc (w2= ws )*
                    	    {
                    	    cc1=(Token)match(input,COMMANDCHAR,FOLLOW_COMMANDCHAR_in_breakCommand2320); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    cc1_tree = (CommonTree)adaptor.create(cc1);
                    	    adaptor.addChild(root_0, cc1_tree);
                    	    }
                    	    pushFollow(FOLLOW_varDesc_in_breakCommand2324);
                    	    v=varDesc();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, v.getTree());
                    	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:654:38: (w2= ws )*
                    	    loop108:
                    	    do {
                    	        int alt108=2;
                    	        int LA108_0 = input.LA(1);

                    	        if ( (LA108_0==WS) ) {
                    	            int LA108_1 = input.LA(2);

                    	            if ( (synpred158_command()) ) {
                    	                alt108=1;
                    	            }


                    	        }


                    	        switch (alt108) {
                    	    	case 1 :
                    	    	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:0:0: w2= ws
                    	    	    {
                    	    	    pushFollow(FOLLOW_ws_in_breakCommand2328);
                    	    	    w2=ws();

                    	    	    state._fsp--;
                    	    	    if (state.failed) return retval;
                    	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, w2.getTree());

                    	    	    }
                    	    	    break;

                    	    	default :
                    	    	    break loop108;
                    	        }
                    	    } while (true);

                    	    if ( state.backtracking==0 ) {
                    	       append(sb, (cc1!=null?cc1.getText():null)); append(sb, (v!=null?input.toString(v.start,v.stop):null)); append(sb, (w2!=null?input.toString(w2.start,w2.stop):null)); 
                    	    }

                    	    }
                    	    break;
                    	case 3 :
                    	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:655:10: cc2= COMMANDCHAR i= iter (w3= ws )*
                    	    {
                    	    cc2=(Token)match(input,COMMANDCHAR,FOLLOW_COMMANDCHAR_in_breakCommand2344); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    cc2_tree = (CommonTree)adaptor.create(cc2);
                    	    adaptor.addChild(root_0, cc2_tree);
                    	    }
                    	    pushFollow(FOLLOW_iter_in_breakCommand2348);
                    	    i=iter();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, i.getTree());
                    	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:655:35: (w3= ws )*
                    	    loop109:
                    	    do {
                    	        int alt109=2;
                    	        int LA109_0 = input.LA(1);

                    	        if ( (LA109_0==WS) ) {
                    	            int LA109_1 = input.LA(2);

                    	            if ( (synpred160_command()) ) {
                    	                alt109=1;
                    	            }


                    	        }


                    	        switch (alt109) {
                    	    	case 1 :
                    	    	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:0:0: w3= ws
                    	    	    {
                    	    	    pushFollow(FOLLOW_ws_in_breakCommand2352);
                    	    	    w3=ws();

                    	    	    state._fsp--;
                    	    	    if (state.failed) return retval;
                    	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, w3.getTree());

                    	    	    }
                    	    	    break;

                    	    	default :
                    	    	    break loop109;
                    	        }
                    	    } while (true);

                    	    if ( state.backtracking==0 ) {
                    	       append(sb, (cc2!=null?cc2.getText():null)); append(sb, (i!=null?input.toString(i.start,i.stop):null)); append(sb, (w3!=null?input.toString(w3.start,w3.stop):null)); 
                    	    }

                    	    }
                    	    break;
                    	case 4 :
                    	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:656:10: se= stringExpression (w4= ws )*
                    	    {
                    	    pushFollow(FOLLOW_stringExpression_in_breakCommand2368);
                    	    se=stringExpression();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, se.getTree());
                    	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:656:32: (w4= ws )*
                    	    loop110:
                    	    do {
                    	        int alt110=2;
                    	        int LA110_0 = input.LA(1);

                    	        if ( (LA110_0==WS) ) {
                    	            int LA110_1 = input.LA(2);

                    	            if ( (synpred162_command()) ) {
                    	                alt110=1;
                    	            }


                    	        }


                    	        switch (alt110) {
                    	    	case 1 :
                    	    	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:0:0: w4= ws
                    	    	    {
                    	    	    pushFollow(FOLLOW_ws_in_breakCommand2372);
                    	    	    w4=ws();

                    	    	    state._fsp--;
                    	    	    if (state.failed) return retval;
                    	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, w4.getTree());

                    	    	    }
                    	    	    break;

                    	    	default :
                    	    	    break loop110;
                    	        }
                    	    } while (true);

                    	    if ( state.backtracking==0 ) {
                    	       append(sb, (se!=null?input.toString(se.start,se.stop):null)); append(sb, (w4!=null?input.toString(w4.start,w4.stop):null));
                    	    }

                    	    }
                    	    break;
                    	case 5 :
                    	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:657:10: str= ee (w5= ws )*
                    	    {
                    	    pushFollow(FOLLOW_ee_in_breakCommand2389);
                    	    str=ee();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, str.getTree());
                    	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:657:19: (w5= ws )*
                    	    loop111:
                    	    do {
                    	        int alt111=2;
                    	        int LA111_0 = input.LA(1);

                    	        if ( (LA111_0==WS) ) {
                    	            int LA111_1 = input.LA(2);

                    	            if ( (synpred164_command()) ) {
                    	                alt111=1;
                    	            }


                    	        }


                    	        switch (alt111) {
                    	    	case 1 :
                    	    	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:0:0: w5= ws
                    	    	    {
                    	    	    pushFollow(FOLLOW_ws_in_breakCommand2393);
                    	    	    w5=ws();

                    	    	    state._fsp--;
                    	    	    if (state.failed) return retval;
                    	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, w5.getTree());

                    	    	    }
                    	    	    break;

                    	    	default :
                    	    	    break loop111;
                    	        }
                    	    } while (true);

                    	    if ( state.backtracking==0 ) {
                    	       append(sb, (str!=null?input.toString(str.start,str.stop):null)); append(sb, (w5!=null?input.toString(w5.start,w5.stop):null)); 
                    	    }

                    	    }
                    	    break;

                    	default :
                    	    break loop112;
                        }
                    } while (true);

                    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:658:8: ( ws )*
                    loop113:
                    do {
                        int alt113=2;
                        int LA113_0 = input.LA(1);

                        if ( (LA113_0==WS) ) {
                            alt113=1;
                        }


                        switch (alt113) {
                    	case 1 :
                    	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:0:0: ws
                    	    {
                    	    pushFollow(FOLLOW_ws_in_breakCommand2405);
                    	    ws162=ws();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, ws162.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop113;
                        }
                    } while (true);

                    COMMANDCHAR163=(Token)match(input,COMMANDCHAR,FOLLOW_COMMANDCHAR_in_breakCommand2418); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COMMANDCHAR163_tree = (CommonTree)adaptor.create(COMMANDCHAR163);
                    adaptor.addChild(root_0, COMMANDCHAR163_tree);
                    }
                    ENDBREAK164=(Token)match(input,ENDBREAK,FOLLOW_ENDBREAK_in_breakCommand2420); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ENDBREAK164_tree = (CommonTree)adaptor.create(ENDBREAK164);
                    adaptor.addChild(root_0, ENDBREAK164_tree);
                    }

                    }

                    if ( state.backtracking==0 ) {
                       Utils.removeWriteblocker("break"); 
                    }
                    if ( state.backtracking==0 ) {

                               //Break command (extended)
                               if (Utils.canWrite()){
                                   new BreakCommand((e1!=null?input.toString(e1.start,e1.stop):null), sb.toString(), lineNo).execute();
                               } 
                           
                    }

                    }
                    break;
                case 2 :
                    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:671:5: BREAK ( ws )* e2= expression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    BREAK165=(Token)match(input,BREAK,FOLLOW_BREAK_in_breakCommand2451); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    BREAK165_tree = (CommonTree)adaptor.create(BREAK165);
                    adaptor.addChild(root_0, BREAK165_tree);
                    }
                    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:671:11: ( ws )*
                    loop114:
                    do {
                        int alt114=2;
                        int LA114_0 = input.LA(1);

                        if ( (LA114_0==WS) ) {
                            int LA114_2 = input.LA(2);

                            if ( (synpred168_command()) ) {
                                alt114=1;
                            }


                        }


                        switch (alt114) {
                    	case 1 :
                    	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:0:0: ws
                    	    {
                    	    pushFollow(FOLLOW_ws_in_breakCommand2453);
                    	    ws166=ws();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, ws166.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop114;
                        }
                    } while (true);

                    pushFollow(FOLLOW_expression_in_breakCommand2458);
                    e2=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, e2.getTree());
                    if ( state.backtracking==0 ) {

                                //Break command
                                if (Utils.canWrite()){
                                    new BreakCommand((e2!=null?input.toString(e2.start,e2.stop):null), lineNo).execute();
                                }
                           
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException ex) {
                  throw new ARTSyntaxException("Syntax error in File: " + Utils.getCurrentFile() + " line: " + (ex.line == 0 ? Utils.getExpressionLine() : ex.line) + " (" + ex.getStackTrace()[0].getMethodName() + ")");
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "breakCommand"

    public static class whileCommand_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "whileCommand"
    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:683:1: whileCommand : WHILE ( ws )* e= expression ( ( ws )* ',' ( ws )* e2= expression )* ( NL )? (c= command | se= stringExpression (w2= ws )* | str= ee (w3= ws )* )* ( ws )* COMMANDCHAR ENDWHILE ( NL )? ;
    public final commandParser.whileCommand_return whileCommand() throws RecognitionException {
        commandParser.whileCommand_return retval = new commandParser.whileCommand_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token WHILE167=null;
        Token char_literal170=null;
        Token NL172=null;
        Token COMMANDCHAR174=null;
        Token ENDWHILE175=null;
        Token NL176=null;
        commandParser.expression_return e = null;

        commandParser.expression_return e2 = null;

        commandParser.command_return c = null;

        commandParser.stringExpression_return se = null;

        commandParser.ws_return w2 = null;

        commandParser.ee_return str = null;

        commandParser.ws_return w3 = null;

        commandParser.ws_return ws168 = null;

        commandParser.ws_return ws169 = null;

        commandParser.ws_return ws171 = null;

        commandParser.ws_return ws173 = null;


        CommonTree WHILE167_tree=null;
        CommonTree char_literal170_tree=null;
        CommonTree NL172_tree=null;
        CommonTree COMMANDCHAR174_tree=null;
        CommonTree ENDWHILE175_tree=null;
        CommonTree NL176_tree=null;

        List<String> iterVariableList = new ArrayList<String>(); StringBuilder sb = new StringBuilder(); int whileLineNo = lineNo;
        try {
            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:685:3: ( WHILE ( ws )* e= expression ( ( ws )* ',' ( ws )* e2= expression )* ( NL )? (c= command | se= stringExpression (w2= ws )* | str= ee (w3= ws )* )* ( ws )* COMMANDCHAR ENDWHILE ( NL )? )
            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:685:5: WHILE ( ws )* e= expression ( ( ws )* ',' ( ws )* e2= expression )* ( NL )? (c= command | se= stringExpression (w2= ws )* | str= ee (w3= ws )* )* ( ws )* COMMANDCHAR ENDWHILE ( NL )?
            {
            root_0 = (CommonTree)adaptor.nil();

            WHILE167=(Token)match(input,WHILE,FOLLOW_WHILE_in_whileCommand2496); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            WHILE167_tree = (CommonTree)adaptor.create(WHILE167);
            adaptor.addChild(root_0, WHILE167_tree);
            }
            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:685:11: ( ws )*
            loop116:
            do {
                int alt116=2;
                int LA116_0 = input.LA(1);

                if ( (LA116_0==WS) ) {
                    int LA116_2 = input.LA(2);

                    if ( (synpred169_command()) ) {
                        alt116=1;
                    }


                }


                switch (alt116) {
            	case 1 :
            	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:0:0: ws
            	    {
            	    pushFollow(FOLLOW_ws_in_whileCommand2498);
            	    ws168=ws();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, ws168.getTree());

            	    }
            	    break;

            	default :
            	    break loop116;
                }
            } while (true);

            pushFollow(FOLLOW_expression_in_whileCommand2503);
            e=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, e.getTree());
            if ( state.backtracking==0 ) {
              iterVariableList.add((e!=null?input.toString(e.start,e.stop):null));
            }
            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:686:3: ( ( ws )* ',' ( ws )* e2= expression )*
            loop119:
            do {
                int alt119=2;
                int LA119_0 = input.LA(1);

                if ( (LA119_0==WS) ) {
                    int LA119_5 = input.LA(2);

                    if ( (synpred172_command()) ) {
                        alt119=1;
                    }


                }
                else if ( (LA119_0==85) ) {
                    int LA119_6 = input.LA(2);

                    if ( (synpred172_command()) ) {
                        alt119=1;
                    }


                }


                switch (alt119) {
            	case 1 :
            	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:686:5: ( ws )* ',' ( ws )* e2= expression
            	    {
            	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:686:5: ( ws )*
            	    loop117:
            	    do {
            	        int alt117=2;
            	        int LA117_0 = input.LA(1);

            	        if ( (LA117_0==WS) ) {
            	            alt117=1;
            	        }


            	        switch (alt117) {
            	    	case 1 :
            	    	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:0:0: ws
            	    	    {
            	    	    pushFollow(FOLLOW_ws_in_whileCommand2511);
            	    	    ws169=ws();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, ws169.getTree());

            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop117;
            	        }
            	    } while (true);

            	    char_literal170=(Token)match(input,85,FOLLOW_85_in_whileCommand2514); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal170_tree = (CommonTree)adaptor.create(char_literal170);
            	    adaptor.addChild(root_0, char_literal170_tree);
            	    }
            	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:686:13: ( ws )*
            	    loop118:
            	    do {
            	        int alt118=2;
            	        int LA118_0 = input.LA(1);

            	        if ( (LA118_0==WS) ) {
            	            int LA118_2 = input.LA(2);

            	            if ( (synpred171_command()) ) {
            	                alt118=1;
            	            }


            	        }


            	        switch (alt118) {
            	    	case 1 :
            	    	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:0:0: ws
            	    	    {
            	    	    pushFollow(FOLLOW_ws_in_whileCommand2516);
            	    	    ws171=ws();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, ws171.getTree());

            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop118;
            	        }
            	    } while (true);

            	    pushFollow(FOLLOW_expression_in_whileCommand2521);
            	    e2=expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, e2.getTree());
            	    if ( state.backtracking==0 ) {
            	      iterVariableList.add((e2!=null?input.toString(e2.start,e2.stop):null));
            	    }

            	    }
            	    break;

            	default :
            	    break loop119;
                }
            } while (true);

            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:686:68: ( NL )?
            int alt120=2;
            int LA120_0 = input.LA(1);

            if ( (LA120_0==NL) ) {
                int LA120_1 = input.LA(2);

                if ( (synpred173_command()) ) {
                    alt120=1;
                }
            }
            switch (alt120) {
                case 1 :
                    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:0:0: NL
                    {
                    NL172=(Token)match(input,NL,FOLLOW_NL_in_whileCommand2528); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NL172_tree = (CommonTree)adaptor.create(NL172);
                    adaptor.addChild(root_0, NL172_tree);
                    }

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
               Utils.addWriteblocker("while"); 
            }
            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:690:7: (c= command | se= stringExpression (w2= ws )* | str= ee (w3= ws )* )*
            loop123:
            do {
                int alt123=4;
                switch ( input.LA(1) ) {
                case WS:
                    {
                    int LA123_1 = input.LA(2);

                    if ( (synpred178_command()) ) {
                        alt123=3;
                    }


                    }
                    break;
                case COMMANDCHAR:
                    {
                    int LA123_2 = input.LA(2);

                    if ( ((LA123_2>=IDENT && LA123_2<=EXTENDEDADAPTSAMELEVEL)||(LA123_2>=ADAPTCOPY && LA123_2<=IF)||(LA123_2>=IFDEF && LA123_2<=SELECT)||LA123_2==INSERT||(LA123_2>=INSERTBEFORE && LA123_2<=EXTENDEDBREAK)||(LA123_2>=BREAK && LA123_2<=WHILE)||LA123_2==SETLOOP||(LA123_2>=MESSAGE && LA123_2<=EXTENDEDMESSAGE)||(LA123_2>=MESSAGEIF && LA123_2<=TEXT)) ) {
                        alt123=1;
                    }


                    }
                    break;
                case STRING:
                    {
                    int LA123_3 = input.LA(2);

                    if ( (synpred176_command()) ) {
                        alt123=2;
                    }
                    else if ( (synpred178_command()) ) {
                        alt123=3;
                    }


                    }
                    break;
                case EPRESSIONCHAR:
                    {
                    alt123=2;
                    }
                    break;
                case NEGATION:
                case DEFINED:
                case ARTVARCHAR:
                case NL:
                case IDENT:
                case SIMPLEADAPT:
                case ADAPTSAMELEVEL:
                case EXTENDEDADAPT:
                case EXTENDEDADAPTSAMELEVEL:
                case ENDADAPT:
                case ADAPTCOPY:
                case SET:
                case SETDEFER:
                case OUTPUT:
                case OUTDIR:
                case OUTFILE:
                case IF:
                case ENDIF:
                case ELIF:
                case ELSE:
                case IFDEF:
                case IFNDEF:
                case REMOVE:
                case SELECT:
                case ENDSELECT:
                case OPTIONUNDEFINED:
                case ENDOPTION:
                case OPTION:
                case OTHERWISE:
                case ENDOTHERWISE:
                case INSERT:
                case ENDINSERT:
                case INSERTBEFORE:
                case INSERTAFTER:
                case EXTENDEDBREAK:
                case ENDBREAK:
                case BREAK:
                case WHILE:
                case ENDWHILE:
                case SETLOOP:
                case ENDSETLOOP:
                case VARS:
                case ENDVARS:
                case VAR:
                case ITER:
                case MESSAGE:
                case EXTENDEDMESSAGE:
                case ENDMESSAGE:
                case MESSAGEIF:
                case EXTENDEDMESSAGEIF:
                case MESSAGEDEBUG:
                case EXTENDEDMESSAGEDEBUG:
                case TEXT:
                case ENDTEXT:
                case REFERENCECHAR:
                case INTEGER:
                case ISLAST:
                case ISFIRST:
                case SIZE:
                case ISNUMERIC:
                case ULCAP:
                case LLCAP:
                case DEBUGMODE:
                case CURRENTFILE:
                case DEFAULTOUTPUT:
                case COMMENTCHAR:
                case QUOTATIONMARK:
                case STRINGNOEND:
                case NOTNEWLINE:
                case COMMENT:
                case ESCCOMMENT:
                case DIGIT:
                case SPECCHAR:
                case LETTER:
                case DOT:
                case ANYCHAR:
                case 84:
                case 85:
                case 86:
                case 87:
                case 88:
                case 89:
                case 90:
                case 91:
                case 92:
                case 93:
                case 94:
                case 95:
                case 96:
                case 97:
                case 98:
                case 99:
                case 100:
                case 101:
                case 102:
                case 103:
                case 104:
                case 105:
                case 106:
                case 107:
                case 108:
                case 109:
                    {
                    alt123=3;
                    }
                    break;

                }

                switch (alt123) {
            	case 1 :
            	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:690:8: c= command
            	    {
            	    pushFollow(FOLLOW_command_in_whileCommand2558);
            	    c=command();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, c.getTree());
            	    if ( state.backtracking==0 ) {
            	       append(sb, (c!=null?input.toString(c.start,c.stop):null)); 
            	    }

            	    }
            	    break;
            	case 2 :
            	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:691:10: se= stringExpression (w2= ws )*
            	    {
            	    pushFollow(FOLLOW_stringExpression_in_whileCommand2573);
            	    se=stringExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, se.getTree());
            	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:691:32: (w2= ws )*
            	    loop121:
            	    do {
            	        int alt121=2;
            	        int LA121_0 = input.LA(1);

            	        if ( (LA121_0==WS) ) {
            	            int LA121_1 = input.LA(2);

            	            if ( (synpred175_command()) ) {
            	                alt121=1;
            	            }


            	        }


            	        switch (alt121) {
            	    	case 1 :
            	    	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:0:0: w2= ws
            	    	    {
            	    	    pushFollow(FOLLOW_ws_in_whileCommand2577);
            	    	    w2=ws();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, w2.getTree());

            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop121;
            	        }
            	    } while (true);

            	    if ( state.backtracking==0 ) {
            	       append(sb, (se!=null?input.toString(se.start,se.stop):null)); append(sb, (w2!=null?input.toString(w2.start,w2.stop):null));
            	    }

            	    }
            	    break;
            	case 3 :
            	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:692:10: str= ee (w3= ws )*
            	    {
            	    pushFollow(FOLLOW_ee_in_whileCommand2594);
            	    str=ee();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, str.getTree());
            	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:692:19: (w3= ws )*
            	    loop122:
            	    do {
            	        int alt122=2;
            	        int LA122_0 = input.LA(1);

            	        if ( (LA122_0==WS) ) {
            	            int LA122_1 = input.LA(2);

            	            if ( (synpred177_command()) ) {
            	                alt122=1;
            	            }


            	        }


            	        switch (alt122) {
            	    	case 1 :
            	    	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:0:0: w3= ws
            	    	    {
            	    	    pushFollow(FOLLOW_ws_in_whileCommand2598);
            	    	    w3=ws();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, w3.getTree());

            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop122;
            	        }
            	    } while (true);

            	    if ( state.backtracking==0 ) {
            	       append(sb, (str!=null?input.toString(str.start,str.stop):null)); append(sb, (w3!=null?input.toString(w3.start,w3.stop):null)); 
            	    }

            	    }
            	    break;

            	default :
            	    break loop123;
                }
            } while (true);

            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:693:10: ( ws )*
            loop124:
            do {
                int alt124=2;
                int LA124_0 = input.LA(1);

                if ( (LA124_0==WS) ) {
                    alt124=1;
                }


                switch (alt124) {
            	case 1 :
            	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:0:0: ws
            	    {
            	    pushFollow(FOLLOW_ws_in_whileCommand2612);
            	    ws173=ws();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, ws173.getTree());

            	    }
            	    break;

            	default :
            	    break loop124;
                }
            } while (true);

            if ( state.backtracking==0 ) {
               Utils.removeWriteblocker("while"); 
            }
            if ( state.backtracking==0 ) {

                        //WhileCommand code
                        if (Utils.canWrite()){
                            new WhileCommand(iterVariableList, sb.toString(), whileLineNo).execute();
                        }
                    
            }
            COMMANDCHAR174=(Token)match(input,COMMANDCHAR,FOLLOW_COMMANDCHAR_in_whileCommand2653); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            COMMANDCHAR174_tree = (CommonTree)adaptor.create(COMMANDCHAR174);
            adaptor.addChild(root_0, COMMANDCHAR174_tree);
            }
            ENDWHILE175=(Token)match(input,ENDWHILE,FOLLOW_ENDWHILE_in_whileCommand2655); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ENDWHILE175_tree = (CommonTree)adaptor.create(ENDWHILE175);
            adaptor.addChild(root_0, ENDWHILE175_tree);
            }
            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:704:28: ( NL )?
            int alt125=2;
            int LA125_0 = input.LA(1);

            if ( (LA125_0==NL) ) {
                int LA125_1 = input.LA(2);

                if ( (synpred180_command()) ) {
                    alt125=1;
                }
            }
            switch (alt125) {
                case 1 :
                    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:0:0: NL
                    {
                    NL176=(Token)match(input,NL,FOLLOW_NL_in_whileCommand2657); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NL176_tree = (CommonTree)adaptor.create(NL176);
                    adaptor.addChild(root_0, NL176_tree);
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException ex) {
                  throw new ARTSyntaxException("Syntax error in File: " + Utils.getCurrentFile() + " line: " + (ex.line == 0 ? Utils.getExpressionLine() : ex.line) + " (" + ex.getStackTrace()[0].getMethodName() + ")");
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "whileCommand"

    public static class setLoopCommand_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "setLoopCommand"
    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:707:1: setLoopCommand : s= SETLOOP ( ws )* i= IDENT ( ws | nl )* ( COMMANDCHAR setloopVars )? ( ws | nl )* ( ( COMMANDCHAR iterBreakCommand ) ( ws | nl )* | ( COMMANDCHAR iter ) ( ws | nl )* )* COMMANDCHAR ENDSETLOOP ;
    public final commandParser.setLoopCommand_return setLoopCommand() throws RecognitionException {
        commandParser.setLoopCommand_return retval = new commandParser.setLoopCommand_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token s=null;
        Token i=null;
        Token COMMANDCHAR180=null;
        Token COMMANDCHAR184=null;
        Token COMMANDCHAR188=null;
        Token COMMANDCHAR192=null;
        Token ENDSETLOOP193=null;
        commandParser.ws_return ws177 = null;

        commandParser.ws_return ws178 = null;

        commandParser.nl_return nl179 = null;

        commandParser.setloopVars_return setloopVars181 = null;

        commandParser.ws_return ws182 = null;

        commandParser.nl_return nl183 = null;

        commandParser.iterBreakCommand_return iterBreakCommand185 = null;

        commandParser.ws_return ws186 = null;

        commandParser.nl_return nl187 = null;

        commandParser.iter_return iter189 = null;

        commandParser.ws_return ws190 = null;

        commandParser.nl_return nl191 = null;


        CommonTree s_tree=null;
        CommonTree i_tree=null;
        CommonTree COMMANDCHAR180_tree=null;
        CommonTree COMMANDCHAR184_tree=null;
        CommonTree COMMANDCHAR188_tree=null;
        CommonTree COMMANDCHAR192_tree=null;
        CommonTree ENDSETLOOP193_tree=null;

        try {
            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:708:3: (s= SETLOOP ( ws )* i= IDENT ( ws | nl )* ( COMMANDCHAR setloopVars )? ( ws | nl )* ( ( COMMANDCHAR iterBreakCommand ) ( ws | nl )* | ( COMMANDCHAR iter ) ( ws | nl )* )* COMMANDCHAR ENDSETLOOP )
            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:708:5: s= SETLOOP ( ws )* i= IDENT ( ws | nl )* ( COMMANDCHAR setloopVars )? ( ws | nl )* ( ( COMMANDCHAR iterBreakCommand ) ( ws | nl )* | ( COMMANDCHAR iter ) ( ws | nl )* )* COMMANDCHAR ENDSETLOOP
            {
            root_0 = (CommonTree)adaptor.nil();

            s=(Token)match(input,SETLOOP,FOLLOW_SETLOOP_in_setLoopCommand2675); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            s_tree = (CommonTree)adaptor.create(s);
            adaptor.addChild(root_0, s_tree);
            }
            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:708:15: ( ws )*
            loop126:
            do {
                int alt126=2;
                int LA126_0 = input.LA(1);

                if ( (LA126_0==WS) ) {
                    alt126=1;
                }


                switch (alt126) {
            	case 1 :
            	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:0:0: ws
            	    {
            	    pushFollow(FOLLOW_ws_in_setLoopCommand2677);
            	    ws177=ws();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, ws177.getTree());

            	    }
            	    break;

            	default :
            	    break loop126;
                }
            } while (true);

            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_setLoopCommand2682); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            i_tree = (CommonTree)adaptor.create(i);
            adaptor.addChild(root_0, i_tree);
            }
            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:708:36: ( ws | nl )*
            loop127:
            do {
                int alt127=3;
                int LA127_0 = input.LA(1);

                if ( (LA127_0==WS) ) {
                    int LA127_2 = input.LA(2);

                    if ( (synpred182_command()) ) {
                        alt127=1;
                    }


                }
                else if ( (LA127_0==NL) ) {
                    int LA127_3 = input.LA(2);

                    if ( (synpred183_command()) ) {
                        alt127=2;
                    }


                }


                switch (alt127) {
            	case 1 :
            	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:708:37: ws
            	    {
            	    pushFollow(FOLLOW_ws_in_setLoopCommand2694);
            	    ws178=ws();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, ws178.getTree());

            	    }
            	    break;
            	case 2 :
            	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:708:42: nl
            	    {
            	    pushFollow(FOLLOW_nl_in_setLoopCommand2698);
            	    nl179=nl();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nl179.getTree());

            	    }
            	    break;

            	default :
            	    break loop127;
                }
            } while (true);

            if ( state.backtracking==0 ) {
                 //initialize the setloop
                        if (Utils.canWrite()){
                            Utils.addSetLoopVar((i!=null?i.getText():null), new LoopVariable(Utils.getActualProcessor().getProcessData().getFiles().lastElement()));
                        }
                    
            }
            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:716:7: ( COMMANDCHAR setloopVars )?
            int alt128=2;
            int LA128_0 = input.LA(1);

            if ( (LA128_0==COMMANDCHAR) ) {
                int LA128_1 = input.LA(2);

                if ( (LA128_1==VARS) ) {
                    alt128=1;
                }
            }
            switch (alt128) {
                case 1 :
                    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:716:8: COMMANDCHAR setloopVars
                    {
                    COMMANDCHAR180=(Token)match(input,COMMANDCHAR,FOLLOW_COMMANDCHAR_in_setLoopCommand2724); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COMMANDCHAR180_tree = (CommonTree)adaptor.create(COMMANDCHAR180);
                    adaptor.addChild(root_0, COMMANDCHAR180_tree);
                    }
                    pushFollow(FOLLOW_setloopVars_in_setLoopCommand2726);
                    setloopVars181=setloopVars();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, setloopVars181.getTree());

                    }
                    break;

            }

            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:716:37: ( ws | nl )*
            loop129:
            do {
                int alt129=3;
                int LA129_0 = input.LA(1);

                if ( (LA129_0==WS) ) {
                    alt129=1;
                }
                else if ( (LA129_0==NL) ) {
                    alt129=2;
                }


                switch (alt129) {
            	case 1 :
            	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:716:38: ws
            	    {
            	    pushFollow(FOLLOW_ws_in_setLoopCommand2734);
            	    ws182=ws();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, ws182.getTree());

            	    }
            	    break;
            	case 2 :
            	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:716:43: nl
            	    {
            	    pushFollow(FOLLOW_nl_in_setLoopCommand2738);
            	    nl183=nl();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nl183.getTree());

            	    }
            	    break;

            	default :
            	    break loop129;
                }
            } while (true);

            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:717:7: ( ( COMMANDCHAR iterBreakCommand ) ( ws | nl )* | ( COMMANDCHAR iter ) ( ws | nl )* )*
            loop132:
            do {
                int alt132=3;
                int LA132_0 = input.LA(1);

                if ( (LA132_0==COMMANDCHAR) ) {
                    int LA132_1 = input.LA(2);

                    if ( (LA132_1==ITER) ) {
                        alt132=2;
                    }
                    else if ( (LA132_1==EXTENDEDBREAK||LA132_1==BREAK) ) {
                        alt132=1;
                    }


                }


                switch (alt132) {
            	case 1 :
            	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:717:10: ( COMMANDCHAR iterBreakCommand ) ( ws | nl )*
            	    {
            	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:717:10: ( COMMANDCHAR iterBreakCommand )
            	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:717:11: COMMANDCHAR iterBreakCommand
            	    {
            	    COMMANDCHAR184=(Token)match(input,COMMANDCHAR,FOLLOW_COMMANDCHAR_in_setLoopCommand2752); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    COMMANDCHAR184_tree = (CommonTree)adaptor.create(COMMANDCHAR184);
            	    adaptor.addChild(root_0, COMMANDCHAR184_tree);
            	    }
            	    pushFollow(FOLLOW_iterBreakCommand_in_setLoopCommand2754);
            	    iterBreakCommand185=iterBreakCommand();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, iterBreakCommand185.getTree());

            	    }

            	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:717:41: ( ws | nl )*
            	    loop130:
            	    do {
            	        int alt130=3;
            	        int LA130_0 = input.LA(1);

            	        if ( (LA130_0==WS) ) {
            	            alt130=1;
            	        }
            	        else if ( (LA130_0==NL) ) {
            	            alt130=2;
            	        }


            	        switch (alt130) {
            	    	case 1 :
            	    	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:717:42: ws
            	    	    {
            	    	    pushFollow(FOLLOW_ws_in_setLoopCommand2758);
            	    	    ws186=ws();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, ws186.getTree());

            	    	    }
            	    	    break;
            	    	case 2 :
            	    	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:717:47: nl
            	    	    {
            	    	    pushFollow(FOLLOW_nl_in_setLoopCommand2762);
            	    	    nl187=nl();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nl187.getTree());

            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop130;
            	        }
            	    } while (true);


            	    }
            	    break;
            	case 2 :
            	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:718:10: ( COMMANDCHAR iter ) ( ws | nl )*
            	    {
            	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:718:10: ( COMMANDCHAR iter )
            	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:718:11: COMMANDCHAR iter
            	    {
            	    COMMANDCHAR188=(Token)match(input,COMMANDCHAR,FOLLOW_COMMANDCHAR_in_setLoopCommand2776); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    COMMANDCHAR188_tree = (CommonTree)adaptor.create(COMMANDCHAR188);
            	    adaptor.addChild(root_0, COMMANDCHAR188_tree);
            	    }
            	    pushFollow(FOLLOW_iter_in_setLoopCommand2778);
            	    iter189=iter();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, iter189.getTree());

            	    }

            	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:718:37: ( ws | nl )*
            	    loop131:
            	    do {
            	        int alt131=3;
            	        int LA131_0 = input.LA(1);

            	        if ( (LA131_0==WS) ) {
            	            alt131=1;
            	        }
            	        else if ( (LA131_0==NL) ) {
            	            alt131=2;
            	        }


            	        switch (alt131) {
            	    	case 1 :
            	    	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:718:38: ws
            	    	    {
            	    	    pushFollow(FOLLOW_ws_in_setLoopCommand2790);
            	    	    ws190=ws();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, ws190.getTree());

            	    	    }
            	    	    break;
            	    	case 2 :
            	    	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:718:43: nl
            	    	    {
            	    	    pushFollow(FOLLOW_nl_in_setLoopCommand2794);
            	    	    nl191=nl();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nl191.getTree());

            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop131;
            	        }
            	    } while (true);


            	    }
            	    break;

            	default :
            	    break loop132;
                }
            } while (true);

            COMMANDCHAR192=(Token)match(input,COMMANDCHAR,FOLLOW_COMMANDCHAR_in_setLoopCommand2813); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            COMMANDCHAR192_tree = (CommonTree)adaptor.create(COMMANDCHAR192);
            adaptor.addChild(root_0, COMMANDCHAR192_tree);
            }
            ENDSETLOOP193=(Token)match(input,ENDSETLOOP,FOLLOW_ENDSETLOOP_in_setLoopCommand2815); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ENDSETLOOP193_tree = (CommonTree)adaptor.create(ENDSETLOOP193);
            adaptor.addChild(root_0, ENDSETLOOP193_tree);
            }
            if ( state.backtracking==0 ) {

                       // execute the setloop after the data has been gathered
                       if (Utils.canWrite()){
                           new SetLoopCommand((i!=null?i.getText():null), s.getLine()).execute();
                       }
                    
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException ex) {
                  throw new ARTSyntaxException("Syntax error in File: " + Utils.getCurrentFile() + " line: " + (ex.line == 0 ? Utils.getExpressionLine() : ex.line) + " (" + ex.getStackTrace()[0].getMethodName() + ")");
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "setLoopCommand"

    public static class setloopVars_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "setloopVars"
    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:730:1: setloopVars : VARS ( ws | nl )* ( ( COMMANDCHAR varDesc ) ( ws | nl )* | ( COMMANDCHAR varBreakCommand ) ( ws | nl )* )* COMMANDCHAR ENDVARS ;
    public final commandParser.setloopVars_return setloopVars() throws RecognitionException {
        commandParser.setloopVars_return retval = new commandParser.setloopVars_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token VARS194=null;
        Token COMMANDCHAR197=null;
        Token COMMANDCHAR201=null;
        Token COMMANDCHAR205=null;
        Token ENDVARS206=null;
        commandParser.ws_return ws195 = null;

        commandParser.nl_return nl196 = null;

        commandParser.varDesc_return varDesc198 = null;

        commandParser.ws_return ws199 = null;

        commandParser.nl_return nl200 = null;

        commandParser.varBreakCommand_return varBreakCommand202 = null;

        commandParser.ws_return ws203 = null;

        commandParser.nl_return nl204 = null;


        CommonTree VARS194_tree=null;
        CommonTree COMMANDCHAR197_tree=null;
        CommonTree COMMANDCHAR201_tree=null;
        CommonTree COMMANDCHAR205_tree=null;
        CommonTree ENDVARS206_tree=null;

        try {
            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:731:5: ( VARS ( ws | nl )* ( ( COMMANDCHAR varDesc ) ( ws | nl )* | ( COMMANDCHAR varBreakCommand ) ( ws | nl )* )* COMMANDCHAR ENDVARS )
            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:731:7: VARS ( ws | nl )* ( ( COMMANDCHAR varDesc ) ( ws | nl )* | ( COMMANDCHAR varBreakCommand ) ( ws | nl )* )* COMMANDCHAR ENDVARS
            {
            root_0 = (CommonTree)adaptor.nil();

            VARS194=(Token)match(input,VARS,FOLLOW_VARS_in_setloopVars2846); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            VARS194_tree = (CommonTree)adaptor.create(VARS194);
            adaptor.addChild(root_0, VARS194_tree);
            }
            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:731:12: ( ws | nl )*
            loop133:
            do {
                int alt133=3;
                int LA133_0 = input.LA(1);

                if ( (LA133_0==WS) ) {
                    alt133=1;
                }
                else if ( (LA133_0==NL) ) {
                    alt133=2;
                }


                switch (alt133) {
            	case 1 :
            	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:731:13: ws
            	    {
            	    pushFollow(FOLLOW_ws_in_setloopVars2849);
            	    ws195=ws();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, ws195.getTree());

            	    }
            	    break;
            	case 2 :
            	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:731:18: nl
            	    {
            	    pushFollow(FOLLOW_nl_in_setloopVars2853);
            	    nl196=nl();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nl196.getTree());

            	    }
            	    break;

            	default :
            	    break loop133;
                }
            } while (true);

            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:732:7: ( ( COMMANDCHAR varDesc ) ( ws | nl )* | ( COMMANDCHAR varBreakCommand ) ( ws | nl )* )*
            loop136:
            do {
                int alt136=3;
                int LA136_0 = input.LA(1);

                if ( (LA136_0==COMMANDCHAR) ) {
                    int LA136_1 = input.LA(2);

                    if ( (LA136_1==VAR) ) {
                        alt136=1;
                    }
                    else if ( (LA136_1==EXTENDEDBREAK||LA136_1==BREAK) ) {
                        alt136=2;
                    }


                }


                switch (alt136) {
            	case 1 :
            	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:732:9: ( COMMANDCHAR varDesc ) ( ws | nl )*
            	    {
            	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:732:9: ( COMMANDCHAR varDesc )
            	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:732:10: COMMANDCHAR varDesc
            	    {
            	    COMMANDCHAR197=(Token)match(input,COMMANDCHAR,FOLLOW_COMMANDCHAR_in_setloopVars2866); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    COMMANDCHAR197_tree = (CommonTree)adaptor.create(COMMANDCHAR197);
            	    adaptor.addChild(root_0, COMMANDCHAR197_tree);
            	    }
            	    pushFollow(FOLLOW_varDesc_in_setloopVars2868);
            	    varDesc198=varDesc();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, varDesc198.getTree());

            	    }

            	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:732:31: ( ws | nl )*
            	    loop134:
            	    do {
            	        int alt134=3;
            	        int LA134_0 = input.LA(1);

            	        if ( (LA134_0==WS) ) {
            	            alt134=1;
            	        }
            	        else if ( (LA134_0==NL) ) {
            	            alt134=2;
            	        }


            	        switch (alt134) {
            	    	case 1 :
            	    	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:732:32: ws
            	    	    {
            	    	    pushFollow(FOLLOW_ws_in_setloopVars2872);
            	    	    ws199=ws();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, ws199.getTree());

            	    	    }
            	    	    break;
            	    	case 2 :
            	    	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:732:37: nl
            	    	    {
            	    	    pushFollow(FOLLOW_nl_in_setloopVars2876);
            	    	    nl200=nl();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nl200.getTree());

            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop134;
            	        }
            	    } while (true);


            	    }
            	    break;
            	case 2 :
            	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:733:9: ( COMMANDCHAR varBreakCommand ) ( ws | nl )*
            	    {
            	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:733:9: ( COMMANDCHAR varBreakCommand )
            	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:733:10: COMMANDCHAR varBreakCommand
            	    {
            	    COMMANDCHAR201=(Token)match(input,COMMANDCHAR,FOLLOW_COMMANDCHAR_in_setloopVars2889); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    COMMANDCHAR201_tree = (CommonTree)adaptor.create(COMMANDCHAR201);
            	    adaptor.addChild(root_0, COMMANDCHAR201_tree);
            	    }
            	    pushFollow(FOLLOW_varBreakCommand_in_setloopVars2891);
            	    varBreakCommand202=varBreakCommand();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, varBreakCommand202.getTree());

            	    }

            	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:733:39: ( ws | nl )*
            	    loop135:
            	    do {
            	        int alt135=3;
            	        int LA135_0 = input.LA(1);

            	        if ( (LA135_0==WS) ) {
            	            alt135=1;
            	        }
            	        else if ( (LA135_0==NL) ) {
            	            alt135=2;
            	        }


            	        switch (alt135) {
            	    	case 1 :
            	    	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:733:40: ws
            	    	    {
            	    	    pushFollow(FOLLOW_ws_in_setloopVars2895);
            	    	    ws203=ws();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, ws203.getTree());

            	    	    }
            	    	    break;
            	    	case 2 :
            	    	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:733:45: nl
            	    	    {
            	    	    pushFollow(FOLLOW_nl_in_setloopVars2899);
            	    	    nl204=nl();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nl204.getTree());

            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop135;
            	        }
            	    } while (true);


            	    }
            	    break;

            	default :
            	    break loop136;
                }
            } while (true);

            COMMANDCHAR205=(Token)match(input,COMMANDCHAR,FOLLOW_COMMANDCHAR_in_setloopVars2918); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            COMMANDCHAR205_tree = (CommonTree)adaptor.create(COMMANDCHAR205);
            adaptor.addChild(root_0, COMMANDCHAR205_tree);
            }
            ENDVARS206=(Token)match(input,ENDVARS,FOLLOW_ENDVARS_in_setloopVars2920); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ENDVARS206_tree = (CommonTree)adaptor.create(ENDVARS206);
            adaptor.addChild(root_0, ENDVARS206_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException ex) {
                  throw new ARTSyntaxException("Syntax error in File: " + Utils.getCurrentFile() + " line: " + (ex.line == 0 ? Utils.getExpressionLine() : ex.line) + " (" + ex.getStackTrace()[0].getMethodName() + ")");
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "setloopVars"

    public static class varDesc_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "varDesc"
    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:738:1: varDesc : VAR ( ws )* i= IDENT ( ws )* ( '=' ( ws )* e= expression ( ws )* )? ( ws | nl )* ;
    public final commandParser.varDesc_return varDesc() throws RecognitionException {
        commandParser.varDesc_return retval = new commandParser.varDesc_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token VAR207=null;
        Token char_literal210=null;
        commandParser.expression_return e = null;

        commandParser.ws_return ws208 = null;

        commandParser.ws_return ws209 = null;

        commandParser.ws_return ws211 = null;

        commandParser.ws_return ws212 = null;

        commandParser.ws_return ws213 = null;

        commandParser.nl_return nl214 = null;


        CommonTree i_tree=null;
        CommonTree VAR207_tree=null;
        CommonTree char_literal210_tree=null;

        try {
            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:739:3: ( VAR ( ws )* i= IDENT ( ws )* ( '=' ( ws )* e= expression ( ws )* )? ( ws | nl )* )
            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:739:5: VAR ( ws )* i= IDENT ( ws )* ( '=' ( ws )* e= expression ( ws )* )? ( ws | nl )*
            {
            root_0 = (CommonTree)adaptor.nil();

            VAR207=(Token)match(input,VAR,FOLLOW_VAR_in_varDesc2935); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            VAR207_tree = (CommonTree)adaptor.create(VAR207);
            adaptor.addChild(root_0, VAR207_tree);
            }
            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:739:9: ( ws )*
            loop137:
            do {
                int alt137=2;
                int LA137_0 = input.LA(1);

                if ( (LA137_0==WS) ) {
                    alt137=1;
                }


                switch (alt137) {
            	case 1 :
            	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:0:0: ws
            	    {
            	    pushFollow(FOLLOW_ws_in_varDesc2937);
            	    ws208=ws();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, ws208.getTree());

            	    }
            	    break;

            	default :
            	    break loop137;
                }
            } while (true);

            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_varDesc2942); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            i_tree = (CommonTree)adaptor.create(i);
            adaptor.addChild(root_0, i_tree);
            }
            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:739:22: ( ws )*
            loop138:
            do {
                int alt138=2;
                int LA138_0 = input.LA(1);

                if ( (LA138_0==WS) ) {
                    int LA138_2 = input.LA(2);

                    if ( (synpred202_command()) ) {
                        alt138=1;
                    }


                }


                switch (alt138) {
            	case 1 :
            	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:0:0: ws
            	    {
            	    pushFollow(FOLLOW_ws_in_varDesc2945);
            	    ws209=ws();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, ws209.getTree());

            	    }
            	    break;

            	default :
            	    break loop138;
                }
            } while (true);

            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:739:26: ( '=' ( ws )* e= expression ( ws )* )?
            int alt141=2;
            alt141 = dfa141.predict(input);
            switch (alt141) {
                case 1 :
                    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:739:27: '=' ( ws )* e= expression ( ws )*
                    {
                    char_literal210=(Token)match(input,84,FOLLOW_84_in_varDesc2949); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal210_tree = (CommonTree)adaptor.create(char_literal210);
                    adaptor.addChild(root_0, char_literal210_tree);
                    }
                    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:739:31: ( ws )*
                    loop139:
                    do {
                        int alt139=2;
                        int LA139_0 = input.LA(1);

                        if ( (LA139_0==WS) ) {
                            int LA139_2 = input.LA(2);

                            if ( (synpred203_command()) ) {
                                alt139=1;
                            }


                        }


                        switch (alt139) {
                    	case 1 :
                    	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:0:0: ws
                    	    {
                    	    pushFollow(FOLLOW_ws_in_varDesc2951);
                    	    ws211=ws();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, ws211.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop139;
                        }
                    } while (true);

                    pushFollow(FOLLOW_expression_in_varDesc2956);
                    e=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, e.getTree());
                    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:739:48: ( ws )*
                    loop140:
                    do {
                        int alt140=2;
                        int LA140_0 = input.LA(1);

                        if ( (LA140_0==WS) ) {
                            int LA140_1 = input.LA(2);

                            if ( (synpred204_command()) ) {
                                alt140=1;
                            }


                        }


                        switch (alt140) {
                    	case 1 :
                    	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:0:0: ws
                    	    {
                    	    pushFollow(FOLLOW_ws_in_varDesc2958);
                    	    ws212=ws();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, ws212.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop140;
                        }
                    } while (true);


                    }
                    break;

            }

            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:739:54: ( ws | nl )*
            loop142:
            do {
                int alt142=3;
                int LA142_0 = input.LA(1);

                if ( (LA142_0==WS) ) {
                    int LA142_1 = input.LA(2);

                    if ( (synpred206_command()) ) {
                        alt142=1;
                    }


                }
                else if ( (LA142_0==NL) ) {
                    int LA142_3 = input.LA(2);

                    if ( (synpred207_command()) ) {
                        alt142=2;
                    }


                }


                switch (alt142) {
            	case 1 :
            	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:739:55: ws
            	    {
            	    pushFollow(FOLLOW_ws_in_varDesc2964);
            	    ws213=ws();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, ws213.getTree());

            	    }
            	    break;
            	case 2 :
            	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:739:60: nl
            	    {
            	    pushFollow(FOLLOW_nl_in_varDesc2968);
            	    nl214=nl();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nl214.getTree());

            	    }
            	    break;

            	default :
            	    break loop142;
                }
            } while (true);

            if ( state.backtracking==0 ) {

                       //add the new variable to the setloop
                       if (Utils.canWrite()){
                           SetLoopInfo.addVariableToSetLoop((i!=null?i.getText():null), (e!=null?input.toString(e.start,e.stop):null));
                       }
                  
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException ex) {
                  throw new ARTSyntaxException("Syntax error in File: " + Utils.getCurrentFile() + " line: " + (ex.line == 0 ? Utils.getExpressionLine() : ex.line) + " (" + ex.getStackTrace()[0].getMethodName() + ")");
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "varDesc"

    public static class iter_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "iter"
    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:750:1: iter : ITER ( ws )* i= IDENT ( ws )* '=' ( ws )* e= expression ( ws )* ( ',' ( ws )* i1= IDENT ( ws )* '=' ( ws )* e1= expression ( ws )* )* ( ws | nl )* ;
    public final commandParser.iter_return iter() throws RecognitionException {
        commandParser.iter_return retval = new commandParser.iter_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token i1=null;
        Token ITER215=null;
        Token char_literal218=null;
        Token char_literal221=null;
        Token char_literal224=null;
        commandParser.expression_return e = null;

        commandParser.expression_return e1 = null;

        commandParser.ws_return ws216 = null;

        commandParser.ws_return ws217 = null;

        commandParser.ws_return ws219 = null;

        commandParser.ws_return ws220 = null;

        commandParser.ws_return ws222 = null;

        commandParser.ws_return ws223 = null;

        commandParser.ws_return ws225 = null;

        commandParser.ws_return ws226 = null;

        commandParser.ws_return ws227 = null;

        commandParser.nl_return nl228 = null;


        CommonTree i_tree=null;
        CommonTree i1_tree=null;
        CommonTree ITER215_tree=null;
        CommonTree char_literal218_tree=null;
        CommonTree char_literal221_tree=null;
        CommonTree char_literal224_tree=null;

        Map<String, String> iterVars = new HashMap<String,String>();
        try {
            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:752:3: ( ITER ( ws )* i= IDENT ( ws )* '=' ( ws )* e= expression ( ws )* ( ',' ( ws )* i1= IDENT ( ws )* '=' ( ws )* e1= expression ( ws )* )* ( ws | nl )* )
            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:752:5: ITER ( ws )* i= IDENT ( ws )* '=' ( ws )* e= expression ( ws )* ( ',' ( ws )* i1= IDENT ( ws )* '=' ( ws )* e1= expression ( ws )* )* ( ws | nl )*
            {
            root_0 = (CommonTree)adaptor.nil();

            ITER215=(Token)match(input,ITER,FOLLOW_ITER_in_iter3003); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ITER215_tree = (CommonTree)adaptor.create(ITER215);
            adaptor.addChild(root_0, ITER215_tree);
            }
            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:752:10: ( ws )*
            loop143:
            do {
                int alt143=2;
                int LA143_0 = input.LA(1);

                if ( (LA143_0==WS) ) {
                    alt143=1;
                }


                switch (alt143) {
            	case 1 :
            	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:0:0: ws
            	    {
            	    pushFollow(FOLLOW_ws_in_iter3005);
            	    ws216=ws();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, ws216.getTree());

            	    }
            	    break;

            	default :
            	    break loop143;
                }
            } while (true);

            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_iter3010); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            i_tree = (CommonTree)adaptor.create(i);
            adaptor.addChild(root_0, i_tree);
            }
            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:752:22: ( ws )*
            loop144:
            do {
                int alt144=2;
                int LA144_0 = input.LA(1);

                if ( (LA144_0==WS) ) {
                    alt144=1;
                }


                switch (alt144) {
            	case 1 :
            	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:0:0: ws
            	    {
            	    pushFollow(FOLLOW_ws_in_iter3012);
            	    ws217=ws();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, ws217.getTree());

            	    }
            	    break;

            	default :
            	    break loop144;
                }
            } while (true);

            char_literal218=(Token)match(input,84,FOLLOW_84_in_iter3015); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal218_tree = (CommonTree)adaptor.create(char_literal218);
            adaptor.addChild(root_0, char_literal218_tree);
            }
            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:752:30: ( ws )*
            loop145:
            do {
                int alt145=2;
                int LA145_0 = input.LA(1);

                if ( (LA145_0==WS) ) {
                    int LA145_2 = input.LA(2);

                    if ( (synpred210_command()) ) {
                        alt145=1;
                    }


                }


                switch (alt145) {
            	case 1 :
            	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:0:0: ws
            	    {
            	    pushFollow(FOLLOW_ws_in_iter3017);
            	    ws219=ws();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, ws219.getTree());

            	    }
            	    break;

            	default :
            	    break loop145;
                }
            } while (true);

            pushFollow(FOLLOW_expression_in_iter3022);
            e=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, e.getTree());
            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:752:47: ( ws )*
            loop146:
            do {
                int alt146=2;
                int LA146_0 = input.LA(1);

                if ( (LA146_0==WS) ) {
                    int LA146_2 = input.LA(2);

                    if ( (synpred211_command()) ) {
                        alt146=1;
                    }


                }


                switch (alt146) {
            	case 1 :
            	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:0:0: ws
            	    {
            	    pushFollow(FOLLOW_ws_in_iter3024);
            	    ws220=ws();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, ws220.getTree());

            	    }
            	    break;

            	default :
            	    break loop146;
                }
            } while (true);

            if ( state.backtracking==0 ) {
               if (Utils.canWrite()){ iterVars.put((i!=null?i.getText():null), (e!=null?input.toString(e.start,e.stop):null));} 
            }
            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:753:3: ( ',' ( ws )* i1= IDENT ( ws )* '=' ( ws )* e1= expression ( ws )* )*
            loop151:
            do {
                int alt151=2;
                alt151 = dfa151.predict(input);
                switch (alt151) {
            	case 1 :
            	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:753:4: ',' ( ws )* i1= IDENT ( ws )* '=' ( ws )* e1= expression ( ws )*
            	    {
            	    char_literal221=(Token)match(input,85,FOLLOW_85_in_iter3033); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal221_tree = (CommonTree)adaptor.create(char_literal221);
            	    adaptor.addChild(root_0, char_literal221_tree);
            	    }
            	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:753:8: ( ws )*
            	    loop147:
            	    do {
            	        int alt147=2;
            	        int LA147_0 = input.LA(1);

            	        if ( (LA147_0==WS) ) {
            	            alt147=1;
            	        }


            	        switch (alt147) {
            	    	case 1 :
            	    	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:0:0: ws
            	    	    {
            	    	    pushFollow(FOLLOW_ws_in_iter3035);
            	    	    ws222=ws();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, ws222.getTree());

            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop147;
            	        }
            	    } while (true);

            	    i1=(Token)match(input,IDENT,FOLLOW_IDENT_in_iter3040); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    i1_tree = (CommonTree)adaptor.create(i1);
            	    adaptor.addChild(root_0, i1_tree);
            	    }
            	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:753:21: ( ws )*
            	    loop148:
            	    do {
            	        int alt148=2;
            	        int LA148_0 = input.LA(1);

            	        if ( (LA148_0==WS) ) {
            	            alt148=1;
            	        }


            	        switch (alt148) {
            	    	case 1 :
            	    	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:0:0: ws
            	    	    {
            	    	    pushFollow(FOLLOW_ws_in_iter3042);
            	    	    ws223=ws();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, ws223.getTree());

            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop148;
            	        }
            	    } while (true);

            	    char_literal224=(Token)match(input,84,FOLLOW_84_in_iter3045); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal224_tree = (CommonTree)adaptor.create(char_literal224);
            	    adaptor.addChild(root_0, char_literal224_tree);
            	    }
            	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:753:29: ( ws )*
            	    loop149:
            	    do {
            	        int alt149=2;
            	        int LA149_0 = input.LA(1);

            	        if ( (LA149_0==WS) ) {
            	            int LA149_2 = input.LA(2);

            	            if ( (synpred214_command()) ) {
            	                alt149=1;
            	            }


            	        }


            	        switch (alt149) {
            	    	case 1 :
            	    	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:0:0: ws
            	    	    {
            	    	    pushFollow(FOLLOW_ws_in_iter3047);
            	    	    ws225=ws();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, ws225.getTree());

            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop149;
            	        }
            	    } while (true);

            	    pushFollow(FOLLOW_expression_in_iter3052);
            	    e1=expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, e1.getTree());
            	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:753:47: ( ws )*
            	    loop150:
            	    do {
            	        int alt150=2;
            	        int LA150_0 = input.LA(1);

            	        if ( (LA150_0==WS) ) {
            	            int LA150_1 = input.LA(2);

            	            if ( (synpred215_command()) ) {
            	                alt150=1;
            	            }


            	        }


            	        switch (alt150) {
            	    	case 1 :
            	    	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:0:0: ws
            	    	    {
            	    	    pushFollow(FOLLOW_ws_in_iter3054);
            	    	    ws226=ws();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, ws226.getTree());

            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop150;
            	        }
            	    } while (true);

            	    if ( state.backtracking==0 ) {
            	       if (Utils.canWrite()){ iterVars.put((i1!=null?i1.getText():null), (e1!=null?input.toString(e1.start,e1.stop):null));} 
            	    }

            	    }
            	    break;

            	default :
            	    break loop151;
                }
            } while (true);

            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:753:116: ( ws | nl )*
            loop152:
            do {
                int alt152=3;
                int LA152_0 = input.LA(1);

                if ( (LA152_0==WS) ) {
                    int LA152_1 = input.LA(2);

                    if ( (synpred217_command()) ) {
                        alt152=1;
                    }


                }
                else if ( (LA152_0==NL) ) {
                    int LA152_3 = input.LA(2);

                    if ( (synpred218_command()) ) {
                        alt152=2;
                    }


                }


                switch (alt152) {
            	case 1 :
            	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:753:117: ws
            	    {
            	    pushFollow(FOLLOW_ws_in_iter3063);
            	    ws227=ws();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, ws227.getTree());

            	    }
            	    break;
            	case 2 :
            	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:753:122: nl
            	    {
            	    pushFollow(FOLLOW_nl_in_iter3067);
            	    nl228=nl();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nl228.getTree());

            	    }
            	    break;

            	default :
            	    break loop152;
                }
            } while (true);

            if ( state.backtracking==0 ) {

                      if (Utils.canWrite())
                      { 
                          SetLoopInfo.addIter(iterVars);
                      } 
                  
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException ex) {
                  throw new ARTSyntaxException("Syntax error in File: " + Utils.getCurrentFile() + " line: " + (ex.line == 0 ? Utils.getExpressionLine() : ex.line) + " (" + ex.getStackTrace()[0].getMethodName() + ")");
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "iter"

    public static class iterBreakCommand_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "iterBreakCommand"
    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:762:1: iterBreakCommand : ( ( EXTENDEDBREAK ( ws )* e1= expression ( ws | nl )* cc= COMMANDCHAR i= iter (w= ws )* ( ws | nl )* COMMANDCHAR ENDBREAK ) | BREAK ( ws )* e2= expression ( ws | nl )* );
    public final commandParser.iterBreakCommand_return iterBreakCommand() throws RecognitionException {
        commandParser.iterBreakCommand_return retval = new commandParser.iterBreakCommand_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token cc=null;
        Token EXTENDEDBREAK229=null;
        Token COMMANDCHAR235=null;
        Token ENDBREAK236=null;
        Token BREAK237=null;
        commandParser.expression_return e1 = null;

        commandParser.iter_return i = null;

        commandParser.ws_return w = null;

        commandParser.expression_return e2 = null;

        commandParser.ws_return ws230 = null;

        commandParser.ws_return ws231 = null;

        commandParser.nl_return nl232 = null;

        commandParser.ws_return ws233 = null;

        commandParser.nl_return nl234 = null;

        commandParser.ws_return ws238 = null;

        commandParser.ws_return ws239 = null;

        commandParser.nl_return nl240 = null;


        CommonTree cc_tree=null;
        CommonTree EXTENDEDBREAK229_tree=null;
        CommonTree COMMANDCHAR235_tree=null;
        CommonTree ENDBREAK236_tree=null;
        CommonTree BREAK237_tree=null;

         StringBuilder sb = new StringBuilder(); 
        try {
            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:764:4: ( ( EXTENDEDBREAK ( ws )* e1= expression ( ws | nl )* cc= COMMANDCHAR i= iter (w= ws )* ( ws | nl )* COMMANDCHAR ENDBREAK ) | BREAK ( ws )* e2= expression ( ws | nl )* )
            int alt159=2;
            int LA159_0 = input.LA(1);

            if ( (LA159_0==EXTENDEDBREAK) ) {
                alt159=1;
            }
            else if ( (LA159_0==BREAK) ) {
                alt159=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 159, 0, input);

                throw nvae;
            }
            switch (alt159) {
                case 1 :
                    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:765:6: ( EXTENDEDBREAK ( ws )* e1= expression ( ws | nl )* cc= COMMANDCHAR i= iter (w= ws )* ( ws | nl )* COMMANDCHAR ENDBREAK )
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:765:6: ( EXTENDEDBREAK ( ws )* e1= expression ( ws | nl )* cc= COMMANDCHAR i= iter (w= ws )* ( ws | nl )* COMMANDCHAR ENDBREAK )
                    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:765:7: EXTENDEDBREAK ( ws )* e1= expression ( ws | nl )* cc= COMMANDCHAR i= iter (w= ws )* ( ws | nl )* COMMANDCHAR ENDBREAK
                    {
                    EXTENDEDBREAK229=(Token)match(input,EXTENDEDBREAK,FOLLOW_EXTENDEDBREAK_in_iterBreakCommand3106); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    EXTENDEDBREAK229_tree = (CommonTree)adaptor.create(EXTENDEDBREAK229);
                    adaptor.addChild(root_0, EXTENDEDBREAK229_tree);
                    }
                    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:765:21: ( ws )*
                    loop153:
                    do {
                        int alt153=2;
                        int LA153_0 = input.LA(1);

                        if ( (LA153_0==WS) ) {
                            int LA153_2 = input.LA(2);

                            if ( (synpred219_command()) ) {
                                alt153=1;
                            }


                        }


                        switch (alt153) {
                    	case 1 :
                    	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:0:0: ws
                    	    {
                    	    pushFollow(FOLLOW_ws_in_iterBreakCommand3108);
                    	    ws230=ws();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, ws230.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop153;
                        }
                    } while (true);

                    pushFollow(FOLLOW_expression_in_iterBreakCommand3113);
                    e1=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, e1.getTree());
                    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:765:40: ( ws | nl )*
                    loop154:
                    do {
                        int alt154=3;
                        int LA154_0 = input.LA(1);

                        if ( (LA154_0==WS) ) {
                            alt154=1;
                        }
                        else if ( (LA154_0==NL) ) {
                            alt154=2;
                        }


                        switch (alt154) {
                    	case 1 :
                    	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:765:41: ws
                    	    {
                    	    pushFollow(FOLLOW_ws_in_iterBreakCommand3117);
                    	    ws231=ws();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, ws231.getTree());

                    	    }
                    	    break;
                    	case 2 :
                    	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:765:46: nl
                    	    {
                    	    pushFollow(FOLLOW_nl_in_iterBreakCommand3121);
                    	    nl232=nl();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nl232.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop154;
                        }
                    } while (true);

                    if ( state.backtracking==0 ) {
                       Utils.addWriteblocker("break"); 
                    }
                    cc=(Token)match(input,COMMANDCHAR,FOLLOW_COMMANDCHAR_in_iterBreakCommand3150); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    cc_tree = (CommonTree)adaptor.create(cc);
                    adaptor.addChild(root_0, cc_tree);
                    }
                    pushFollow(FOLLOW_iter_in_iterBreakCommand3154);
                    i=iter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, i.getTree());
                    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:769:31: (w= ws )*
                    loop155:
                    do {
                        int alt155=2;
                        int LA155_0 = input.LA(1);

                        if ( (LA155_0==WS) ) {
                            int LA155_1 = input.LA(2);

                            if ( (synpred222_command()) ) {
                                alt155=1;
                            }


                        }


                        switch (alt155) {
                    	case 1 :
                    	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:0:0: w= ws
                    	    {
                    	    pushFollow(FOLLOW_ws_in_iterBreakCommand3158);
                    	    w=ws();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, w.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop155;
                        }
                    } while (true);

                    if ( state.backtracking==0 ) {
                       append(sb, (cc!=null?cc.getText():null)); append(sb, (i!=null?input.toString(i.start,i.stop):null)); append(sb, (w!=null?input.toString(w.start,w.stop):null)); 
                    }
                    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:770:8: ( ws | nl )*
                    loop156:
                    do {
                        int alt156=3;
                        int LA156_0 = input.LA(1);

                        if ( (LA156_0==WS) ) {
                            alt156=1;
                        }
                        else if ( (LA156_0==NL) ) {
                            alt156=2;
                        }


                        switch (alt156) {
                    	case 1 :
                    	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:770:9: ws
                    	    {
                    	    pushFollow(FOLLOW_ws_in_iterBreakCommand3171);
                    	    ws233=ws();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, ws233.getTree());

                    	    }
                    	    break;
                    	case 2 :
                    	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:770:14: nl
                    	    {
                    	    pushFollow(FOLLOW_nl_in_iterBreakCommand3175);
                    	    nl234=nl();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nl234.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop156;
                        }
                    } while (true);

                    COMMANDCHAR235=(Token)match(input,COMMANDCHAR,FOLLOW_COMMANDCHAR_in_iterBreakCommand3192); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COMMANDCHAR235_tree = (CommonTree)adaptor.create(COMMANDCHAR235);
                    adaptor.addChild(root_0, COMMANDCHAR235_tree);
                    }
                    ENDBREAK236=(Token)match(input,ENDBREAK,FOLLOW_ENDBREAK_in_iterBreakCommand3194); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ENDBREAK236_tree = (CommonTree)adaptor.create(ENDBREAK236);
                    adaptor.addChild(root_0, ENDBREAK236_tree);
                    }

                    }

                    if ( state.backtracking==0 ) {
                       Utils.removeWriteblocker("break"); 
                    }
                    if ( state.backtracking==0 ) {

                                 //Break command (extended)
                                 if (Utils.canWrite()){
                                     new SetLoopIterBreak((e1!=null?input.toString(e1.start,e1.stop):null), sb.toString()).execute();
                                 } 
                             
                    }

                    }
                    break;
                case 2 :
                    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:783:7: BREAK ( ws )* e2= expression ( ws | nl )*
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    BREAK237=(Token)match(input,BREAK,FOLLOW_BREAK_in_iterBreakCommand3238); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    BREAK237_tree = (CommonTree)adaptor.create(BREAK237);
                    adaptor.addChild(root_0, BREAK237_tree);
                    }
                    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:783:13: ( ws )*
                    loop157:
                    do {
                        int alt157=2;
                        int LA157_0 = input.LA(1);

                        if ( (LA157_0==WS) ) {
                            int LA157_2 = input.LA(2);

                            if ( (synpred226_command()) ) {
                                alt157=1;
                            }


                        }


                        switch (alt157) {
                    	case 1 :
                    	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:0:0: ws
                    	    {
                    	    pushFollow(FOLLOW_ws_in_iterBreakCommand3240);
                    	    ws238=ws();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, ws238.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop157;
                        }
                    } while (true);

                    pushFollow(FOLLOW_expression_in_iterBreakCommand3245);
                    e2=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, e2.getTree());
                    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:783:32: ( ws | nl )*
                    loop158:
                    do {
                        int alt158=3;
                        int LA158_0 = input.LA(1);

                        if ( (LA158_0==WS) ) {
                            int LA158_1 = input.LA(2);

                            if ( (synpred227_command()) ) {
                                alt158=1;
                            }


                        }
                        else if ( (LA158_0==NL) ) {
                            int LA158_2 = input.LA(2);

                            if ( (synpred228_command()) ) {
                                alt158=2;
                            }


                        }


                        switch (alt158) {
                    	case 1 :
                    	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:783:33: ws
                    	    {
                    	    pushFollow(FOLLOW_ws_in_iterBreakCommand3249);
                    	    ws239=ws();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, ws239.getTree());

                    	    }
                    	    break;
                    	case 2 :
                    	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:783:38: nl
                    	    {
                    	    pushFollow(FOLLOW_nl_in_iterBreakCommand3253);
                    	    nl240=nl();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nl240.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop158;
                        }
                    } while (true);

                    if ( state.backtracking==0 ) {

                                  //Break command
                                  if (Utils.canWrite()){
                                      new SetLoopIterBreak((e2!=null?input.toString(e2.start,e2.stop):null)).execute();
                                  }
                             
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException ex) {
                  throw new ARTSyntaxException("Syntax error in File: " + Utils.getCurrentFile() + " line: " + (ex.line == 0 ? Utils.getExpressionLine() : ex.line) + " (" + ex.getStackTrace()[0].getMethodName() + ")");
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "iterBreakCommand"

    public static class varBreakCommand_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "varBreakCommand"
    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:793:1: varBreakCommand : ( ( EXTENDEDBREAK ( ws )* e1= expression ( ws | nl )* cc= COMMANDCHAR v= varDesc (w= ws )* ( ws | nl )* COMMANDCHAR ENDBREAK ) | BREAK ( ws )* e2= expression ( ws | nl )* );
    public final commandParser.varBreakCommand_return varBreakCommand() throws RecognitionException {
        commandParser.varBreakCommand_return retval = new commandParser.varBreakCommand_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token cc=null;
        Token EXTENDEDBREAK241=null;
        Token COMMANDCHAR247=null;
        Token ENDBREAK248=null;
        Token BREAK249=null;
        commandParser.expression_return e1 = null;

        commandParser.varDesc_return v = null;

        commandParser.ws_return w = null;

        commandParser.expression_return e2 = null;

        commandParser.ws_return ws242 = null;

        commandParser.ws_return ws243 = null;

        commandParser.nl_return nl244 = null;

        commandParser.ws_return ws245 = null;

        commandParser.nl_return nl246 = null;

        commandParser.ws_return ws250 = null;

        commandParser.ws_return ws251 = null;

        commandParser.nl_return nl252 = null;


        CommonTree cc_tree=null;
        CommonTree EXTENDEDBREAK241_tree=null;
        CommonTree COMMANDCHAR247_tree=null;
        CommonTree ENDBREAK248_tree=null;
        CommonTree BREAK249_tree=null;

         StringBuilder sb = new StringBuilder(); 
        try {
            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:795:4: ( ( EXTENDEDBREAK ( ws )* e1= expression ( ws | nl )* cc= COMMANDCHAR v= varDesc (w= ws )* ( ws | nl )* COMMANDCHAR ENDBREAK ) | BREAK ( ws )* e2= expression ( ws | nl )* )
            int alt166=2;
            int LA166_0 = input.LA(1);

            if ( (LA166_0==EXTENDEDBREAK) ) {
                alt166=1;
            }
            else if ( (LA166_0==BREAK) ) {
                alt166=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 166, 0, input);

                throw nvae;
            }
            switch (alt166) {
                case 1 :
                    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:796:6: ( EXTENDEDBREAK ( ws )* e1= expression ( ws | nl )* cc= COMMANDCHAR v= varDesc (w= ws )* ( ws | nl )* COMMANDCHAR ENDBREAK )
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:796:6: ( EXTENDEDBREAK ( ws )* e1= expression ( ws | nl )* cc= COMMANDCHAR v= varDesc (w= ws )* ( ws | nl )* COMMANDCHAR ENDBREAK )
                    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:796:7: EXTENDEDBREAK ( ws )* e1= expression ( ws | nl )* cc= COMMANDCHAR v= varDesc (w= ws )* ( ws | nl )* COMMANDCHAR ENDBREAK
                    {
                    EXTENDEDBREAK241=(Token)match(input,EXTENDEDBREAK,FOLLOW_EXTENDEDBREAK_in_varBreakCommand3303); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    EXTENDEDBREAK241_tree = (CommonTree)adaptor.create(EXTENDEDBREAK241);
                    adaptor.addChild(root_0, EXTENDEDBREAK241_tree);
                    }
                    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:796:21: ( ws )*
                    loop160:
                    do {
                        int alt160=2;
                        int LA160_0 = input.LA(1);

                        if ( (LA160_0==WS) ) {
                            int LA160_2 = input.LA(2);

                            if ( (synpred229_command()) ) {
                                alt160=1;
                            }


                        }


                        switch (alt160) {
                    	case 1 :
                    	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:0:0: ws
                    	    {
                    	    pushFollow(FOLLOW_ws_in_varBreakCommand3305);
                    	    ws242=ws();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, ws242.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop160;
                        }
                    } while (true);

                    pushFollow(FOLLOW_expression_in_varBreakCommand3310);
                    e1=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, e1.getTree());
                    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:796:40: ( ws | nl )*
                    loop161:
                    do {
                        int alt161=3;
                        int LA161_0 = input.LA(1);

                        if ( (LA161_0==WS) ) {
                            alt161=1;
                        }
                        else if ( (LA161_0==NL) ) {
                            alt161=2;
                        }


                        switch (alt161) {
                    	case 1 :
                    	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:796:41: ws
                    	    {
                    	    pushFollow(FOLLOW_ws_in_varBreakCommand3314);
                    	    ws243=ws();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, ws243.getTree());

                    	    }
                    	    break;
                    	case 2 :
                    	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:796:46: nl
                    	    {
                    	    pushFollow(FOLLOW_nl_in_varBreakCommand3318);
                    	    nl244=nl();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nl244.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop161;
                        }
                    } while (true);

                    if ( state.backtracking==0 ) {
                       Utils.addWriteblocker("break"); 
                    }
                    cc=(Token)match(input,COMMANDCHAR,FOLLOW_COMMANDCHAR_in_varBreakCommand3347); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    cc_tree = (CommonTree)adaptor.create(cc);
                    adaptor.addChild(root_0, cc_tree);
                    }
                    pushFollow(FOLLOW_varDesc_in_varBreakCommand3351);
                    v=varDesc();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, v.getTree());
                    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:800:34: (w= ws )*
                    loop162:
                    do {
                        int alt162=2;
                        int LA162_0 = input.LA(1);

                        if ( (LA162_0==WS) ) {
                            int LA162_1 = input.LA(2);

                            if ( (synpred232_command()) ) {
                                alt162=1;
                            }


                        }


                        switch (alt162) {
                    	case 1 :
                    	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:0:0: w= ws
                    	    {
                    	    pushFollow(FOLLOW_ws_in_varBreakCommand3355);
                    	    w=ws();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, w.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop162;
                        }
                    } while (true);

                    if ( state.backtracking==0 ) {
                       append(sb, (cc!=null?cc.getText():null)); append(sb, (v!=null?input.toString(v.start,v.stop):null)); append(sb, (w!=null?input.toString(w.start,w.stop):null)); 
                    }
                    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:801:8: ( ws | nl )*
                    loop163:
                    do {
                        int alt163=3;
                        int LA163_0 = input.LA(1);

                        if ( (LA163_0==WS) ) {
                            alt163=1;
                        }
                        else if ( (LA163_0==NL) ) {
                            alt163=2;
                        }


                        switch (alt163) {
                    	case 1 :
                    	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:801:9: ws
                    	    {
                    	    pushFollow(FOLLOW_ws_in_varBreakCommand3368);
                    	    ws245=ws();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, ws245.getTree());

                    	    }
                    	    break;
                    	case 2 :
                    	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:801:14: nl
                    	    {
                    	    pushFollow(FOLLOW_nl_in_varBreakCommand3372);
                    	    nl246=nl();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nl246.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop163;
                        }
                    } while (true);

                    COMMANDCHAR247=(Token)match(input,COMMANDCHAR,FOLLOW_COMMANDCHAR_in_varBreakCommand3389); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COMMANDCHAR247_tree = (CommonTree)adaptor.create(COMMANDCHAR247);
                    adaptor.addChild(root_0, COMMANDCHAR247_tree);
                    }
                    ENDBREAK248=(Token)match(input,ENDBREAK,FOLLOW_ENDBREAK_in_varBreakCommand3391); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ENDBREAK248_tree = (CommonTree)adaptor.create(ENDBREAK248);
                    adaptor.addChild(root_0, ENDBREAK248_tree);
                    }

                    }

                    if ( state.backtracking==0 ) {
                       Utils.removeWriteblocker("break"); 
                    }
                    if ( state.backtracking==0 ) {

                                 //Break command (extended)
                                 if (Utils.canWrite()){
                                     new SetLoopVarBreak((e1!=null?input.toString(e1.start,e1.stop):null), sb.toString()).execute();
                                 } 
                             
                    }

                    }
                    break;
                case 2 :
                    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:814:7: BREAK ( ws )* e2= expression ( ws | nl )*
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    BREAK249=(Token)match(input,BREAK,FOLLOW_BREAK_in_varBreakCommand3434); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    BREAK249_tree = (CommonTree)adaptor.create(BREAK249);
                    adaptor.addChild(root_0, BREAK249_tree);
                    }
                    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:814:13: ( ws )*
                    loop164:
                    do {
                        int alt164=2;
                        int LA164_0 = input.LA(1);

                        if ( (LA164_0==WS) ) {
                            int LA164_2 = input.LA(2);

                            if ( (synpred236_command()) ) {
                                alt164=1;
                            }


                        }


                        switch (alt164) {
                    	case 1 :
                    	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:0:0: ws
                    	    {
                    	    pushFollow(FOLLOW_ws_in_varBreakCommand3436);
                    	    ws250=ws();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, ws250.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop164;
                        }
                    } while (true);

                    pushFollow(FOLLOW_expression_in_varBreakCommand3441);
                    e2=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, e2.getTree());
                    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:814:32: ( ws | nl )*
                    loop165:
                    do {
                        int alt165=3;
                        int LA165_0 = input.LA(1);

                        if ( (LA165_0==WS) ) {
                            int LA165_1 = input.LA(2);

                            if ( (synpred237_command()) ) {
                                alt165=1;
                            }


                        }
                        else if ( (LA165_0==NL) ) {
                            int LA165_2 = input.LA(2);

                            if ( (synpred238_command()) ) {
                                alt165=2;
                            }


                        }


                        switch (alt165) {
                    	case 1 :
                    	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:814:33: ws
                    	    {
                    	    pushFollow(FOLLOW_ws_in_varBreakCommand3445);
                    	    ws251=ws();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, ws251.getTree());

                    	    }
                    	    break;
                    	case 2 :
                    	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:814:38: nl
                    	    {
                    	    pushFollow(FOLLOW_nl_in_varBreakCommand3449);
                    	    nl252=nl();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nl252.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop165;
                        }
                    } while (true);

                    if ( state.backtracking==0 ) {

                                  //Break command
                                  if (Utils.canWrite()){
                                      new SetLoopVarBreak((e2!=null?input.toString(e2.start,e2.stop):null)).execute();
                                  }
                             
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException ex) {
                  throw new ARTSyntaxException("Syntax error in File: " + Utils.getCurrentFile() + " line: " + (ex.line == 0 ? Utils.getExpressionLine() : ex.line) + " (" + ex.getStackTrace()[0].getMethodName() + ")");
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "varBreakCommand"

    public static class messageCommand_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "messageCommand"
    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:824:1: messageCommand : ( shortMessage | extendedMessage | messageif | extendedMessageif | messagedebug | extendedMessagedebug );
    public final commandParser.messageCommand_return messageCommand() throws RecognitionException {
        commandParser.messageCommand_return retval = new commandParser.messageCommand_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        commandParser.shortMessage_return shortMessage253 = null;

        commandParser.extendedMessage_return extendedMessage254 = null;

        commandParser.messageif_return messageif255 = null;

        commandParser.extendedMessageif_return extendedMessageif256 = null;

        commandParser.messagedebug_return messagedebug257 = null;

        commandParser.extendedMessagedebug_return extendedMessagedebug258 = null;



        try {
            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:824:15: ( shortMessage | extendedMessage | messageif | extendedMessageif | messagedebug | extendedMessagedebug )
            int alt167=6;
            switch ( input.LA(1) ) {
            case MESSAGE:
                {
                alt167=1;
                }
                break;
            case EXTENDEDMESSAGE:
                {
                alt167=2;
                }
                break;
            case MESSAGEIF:
                {
                alt167=3;
                }
                break;
            case EXTENDEDMESSAGEIF:
                {
                alt167=4;
                }
                break;
            case MESSAGEDEBUG:
                {
                alt167=5;
                }
                break;
            case EXTENDEDMESSAGEDEBUG:
                {
                alt167=6;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 167, 0, input);

                throw nvae;
            }

            switch (alt167) {
                case 1 :
                    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:824:17: shortMessage
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_shortMessage_in_messageCommand3484);
                    shortMessage253=shortMessage();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, shortMessage253.getTree());

                    }
                    break;
                case 2 :
                    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:824:32: extendedMessage
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_extendedMessage_in_messageCommand3488);
                    extendedMessage254=extendedMessage();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, extendedMessage254.getTree());

                    }
                    break;
                case 3 :
                    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:824:50: messageif
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_messageif_in_messageCommand3492);
                    messageif255=messageif();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, messageif255.getTree());

                    }
                    break;
                case 4 :
                    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:824:62: extendedMessageif
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_extendedMessageif_in_messageCommand3496);
                    extendedMessageif256=extendedMessageif();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, extendedMessageif256.getTree());

                    }
                    break;
                case 5 :
                    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:824:82: messagedebug
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_messagedebug_in_messageCommand3500);
                    messagedebug257=messagedebug();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, messagedebug257.getTree());

                    }
                    break;
                case 6 :
                    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:824:97: extendedMessagedebug
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_extendedMessagedebug_in_messageCommand3504);
                    extendedMessagedebug258=extendedMessagedebug();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, extendedMessagedebug258.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException ex) {
                  throw new ARTSyntaxException("Syntax error in File: " + Utils.getCurrentFile() + " line: " + (ex.line == 0 ? Utils.getExpressionLine() : ex.line) + " (" + ex.getStackTrace()[0].getMethodName() + ")");
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "messageCommand"

    public static class shortMessage_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "shortMessage"
    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:826:1: shortMessage : m= MESSAGE (se= stringExpression | str=~ ( NL ) )* ( ws )* ( NL )? ;
    public final commandParser.shortMessage_return shortMessage() throws RecognitionException {
        commandParser.shortMessage_return retval = new commandParser.shortMessage_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token m=null;
        Token str=null;
        Token NL260=null;
        commandParser.stringExpression_return se = null;

        commandParser.ws_return ws259 = null;


        CommonTree m_tree=null;
        CommonTree str_tree=null;
        CommonTree NL260_tree=null;

        try {
            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:827:3: (m= MESSAGE (se= stringExpression | str=~ ( NL ) )* ( ws )* ( NL )? )
            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:827:5: m= MESSAGE (se= stringExpression | str=~ ( NL ) )* ( ws )* ( NL )?
            {
            root_0 = (CommonTree)adaptor.nil();

            m=(Token)match(input,MESSAGE,FOLLOW_MESSAGE_in_shortMessage3516); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            m_tree = (CommonTree)adaptor.create(m);
            adaptor.addChild(root_0, m_tree);
            }
            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:828:3: (se= stringExpression | str=~ ( NL ) )*
            loop168:
            do {
                int alt168=3;
                alt168 = dfa168.predict(input);
                switch (alt168) {
            	case 1 :
            	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:829:3: se= stringExpression
            	    {
            	    pushFollow(FOLLOW_stringExpression_in_shortMessage3527);
            	    se=stringExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, se.getTree());
            	    if ( state.backtracking==0 ) {
            	       writeExpressionMessage((se!=null?input.toString(se.start,se.stop):null), m.getLine()); 
            	    }

            	    }
            	    break;
            	case 2 :
            	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:830:5: str=~ ( NL )
            	    {
            	    str=(Token)input.LT(1);
            	    if ( (input.LA(1)>=NEGATION && input.LA(1)<=ARTVARCHAR)||(input.LA(1)>=COMMANDCHAR && input.LA(1)<=109) ) {
            	        input.consume();
            	        if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(str));
            	        state.errorRecovery=false;state.failed=false;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        throw mse;
            	    }

            	    if ( state.backtracking==0 ) {
            	       writeMessage((str!=null?str.getText():null));
            	    }

            	    }
            	    break;

            	default :
            	    break loop168;
                }
            } while (true);

            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:831:6: ( ws )*
            loop169:
            do {
                int alt169=2;
                int LA169_0 = input.LA(1);

                if ( (LA169_0==WS) ) {
                    int LA169_2 = input.LA(2);

                    if ( (synpred246_command()) ) {
                        alt169=1;
                    }


                }


                switch (alt169) {
            	case 1 :
            	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:0:0: ws
            	    {
            	    pushFollow(FOLLOW_ws_in_shortMessage3550);
            	    ws259=ws();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, ws259.getTree());

            	    }
            	    break;

            	default :
            	    break loop169;
                }
            } while (true);

            if ( state.backtracking==0 ) {
              writeMessage("\n");
            }
            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:831:32: ( NL )?
            int alt170=2;
            int LA170_0 = input.LA(1);

            if ( (LA170_0==NL) ) {
                int LA170_1 = input.LA(2);

                if ( (synpred247_command()) ) {
                    alt170=1;
                }
            }
            switch (alt170) {
                case 1 :
                    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:0:0: NL
                    {
                    NL260=(Token)match(input,NL,FOLLOW_NL_in_shortMessage3555); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NL260_tree = (CommonTree)adaptor.create(NL260);
                    adaptor.addChild(root_0, NL260_tree);
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException ex) {
                  throw new ARTSyntaxException("Syntax error in File: " + Utils.getCurrentFile() + " line: " + (ex.line == 0 ? Utils.getExpressionLine() : ex.line) + " (" + ex.getStackTrace()[0].getMethodName() + ")");
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "shortMessage"

    public static class extendedMessage_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "extendedMessage"
    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:833:1: extendedMessage : em= EXTENDEDMESSAGE (se= stringExpression | str= ee )* COMMANDCHAR ENDMESSAGE ( NL )? ;
    public final commandParser.extendedMessage_return extendedMessage() throws RecognitionException {
        commandParser.extendedMessage_return retval = new commandParser.extendedMessage_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token em=null;
        Token COMMANDCHAR261=null;
        Token ENDMESSAGE262=null;
        Token NL263=null;
        commandParser.stringExpression_return se = null;

        commandParser.ee_return str = null;


        CommonTree em_tree=null;
        CommonTree COMMANDCHAR261_tree=null;
        CommonTree ENDMESSAGE262_tree=null;
        CommonTree NL263_tree=null;

        try {
            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:834:3: (em= EXTENDEDMESSAGE (se= stringExpression | str= ee )* COMMANDCHAR ENDMESSAGE ( NL )? )
            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:834:5: em= EXTENDEDMESSAGE (se= stringExpression | str= ee )* COMMANDCHAR ENDMESSAGE ( NL )?
            {
            root_0 = (CommonTree)adaptor.nil();

            em=(Token)match(input,EXTENDEDMESSAGE,FOLLOW_EXTENDEDMESSAGE_in_extendedMessage3568); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            em_tree = (CommonTree)adaptor.create(em);
            adaptor.addChild(root_0, em_tree);
            }
            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:835:3: (se= stringExpression | str= ee )*
            loop171:
            do {
                int alt171=3;
                switch ( input.LA(1) ) {
                case STRING:
                    {
                    int LA171_2 = input.LA(2);

                    if ( (synpred248_command()) ) {
                        alt171=1;
                    }
                    else if ( (synpred249_command()) ) {
                        alt171=2;
                    }


                    }
                    break;
                case EPRESSIONCHAR:
                    {
                    alt171=1;
                    }
                    break;
                case NEGATION:
                case DEFINED:
                case ARTVARCHAR:
                case NL:
                case IDENT:
                case SIMPLEADAPT:
                case ADAPTSAMELEVEL:
                case EXTENDEDADAPT:
                case EXTENDEDADAPTSAMELEVEL:
                case ENDADAPT:
                case ADAPTCOPY:
                case SET:
                case SETDEFER:
                case OUTPUT:
                case OUTDIR:
                case OUTFILE:
                case IF:
                case ENDIF:
                case ELIF:
                case ELSE:
                case IFDEF:
                case IFNDEF:
                case REMOVE:
                case SELECT:
                case ENDSELECT:
                case OPTIONUNDEFINED:
                case ENDOPTION:
                case OPTION:
                case OTHERWISE:
                case ENDOTHERWISE:
                case INSERT:
                case ENDINSERT:
                case INSERTBEFORE:
                case INSERTAFTER:
                case EXTENDEDBREAK:
                case ENDBREAK:
                case BREAK:
                case WHILE:
                case ENDWHILE:
                case SETLOOP:
                case ENDSETLOOP:
                case VARS:
                case ENDVARS:
                case VAR:
                case ITER:
                case MESSAGE:
                case EXTENDEDMESSAGE:
                case ENDMESSAGE:
                case MESSAGEIF:
                case EXTENDEDMESSAGEIF:
                case MESSAGEDEBUG:
                case EXTENDEDMESSAGEDEBUG:
                case TEXT:
                case ENDTEXT:
                case REFERENCECHAR:
                case INTEGER:
                case ISLAST:
                case ISFIRST:
                case SIZE:
                case ISNUMERIC:
                case ULCAP:
                case LLCAP:
                case DEBUGMODE:
                case CURRENTFILE:
                case DEFAULTOUTPUT:
                case COMMENTCHAR:
                case QUOTATIONMARK:
                case STRINGNOEND:
                case NOTNEWLINE:
                case WS:
                case COMMENT:
                case ESCCOMMENT:
                case DIGIT:
                case SPECCHAR:
                case LETTER:
                case DOT:
                case ANYCHAR:
                case 84:
                case 85:
                case 86:
                case 87:
                case 88:
                case 89:
                case 90:
                case 91:
                case 92:
                case 93:
                case 94:
                case 95:
                case 96:
                case 97:
                case 98:
                case 99:
                case 100:
                case 101:
                case 102:
                case 103:
                case 104:
                case 105:
                case 106:
                case 107:
                case 108:
                case 109:
                    {
                    alt171=2;
                    }
                    break;

                }

                switch (alt171) {
            	case 1 :
            	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:835:5: se= stringExpression
            	    {
            	    pushFollow(FOLLOW_stringExpression_in_extendedMessage3576);
            	    se=stringExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, se.getTree());
            	    if ( state.backtracking==0 ) {
            	        writeExpressionMessage((se!=null?input.toString(se.start,se.stop):null), em.getLine()); 
            	    }

            	    }
            	    break;
            	case 2 :
            	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:836:5: str= ee
            	    {
            	    pushFollow(FOLLOW_ee_in_extendedMessage3586);
            	    str=ee();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, str.getTree());
            	    if ( state.backtracking==0 ) {
            	       writeMessage((str!=null?input.toString(str.start,str.stop):null));
            	    }

            	    }
            	    break;

            	default :
            	    break loop171;
                }
            } while (true);

            COMMANDCHAR261=(Token)match(input,COMMANDCHAR,FOLLOW_COMMANDCHAR_in_extendedMessage3599); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            COMMANDCHAR261_tree = (CommonTree)adaptor.create(COMMANDCHAR261);
            adaptor.addChild(root_0, COMMANDCHAR261_tree);
            }
            ENDMESSAGE262=(Token)match(input,ENDMESSAGE,FOLLOW_ENDMESSAGE_in_extendedMessage3601); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ENDMESSAGE262_tree = (CommonTree)adaptor.create(ENDMESSAGE262);
            adaptor.addChild(root_0, ENDMESSAGE262_tree);
            }
            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:838:26: ( NL )?
            int alt172=2;
            int LA172_0 = input.LA(1);

            if ( (LA172_0==NL) ) {
                int LA172_1 = input.LA(2);

                if ( (synpred250_command()) ) {
                    alt172=1;
                }
            }
            switch (alt172) {
                case 1 :
                    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:0:0: NL
                    {
                    NL263=(Token)match(input,NL,FOLLOW_NL_in_extendedMessage3603); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NL263_tree = (CommonTree)adaptor.create(NL263);
                    adaptor.addChild(root_0, NL263_tree);
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException ex) {
                  throw new ARTSyntaxException("Syntax error in File: " + Utils.getCurrentFile() + " line: " + (ex.line == 0 ? Utils.getExpressionLine() : ex.line) + " (" + ex.getStackTrace()[0].getMethodName() + ")");
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "extendedMessage"

    public static class messageif_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "messageif"
    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:840:1: messageif : mf= MESSAGEIF ( ws )* ( '(' )? expr= freeExpression ( ')' )? (se= stringExpression | str=~ ( NL ) )* ( ws )* ( NL )? ;
    public final commandParser.messageif_return messageif() throws RecognitionException {
        commandParser.messageif_return retval = new commandParser.messageif_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token mf=null;
        Token str=null;
        Token char_literal265=null;
        Token char_literal266=null;
        Token NL268=null;
        commandParser.freeExpression_return expr = null;

        commandParser.stringExpression_return se = null;

        commandParser.ws_return ws264 = null;

        commandParser.ws_return ws267 = null;


        CommonTree mf_tree=null;
        CommonTree str_tree=null;
        CommonTree char_literal265_tree=null;
        CommonTree char_literal266_tree=null;
        CommonTree NL268_tree=null;

         boolean accepted = false; 
        try {
            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:842:3: (mf= MESSAGEIF ( ws )* ( '(' )? expr= freeExpression ( ')' )? (se= stringExpression | str=~ ( NL ) )* ( ws )* ( NL )? )
            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:842:5: mf= MESSAGEIF ( ws )* ( '(' )? expr= freeExpression ( ')' )? (se= stringExpression | str=~ ( NL ) )* ( ws )* ( NL )?
            {
            root_0 = (CommonTree)adaptor.nil();

            mf=(Token)match(input,MESSAGEIF,FOLLOW_MESSAGEIF_in_messageif3622); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            mf_tree = (CommonTree)adaptor.create(mf);
            adaptor.addChild(root_0, mf_tree);
            }
            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:842:18: ( ws )*
            loop173:
            do {
                int alt173=2;
                int LA173_0 = input.LA(1);

                if ( (LA173_0==WS) ) {
                    int LA173_2 = input.LA(2);

                    if ( (synpred251_command()) ) {
                        alt173=1;
                    }


                }


                switch (alt173) {
            	case 1 :
            	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:0:0: ws
            	    {
            	    pushFollow(FOLLOW_ws_in_messageif3624);
            	    ws264=ws();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, ws264.getTree());

            	    }
            	    break;

            	default :
            	    break loop173;
                }
            } while (true);

            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:842:22: ( '(' )?
            int alt174=2;
            alt174 = dfa174.predict(input);
            switch (alt174) {
                case 1 :
                    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:0:0: '('
                    {
                    char_literal265=(Token)match(input,86,FOLLOW_86_in_messageif3627); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal265_tree = (CommonTree)adaptor.create(char_literal265);
                    adaptor.addChild(root_0, char_literal265_tree);
                    }

                    }
                    break;

            }

            pushFollow(FOLLOW_freeExpression_in_messageif3632);
            expr=freeExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expr.getTree());
            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:842:47: ( ')' )?
            int alt175=2;
            int LA175_0 = input.LA(1);

            if ( (LA175_0==87) ) {
                int LA175_1 = input.LA(2);

                if ( (synpred253_command()) ) {
                    alt175=1;
                }
            }
            switch (alt175) {
                case 1 :
                    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:0:0: ')'
                    {
                    char_literal266=(Token)match(input,87,FOLLOW_87_in_messageif3634); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal266_tree = (CommonTree)adaptor.create(char_literal266);
                    adaptor.addChild(root_0, char_literal266_tree);
                    }

                    }
                    break;

            }

            if ( state.backtracking==0 ) {

                    String expRes = null;
                    try {
              	      expRes = Utils.getExpressionsVal((expr!=null?input.toString(expr.start,expr.stop):null), mf.getLine());
              	      if ((expRes.equals("true"))) {
              	        accepted = true;
              	      }  
                    } catch (MissingVariableException e) {
                        throw new ARTSyntaxException(e.getMessage());
                    }
                
                
            }
            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:856:3: (se= stringExpression | str=~ ( NL ) )*
            loop176:
            do {
                int alt176=3;
                alt176 = dfa176.predict(input);
                switch (alt176) {
            	case 1 :
            	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:856:5: se= stringExpression
            	    {
            	    pushFollow(FOLLOW_stringExpression_in_messageif3650);
            	    se=stringExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, se.getTree());
            	    if ( state.backtracking==0 ) {
            	       if (accepted) writeExpressionMessage((se!=null?input.toString(se.start,se.stop):null), se.tree.getLine()); 
            	    }

            	    }
            	    break;
            	case 2 :
            	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:857:5: str=~ ( NL )
            	    {
            	    str=(Token)input.LT(1);
            	    if ( (input.LA(1)>=NEGATION && input.LA(1)<=ARTVARCHAR)||(input.LA(1)>=COMMANDCHAR && input.LA(1)<=109) ) {
            	        input.consume();
            	        if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(str));
            	        state.errorRecovery=false;state.failed=false;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        throw mse;
            	    }

            	    if ( state.backtracking==0 ) {
            	       if (accepted) writeMessage((str!=null?str.getText():null));
            	    }

            	    }
            	    break;

            	default :
            	    break loop176;
                }
            } while (true);

            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:858:6: ( ws )*
            loop177:
            do {
                int alt177=2;
                int LA177_0 = input.LA(1);

                if ( (LA177_0==WS) ) {
                    int LA177_2 = input.LA(2);

                    if ( (synpred256_command()) ) {
                        alt177=1;
                    }


                }


                switch (alt177) {
            	case 1 :
            	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:0:0: ws
            	    {
            	    pushFollow(FOLLOW_ws_in_messageif3674);
            	    ws267=ws();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, ws267.getTree());

            	    }
            	    break;

            	default :
            	    break loop177;
                }
            } while (true);

            if ( state.backtracking==0 ) {
              writeMessage("\n");
            }
            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:858:32: ( NL )?
            int alt178=2;
            int LA178_0 = input.LA(1);

            if ( (LA178_0==NL) ) {
                int LA178_1 = input.LA(2);

                if ( (synpred257_command()) ) {
                    alt178=1;
                }
            }
            switch (alt178) {
                case 1 :
                    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:0:0: NL
                    {
                    NL268=(Token)match(input,NL,FOLLOW_NL_in_messageif3679); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NL268_tree = (CommonTree)adaptor.create(NL268);
                    adaptor.addChild(root_0, NL268_tree);
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException ex) {
                  throw new ARTSyntaxException("Syntax error in File: " + Utils.getCurrentFile() + " line: " + (ex.line == 0 ? Utils.getExpressionLine() : ex.line) + " (" + ex.getStackTrace()[0].getMethodName() + ")");
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "messageif"

    public static class extendedMessageif_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "extendedMessageif"
    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:860:1: extendedMessageif : mf= EXTENDEDMESSAGEIF ( ws )* ( '(' )? expr= freeExpression ( ')' )? (se= stringExpression | str= ee )* COMMANDCHAR ENDMESSAGE ( NL )? ;
    public final commandParser.extendedMessageif_return extendedMessageif() throws RecognitionException {
        commandParser.extendedMessageif_return retval = new commandParser.extendedMessageif_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token mf=null;
        Token char_literal270=null;
        Token char_literal271=null;
        Token COMMANDCHAR272=null;
        Token ENDMESSAGE273=null;
        Token NL274=null;
        commandParser.freeExpression_return expr = null;

        commandParser.stringExpression_return se = null;

        commandParser.ee_return str = null;

        commandParser.ws_return ws269 = null;


        CommonTree mf_tree=null;
        CommonTree char_literal270_tree=null;
        CommonTree char_literal271_tree=null;
        CommonTree COMMANDCHAR272_tree=null;
        CommonTree ENDMESSAGE273_tree=null;
        CommonTree NL274_tree=null;

         boolean accepted = false; 
        try {
            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:862:3: (mf= EXTENDEDMESSAGEIF ( ws )* ( '(' )? expr= freeExpression ( ')' )? (se= stringExpression | str= ee )* COMMANDCHAR ENDMESSAGE ( NL )? )
            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:862:5: mf= EXTENDEDMESSAGEIF ( ws )* ( '(' )? expr= freeExpression ( ')' )? (se= stringExpression | str= ee )* COMMANDCHAR ENDMESSAGE ( NL )?
            {
            root_0 = (CommonTree)adaptor.nil();

            mf=(Token)match(input,EXTENDEDMESSAGEIF,FOLLOW_EXTENDEDMESSAGEIF_in_extendedMessageif3700); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            mf_tree = (CommonTree)adaptor.create(mf);
            adaptor.addChild(root_0, mf_tree);
            }
            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:862:26: ( ws )*
            loop179:
            do {
                int alt179=2;
                int LA179_0 = input.LA(1);

                if ( (LA179_0==WS) ) {
                    int LA179_2 = input.LA(2);

                    if ( (synpred258_command()) ) {
                        alt179=1;
                    }


                }


                switch (alt179) {
            	case 1 :
            	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:0:0: ws
            	    {
            	    pushFollow(FOLLOW_ws_in_extendedMessageif3702);
            	    ws269=ws();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, ws269.getTree());

            	    }
            	    break;

            	default :
            	    break loop179;
                }
            } while (true);

            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:862:30: ( '(' )?
            int alt180=2;
            alt180 = dfa180.predict(input);
            switch (alt180) {
                case 1 :
                    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:0:0: '('
                    {
                    char_literal270=(Token)match(input,86,FOLLOW_86_in_extendedMessageif3705); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal270_tree = (CommonTree)adaptor.create(char_literal270);
                    adaptor.addChild(root_0, char_literal270_tree);
                    }

                    }
                    break;

            }

            pushFollow(FOLLOW_freeExpression_in_extendedMessageif3710);
            expr=freeExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expr.getTree());
            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:862:55: ( ')' )?
            int alt181=2;
            int LA181_0 = input.LA(1);

            if ( (LA181_0==87) ) {
                int LA181_1 = input.LA(2);

                if ( (synpred260_command()) ) {
                    alt181=1;
                }
            }
            switch (alt181) {
                case 1 :
                    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:0:0: ')'
                    {
                    char_literal271=(Token)match(input,87,FOLLOW_87_in_extendedMessageif3712); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal271_tree = (CommonTree)adaptor.create(char_literal271);
                    adaptor.addChild(root_0, char_literal271_tree);
                    }

                    }
                    break;

            }

            if ( state.backtracking==0 ) {

                    String expRes = null;
                    try {
                      expRes = Utils.getExpressionsVal((expr!=null?input.toString(expr.start,expr.stop):null), mf.getLine());
                      if ((expRes.equals("true"))) {
                        accepted = true;
                      }  
                    } catch (MissingVariableException e) {
                        throw new ARTSyntaxException(e.getMessage());
                    }
                
                
            }
            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:876:3: (se= stringExpression | str= ee )*
            loop182:
            do {
                int alt182=3;
                switch ( input.LA(1) ) {
                case STRING:
                    {
                    int LA182_2 = input.LA(2);

                    if ( (synpred261_command()) ) {
                        alt182=1;
                    }
                    else if ( (synpred262_command()) ) {
                        alt182=2;
                    }


                    }
                    break;
                case EPRESSIONCHAR:
                    {
                    alt182=1;
                    }
                    break;
                case NEGATION:
                case DEFINED:
                case ARTVARCHAR:
                case NL:
                case IDENT:
                case SIMPLEADAPT:
                case ADAPTSAMELEVEL:
                case EXTENDEDADAPT:
                case EXTENDEDADAPTSAMELEVEL:
                case ENDADAPT:
                case ADAPTCOPY:
                case SET:
                case SETDEFER:
                case OUTPUT:
                case OUTDIR:
                case OUTFILE:
                case IF:
                case ENDIF:
                case ELIF:
                case ELSE:
                case IFDEF:
                case IFNDEF:
                case REMOVE:
                case SELECT:
                case ENDSELECT:
                case OPTIONUNDEFINED:
                case ENDOPTION:
                case OPTION:
                case OTHERWISE:
                case ENDOTHERWISE:
                case INSERT:
                case ENDINSERT:
                case INSERTBEFORE:
                case INSERTAFTER:
                case EXTENDEDBREAK:
                case ENDBREAK:
                case BREAK:
                case WHILE:
                case ENDWHILE:
                case SETLOOP:
                case ENDSETLOOP:
                case VARS:
                case ENDVARS:
                case VAR:
                case ITER:
                case MESSAGE:
                case EXTENDEDMESSAGE:
                case ENDMESSAGE:
                case MESSAGEIF:
                case EXTENDEDMESSAGEIF:
                case MESSAGEDEBUG:
                case EXTENDEDMESSAGEDEBUG:
                case TEXT:
                case ENDTEXT:
                case REFERENCECHAR:
                case INTEGER:
                case ISLAST:
                case ISFIRST:
                case SIZE:
                case ISNUMERIC:
                case ULCAP:
                case LLCAP:
                case DEBUGMODE:
                case CURRENTFILE:
                case DEFAULTOUTPUT:
                case COMMENTCHAR:
                case QUOTATIONMARK:
                case STRINGNOEND:
                case NOTNEWLINE:
                case WS:
                case COMMENT:
                case ESCCOMMENT:
                case DIGIT:
                case SPECCHAR:
                case LETTER:
                case DOT:
                case ANYCHAR:
                case 84:
                case 85:
                case 86:
                case 87:
                case 88:
                case 89:
                case 90:
                case 91:
                case 92:
                case 93:
                case 94:
                case 95:
                case 96:
                case 97:
                case 98:
                case 99:
                case 100:
                case 101:
                case 102:
                case 103:
                case 104:
                case 105:
                case 106:
                case 107:
                case 108:
                case 109:
                    {
                    alt182=2;
                    }
                    break;

                }

                switch (alt182) {
            	case 1 :
            	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:876:5: se= stringExpression
            	    {
            	    pushFollow(FOLLOW_stringExpression_in_extendedMessageif3728);
            	    se=stringExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, se.getTree());
            	    if ( state.backtracking==0 ) {
            	       if (accepted) writeExpressionMessage((se!=null?input.toString(se.start,se.stop):null), se.tree.getLine()); 
            	    }

            	    }
            	    break;
            	case 2 :
            	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:877:5: str= ee
            	    {
            	    pushFollow(FOLLOW_ee_in_extendedMessageif3739);
            	    str=ee();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, str.getTree());
            	    if ( state.backtracking==0 ) {
            	       if (accepted) writeMessage((str!=null?input.toString(str.start,str.stop):null));
            	    }

            	    }
            	    break;

            	default :
            	    break loop182;
                }
            } while (true);

            COMMANDCHAR272=(Token)match(input,COMMANDCHAR,FOLLOW_COMMANDCHAR_in_extendedMessageif3753); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            COMMANDCHAR272_tree = (CommonTree)adaptor.create(COMMANDCHAR272);
            adaptor.addChild(root_0, COMMANDCHAR272_tree);
            }
            ENDMESSAGE273=(Token)match(input,ENDMESSAGE,FOLLOW_ENDMESSAGE_in_extendedMessageif3755); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ENDMESSAGE273_tree = (CommonTree)adaptor.create(ENDMESSAGE273);
            adaptor.addChild(root_0, ENDMESSAGE273_tree);
            }
            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:879:27: ( NL )?
            int alt183=2;
            int LA183_0 = input.LA(1);

            if ( (LA183_0==NL) ) {
                int LA183_1 = input.LA(2);

                if ( (synpred263_command()) ) {
                    alt183=1;
                }
            }
            switch (alt183) {
                case 1 :
                    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:0:0: NL
                    {
                    NL274=(Token)match(input,NL,FOLLOW_NL_in_extendedMessageif3757); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NL274_tree = (CommonTree)adaptor.create(NL274);
                    adaptor.addChild(root_0, NL274_tree);
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException ex) {
                  throw new ARTSyntaxException("Syntax error in File: " + Utils.getCurrentFile() + " line: " + (ex.line == 0 ? Utils.getExpressionLine() : ex.line) + " (" + ex.getStackTrace()[0].getMethodName() + ")");
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "extendedMessageif"

    public static class messagedebug_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "messagedebug"
    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:882:1: messagedebug : MESSAGEDEBUG (se= stringExpression | str= ee )* ( ws )* ( NL )? ;
    public final commandParser.messagedebug_return messagedebug() throws RecognitionException {
        commandParser.messagedebug_return retval = new commandParser.messagedebug_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token MESSAGEDEBUG275=null;
        Token NL277=null;
        commandParser.stringExpression_return se = null;

        commandParser.ee_return str = null;

        commandParser.ws_return ws276 = null;


        CommonTree MESSAGEDEBUG275_tree=null;
        CommonTree NL277_tree=null;

        try {
            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:883:3: ( MESSAGEDEBUG (se= stringExpression | str= ee )* ( ws )* ( NL )? )
            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:883:5: MESSAGEDEBUG (se= stringExpression | str= ee )* ( ws )* ( NL )?
            {
            root_0 = (CommonTree)adaptor.nil();

            MESSAGEDEBUG275=(Token)match(input,MESSAGEDEBUG,FOLLOW_MESSAGEDEBUG_in_messagedebug3769); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            MESSAGEDEBUG275_tree = (CommonTree)adaptor.create(MESSAGEDEBUG275);
            adaptor.addChild(root_0, MESSAGEDEBUG275_tree);
            }
            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:884:3: (se= stringExpression | str= ee )*
            loop184:
            do {
                int alt184=3;
                alt184 = dfa184.predict(input);
                switch (alt184) {
            	case 1 :
            	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:884:5: se= stringExpression
            	    {
            	    pushFollow(FOLLOW_stringExpression_in_messagedebug3778);
            	    se=stringExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, se.getTree());
            	    if ( state.backtracking==0 ) {
            	       if (Utils.isDebugMode()) writeExpressionMessage((se!=null?input.toString(se.start,se.stop):null), se.tree.getLine()); 
            	    }

            	    }
            	    break;
            	case 2 :
            	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:885:5: str= ee
            	    {
            	    pushFollow(FOLLOW_ee_in_messagedebug3789);
            	    str=ee();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, str.getTree());
            	    if ( state.backtracking==0 ) {
            	       if (Utils.isDebugMode()) writeMessage((str!=null?input.toString(str.start,str.stop):null));
            	    }

            	    }
            	    break;

            	default :
            	    break loop184;
                }
            } while (true);

            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:886:7: ( ws )*
            loop185:
            do {
                int alt185=2;
                int LA185_0 = input.LA(1);

                if ( (LA185_0==WS) ) {
                    int LA185_2 = input.LA(2);

                    if ( (synpred266_command()) ) {
                        alt185=1;
                    }


                }


                switch (alt185) {
            	case 1 :
            	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:0:0: ws
            	    {
            	    pushFollow(FOLLOW_ws_in_messagedebug3800);
            	    ws276=ws();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, ws276.getTree());

            	    }
            	    break;

            	default :
            	    break loop185;
                }
            } while (true);

            if ( state.backtracking==0 ) {
              writeMessage("\n");
            }
            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:886:33: ( NL )?
            int alt186=2;
            int LA186_0 = input.LA(1);

            if ( (LA186_0==NL) ) {
                int LA186_1 = input.LA(2);

                if ( (synpred267_command()) ) {
                    alt186=1;
                }
            }
            switch (alt186) {
                case 1 :
                    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:0:0: NL
                    {
                    NL277=(Token)match(input,NL,FOLLOW_NL_in_messagedebug3805); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NL277_tree = (CommonTree)adaptor.create(NL277);
                    adaptor.addChild(root_0, NL277_tree);
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException ex) {
                  throw new ARTSyntaxException("Syntax error in File: " + Utils.getCurrentFile() + " line: " + (ex.line == 0 ? Utils.getExpressionLine() : ex.line) + " (" + ex.getStackTrace()[0].getMethodName() + ")");
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "messagedebug"

    public static class extendedMessagedebug_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "extendedMessagedebug"
    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:888:1: extendedMessagedebug : em= EXTENDEDMESSAGEDEBUG (se= stringExpression | str= ee )* COMMANDCHAR ENDMESSAGE ( NL )? ;
    public final commandParser.extendedMessagedebug_return extendedMessagedebug() throws RecognitionException {
        commandParser.extendedMessagedebug_return retval = new commandParser.extendedMessagedebug_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token em=null;
        Token COMMANDCHAR278=null;
        Token ENDMESSAGE279=null;
        Token NL280=null;
        commandParser.stringExpression_return se = null;

        commandParser.ee_return str = null;


        CommonTree em_tree=null;
        CommonTree COMMANDCHAR278_tree=null;
        CommonTree ENDMESSAGE279_tree=null;
        CommonTree NL280_tree=null;

        try {
            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:889:3: (em= EXTENDEDMESSAGEDEBUG (se= stringExpression | str= ee )* COMMANDCHAR ENDMESSAGE ( NL )? )
            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:889:5: em= EXTENDEDMESSAGEDEBUG (se= stringExpression | str= ee )* COMMANDCHAR ENDMESSAGE ( NL )?
            {
            root_0 = (CommonTree)adaptor.nil();

            em=(Token)match(input,EXTENDEDMESSAGEDEBUG,FOLLOW_EXTENDEDMESSAGEDEBUG_in_extendedMessagedebug3818); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            em_tree = (CommonTree)adaptor.create(em);
            adaptor.addChild(root_0, em_tree);
            }
            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:890:3: (se= stringExpression | str= ee )*
            loop187:
            do {
                int alt187=3;
                switch ( input.LA(1) ) {
                case STRING:
                    {
                    int LA187_2 = input.LA(2);

                    if ( (synpred268_command()) ) {
                        alt187=1;
                    }
                    else if ( (synpred269_command()) ) {
                        alt187=2;
                    }


                    }
                    break;
                case EPRESSIONCHAR:
                    {
                    alt187=1;
                    }
                    break;
                case NEGATION:
                case DEFINED:
                case ARTVARCHAR:
                case NL:
                case IDENT:
                case SIMPLEADAPT:
                case ADAPTSAMELEVEL:
                case EXTENDEDADAPT:
                case EXTENDEDADAPTSAMELEVEL:
                case ENDADAPT:
                case ADAPTCOPY:
                case SET:
                case SETDEFER:
                case OUTPUT:
                case OUTDIR:
                case OUTFILE:
                case IF:
                case ENDIF:
                case ELIF:
                case ELSE:
                case IFDEF:
                case IFNDEF:
                case REMOVE:
                case SELECT:
                case ENDSELECT:
                case OPTIONUNDEFINED:
                case ENDOPTION:
                case OPTION:
                case OTHERWISE:
                case ENDOTHERWISE:
                case INSERT:
                case ENDINSERT:
                case INSERTBEFORE:
                case INSERTAFTER:
                case EXTENDEDBREAK:
                case ENDBREAK:
                case BREAK:
                case WHILE:
                case ENDWHILE:
                case SETLOOP:
                case ENDSETLOOP:
                case VARS:
                case ENDVARS:
                case VAR:
                case ITER:
                case MESSAGE:
                case EXTENDEDMESSAGE:
                case ENDMESSAGE:
                case MESSAGEIF:
                case EXTENDEDMESSAGEIF:
                case MESSAGEDEBUG:
                case EXTENDEDMESSAGEDEBUG:
                case TEXT:
                case ENDTEXT:
                case REFERENCECHAR:
                case INTEGER:
                case ISLAST:
                case ISFIRST:
                case SIZE:
                case ISNUMERIC:
                case ULCAP:
                case LLCAP:
                case DEBUGMODE:
                case CURRENTFILE:
                case DEFAULTOUTPUT:
                case COMMENTCHAR:
                case QUOTATIONMARK:
                case STRINGNOEND:
                case NOTNEWLINE:
                case WS:
                case COMMENT:
                case ESCCOMMENT:
                case DIGIT:
                case SPECCHAR:
                case LETTER:
                case DOT:
                case ANYCHAR:
                case 84:
                case 85:
                case 86:
                case 87:
                case 88:
                case 89:
                case 90:
                case 91:
                case 92:
                case 93:
                case 94:
                case 95:
                case 96:
                case 97:
                case 98:
                case 99:
                case 100:
                case 101:
                case 102:
                case 103:
                case 104:
                case 105:
                case 106:
                case 107:
                case 108:
                case 109:
                    {
                    alt187=2;
                    }
                    break;

                }

                switch (alt187) {
            	case 1 :
            	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:890:5: se= stringExpression
            	    {
            	    pushFollow(FOLLOW_stringExpression_in_extendedMessagedebug3826);
            	    se=stringExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, se.getTree());
            	    if ( state.backtracking==0 ) {
            	      if (Utils.isDebugMode()) writeExpressionMessage((se!=null?input.toString(se.start,se.stop):null), em.getLine()); 
            	    }

            	    }
            	    break;
            	case 2 :
            	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:891:5: str= ee
            	    {
            	    pushFollow(FOLLOW_ee_in_extendedMessagedebug3836);
            	    str=ee();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, str.getTree());
            	    if ( state.backtracking==0 ) {
            	      if (Utils.isDebugMode()) writeMessage((str!=null?input.toString(str.start,str.stop):null));
            	    }

            	    }
            	    break;

            	default :
            	    break loop187;
                }
            } while (true);

            COMMANDCHAR278=(Token)match(input,COMMANDCHAR,FOLLOW_COMMANDCHAR_in_extendedMessagedebug3849); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            COMMANDCHAR278_tree = (CommonTree)adaptor.create(COMMANDCHAR278);
            adaptor.addChild(root_0, COMMANDCHAR278_tree);
            }
            ENDMESSAGE279=(Token)match(input,ENDMESSAGE,FOLLOW_ENDMESSAGE_in_extendedMessagedebug3851); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ENDMESSAGE279_tree = (CommonTree)adaptor.create(ENDMESSAGE279);
            adaptor.addChild(root_0, ENDMESSAGE279_tree);
            }
            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:893:26: ( NL )?
            int alt188=2;
            int LA188_0 = input.LA(1);

            if ( (LA188_0==NL) ) {
                int LA188_1 = input.LA(2);

                if ( (synpred270_command()) ) {
                    alt188=1;
                }
            }
            switch (alt188) {
                case 1 :
                    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:0:0: NL
                    {
                    NL280=(Token)match(input,NL,FOLLOW_NL_in_extendedMessagedebug3853); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NL280_tree = (CommonTree)adaptor.create(NL280);
                    adaptor.addChild(root_0, NL280_tree);
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException ex) {
                  throw new ARTSyntaxException("Syntax error in File: " + Utils.getCurrentFile() + " line: " + (ex.line == 0 ? Utils.getExpressionLine() : ex.line) + " (" + ex.getStackTrace()[0].getMethodName() + ")");
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "extendedMessagedebug"

    public static class textCommand_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "textCommand"
    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:895:1: textCommand : TEXT ( ws | NL )* (se= stringExpression | c= command | str= ee )* ( ws )* COMMANDCHAR ENDTEXT ( NL )? ;
    public final commandParser.textCommand_return textCommand() throws RecognitionException {
        commandParser.textCommand_return retval = new commandParser.textCommand_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token TEXT281=null;
        Token NL283=null;
        Token COMMANDCHAR285=null;
        Token ENDTEXT286=null;
        Token NL287=null;
        commandParser.stringExpression_return se = null;

        commandParser.command_return c = null;

        commandParser.ee_return str = null;

        commandParser.ws_return ws282 = null;

        commandParser.ws_return ws284 = null;


        CommonTree TEXT281_tree=null;
        CommonTree NL283_tree=null;
        CommonTree COMMANDCHAR285_tree=null;
        CommonTree ENDTEXT286_tree=null;
        CommonTree NL287_tree=null;

        try {
            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:895:12: ( TEXT ( ws | NL )* (se= stringExpression | c= command | str= ee )* ( ws )* COMMANDCHAR ENDTEXT ( NL )? )
            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:896:3: TEXT ( ws | NL )* (se= stringExpression | c= command | str= ee )* ( ws )* COMMANDCHAR ENDTEXT ( NL )?
            {
            root_0 = (CommonTree)adaptor.nil();

            TEXT281=(Token)match(input,TEXT,FOLLOW_TEXT_in_textCommand3865); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TEXT281_tree = (CommonTree)adaptor.create(TEXT281);
            adaptor.addChild(root_0, TEXT281_tree);
            }
            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:896:8: ( ws | NL )*
            loop189:
            do {
                int alt189=3;
                int LA189_0 = input.LA(1);

                if ( (LA189_0==WS) ) {
                    int LA189_2 = input.LA(2);

                    if ( (synpred271_command()) ) {
                        alt189=1;
                    }


                }
                else if ( (LA189_0==NL) ) {
                    int LA189_3 = input.LA(2);

                    if ( (synpred272_command()) ) {
                        alt189=2;
                    }


                }


                switch (alt189) {
            	case 1 :
            	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:896:9: ws
            	    {
            	    pushFollow(FOLLOW_ws_in_textCommand3868);
            	    ws282=ws();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, ws282.getTree());

            	    }
            	    break;
            	case 2 :
            	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:896:14: NL
            	    {
            	    NL283=(Token)match(input,NL,FOLLOW_NL_in_textCommand3872); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    NL283_tree = (CommonTree)adaptor.create(NL283);
            	    adaptor.addChild(root_0, NL283_tree);
            	    }

            	    }
            	    break;

            	default :
            	    break loop189;
                }
            } while (true);

            if ( state.backtracking==0 ) {
              Utils.addWriteblocker("text");
            }
            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:898:3: (se= stringExpression | c= command | str= ee )*
            loop190:
            do {
                int alt190=4;
                switch ( input.LA(1) ) {
                case WS:
                    {
                    int LA190_1 = input.LA(2);

                    if ( (synpred275_command()) ) {
                        alt190=3;
                    }


                    }
                    break;
                case COMMANDCHAR:
                    {
                    int LA190_2 = input.LA(2);

                    if ( ((LA190_2>=IDENT && LA190_2<=EXTENDEDADAPTSAMELEVEL)||(LA190_2>=ADAPTCOPY && LA190_2<=IF)||(LA190_2>=IFDEF && LA190_2<=SELECT)||LA190_2==INSERT||(LA190_2>=INSERTBEFORE && LA190_2<=EXTENDEDBREAK)||(LA190_2>=BREAK && LA190_2<=WHILE)||LA190_2==SETLOOP||(LA190_2>=MESSAGE && LA190_2<=EXTENDEDMESSAGE)||(LA190_2>=MESSAGEIF && LA190_2<=TEXT)) ) {
                        alt190=2;
                    }


                    }
                    break;
                case STRING:
                    {
                    int LA190_3 = input.LA(2);

                    if ( (synpred273_command()) ) {
                        alt190=1;
                    }
                    else if ( (synpred275_command()) ) {
                        alt190=3;
                    }


                    }
                    break;
                case EPRESSIONCHAR:
                    {
                    alt190=1;
                    }
                    break;
                case NEGATION:
                case DEFINED:
                case ARTVARCHAR:
                case NL:
                case IDENT:
                case SIMPLEADAPT:
                case ADAPTSAMELEVEL:
                case EXTENDEDADAPT:
                case EXTENDEDADAPTSAMELEVEL:
                case ENDADAPT:
                case ADAPTCOPY:
                case SET:
                case SETDEFER:
                case OUTPUT:
                case OUTDIR:
                case OUTFILE:
                case IF:
                case ENDIF:
                case ELIF:
                case ELSE:
                case IFDEF:
                case IFNDEF:
                case REMOVE:
                case SELECT:
                case ENDSELECT:
                case OPTIONUNDEFINED:
                case ENDOPTION:
                case OPTION:
                case OTHERWISE:
                case ENDOTHERWISE:
                case INSERT:
                case ENDINSERT:
                case INSERTBEFORE:
                case INSERTAFTER:
                case EXTENDEDBREAK:
                case ENDBREAK:
                case BREAK:
                case WHILE:
                case ENDWHILE:
                case SETLOOP:
                case ENDSETLOOP:
                case VARS:
                case ENDVARS:
                case VAR:
                case ITER:
                case MESSAGE:
                case EXTENDEDMESSAGE:
                case ENDMESSAGE:
                case MESSAGEIF:
                case EXTENDEDMESSAGEIF:
                case MESSAGEDEBUG:
                case EXTENDEDMESSAGEDEBUG:
                case TEXT:
                case ENDTEXT:
                case REFERENCECHAR:
                case INTEGER:
                case ISLAST:
                case ISFIRST:
                case SIZE:
                case ISNUMERIC:
                case ULCAP:
                case LLCAP:
                case DEBUGMODE:
                case CURRENTFILE:
                case DEFAULTOUTPUT:
                case COMMENTCHAR:
                case QUOTATIONMARK:
                case STRINGNOEND:
                case NOTNEWLINE:
                case COMMENT:
                case ESCCOMMENT:
                case DIGIT:
                case SPECCHAR:
                case LETTER:
                case DOT:
                case ANYCHAR:
                case 84:
                case 85:
                case 86:
                case 87:
                case 88:
                case 89:
                case 90:
                case 91:
                case 92:
                case 93:
                case 94:
                case 95:
                case 96:
                case 97:
                case 98:
                case 99:
                case 100:
                case 101:
                case 102:
                case 103:
                case 104:
                case 105:
                case 106:
                case 107:
                case 108:
                case 109:
                    {
                    alt190=3;
                    }
                    break;

                }

                switch (alt190) {
            	case 1 :
            	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:898:5: se= stringExpression
            	    {
            	    pushFollow(FOLLOW_stringExpression_in_textCommand3886);
            	    se=stringExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, se.getTree());
            	    if ( state.backtracking==0 ) {
            	       writeText((se!=null?input.toString(se.start,se.stop):null)); 
            	    }

            	    }
            	    break;
            	case 2 :
            	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:899:5: c= command
            	    {
            	    pushFollow(FOLLOW_command_in_textCommand3896);
            	    c=command();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, c.getTree());
            	    if ( state.backtracking==0 ) {
            	       writeText((c!=null?input.toString(c.start,c.stop):null));
            	    }

            	    }
            	    break;
            	case 3 :
            	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:900:5: str= ee
            	    {
            	    pushFollow(FOLLOW_ee_in_textCommand3908);
            	    str=ee();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, str.getTree());
            	    if ( state.backtracking==0 ) {
            	       writeText((str!=null?input.toString(str.start,str.stop):null));
            	    }

            	    }
            	    break;

            	default :
            	    break loop190;
                }
            } while (true);

            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:901:7: ( ws )*
            loop191:
            do {
                int alt191=2;
                int LA191_0 = input.LA(1);

                if ( (LA191_0==WS) ) {
                    alt191=1;
                }


                switch (alt191) {
            	case 1 :
            	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:0:0: ws
            	    {
            	    pushFollow(FOLLOW_ws_in_textCommand3919);
            	    ws284=ws();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, ws284.getTree());

            	    }
            	    break;

            	default :
            	    break loop191;
                }
            } while (true);

            COMMANDCHAR285=(Token)match(input,COMMANDCHAR,FOLLOW_COMMANDCHAR_in_textCommand3924); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            COMMANDCHAR285_tree = (CommonTree)adaptor.create(COMMANDCHAR285);
            adaptor.addChild(root_0, COMMANDCHAR285_tree);
            }
            ENDTEXT286=(Token)match(input,ENDTEXT,FOLLOW_ENDTEXT_in_textCommand3926); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ENDTEXT286_tree = (CommonTree)adaptor.create(ENDTEXT286);
            adaptor.addChild(root_0, ENDTEXT286_tree);
            }
            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:902:23: ( NL )?
            int alt192=2;
            int LA192_0 = input.LA(1);

            if ( (LA192_0==NL) ) {
                int LA192_1 = input.LA(2);

                if ( (synpred277_command()) ) {
                    alt192=1;
                }
            }
            switch (alt192) {
                case 1 :
                    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:0:0: NL
                    {
                    NL287=(Token)match(input,NL,FOLLOW_NL_in_textCommand3928); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NL287_tree = (CommonTree)adaptor.create(NL287);
                    adaptor.addChild(root_0, NL287_tree);
                    }

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
              Utils.removeWriteblocker("text");
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException ex) {
                  throw new ARTSyntaxException("Syntax error in File: " + Utils.getCurrentFile() + " line: " + (ex.line == 0 ? Utils.getExpressionLine() : ex.line) + " (" + ex.getStackTrace()[0].getMethodName() + ")");
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "textCommand"

    public static class expression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "expression"
    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:907:1: expression : ( freeExpression | stringExpression | ( ws )* STRING ( ws )* );
    public final commandParser.expression_return expression() throws RecognitionException {
        commandParser.expression_return retval = new commandParser.expression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token STRING291=null;
        commandParser.freeExpression_return freeExpression288 = null;

        commandParser.stringExpression_return stringExpression289 = null;

        commandParser.ws_return ws290 = null;

        commandParser.ws_return ws292 = null;


        CommonTree STRING291_tree=null;

        try {
            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:908:3: ( freeExpression | stringExpression | ( ws )* STRING ( ws )* )
            int alt195=3;
            alt195 = dfa195.predict(input);
            switch (alt195) {
                case 1 :
                    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:908:5: freeExpression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_freeExpression_in_expression3945);
                    freeExpression288=freeExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, freeExpression288.getTree());

                    }
                    break;
                case 2 :
                    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:909:5: stringExpression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_stringExpression_in_expression3951);
                    stringExpression289=stringExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, stringExpression289.getTree());

                    }
                    break;
                case 3 :
                    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:910:5: ( ws )* STRING ( ws )*
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:910:5: ( ws )*
                    loop193:
                    do {
                        int alt193=2;
                        int LA193_0 = input.LA(1);

                        if ( (LA193_0==WS) ) {
                            alt193=1;
                        }


                        switch (alt193) {
                    	case 1 :
                    	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:0:0: ws
                    	    {
                    	    pushFollow(FOLLOW_ws_in_expression3958);
                    	    ws290=ws();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, ws290.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop193;
                        }
                    } while (true);

                    STRING291=(Token)match(input,STRING,FOLLOW_STRING_in_expression3961); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STRING291_tree = (CommonTree)adaptor.create(STRING291);
                    adaptor.addChild(root_0, STRING291_tree);
                    }
                    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:910:16: ( ws )*
                    loop194:
                    do {
                        int alt194=2;
                        int LA194_0 = input.LA(1);

                        if ( (LA194_0==WS) ) {
                            int LA194_1 = input.LA(2);

                            if ( (synpred281_command()) ) {
                                alt194=1;
                            }


                        }


                        switch (alt194) {
                    	case 1 :
                    	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:0:0: ws
                    	    {
                    	    pushFollow(FOLLOW_ws_in_expression3963);
                    	    ws292=ws();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, ws292.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop194;
                        }
                    } while (true);


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException ex) {
                  throw new ARTSyntaxException("Syntax error in File: " + Utils.getCurrentFile() + " line: " + (ex.line == 0 ? Utils.getExpressionLine() : ex.line) + " (" + ex.getStackTrace()[0].getMethodName() + ")");
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "expression"

    public static class stringExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "stringExpression"
    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:913:1: stringExpression : ( ( STRING )* ( nameExpression )+ ( STRING )* )+ ;
    public final commandParser.stringExpression_return stringExpression() throws RecognitionException {
        commandParser.stringExpression_return retval = new commandParser.stringExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token STRING293=null;
        Token STRING295=null;
        commandParser.nameExpression_return nameExpression294 = null;


        CommonTree STRING293_tree=null;
        CommonTree STRING295_tree=null;

        try {
            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:914:3: ( ( ( STRING )* ( nameExpression )+ ( STRING )* )+ )
            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:914:5: ( ( STRING )* ( nameExpression )+ ( STRING )* )+
            {
            root_0 = (CommonTree)adaptor.nil();

            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:914:5: ( ( STRING )* ( nameExpression )+ ( STRING )* )+
            int cnt199=0;
            loop199:
            do {
                int alt199=2;
                int LA199_0 = input.LA(1);

                if ( (LA199_0==STRING) ) {
                    int LA199_2 = input.LA(2);

                    if ( (synpred285_command()) ) {
                        alt199=1;
                    }


                }
                else if ( (LA199_0==EPRESSIONCHAR) ) {
                    int LA199_3 = input.LA(2);

                    if ( (synpred285_command()) ) {
                        alt199=1;
                    }


                }


                switch (alt199) {
            	case 1 :
            	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:914:6: ( STRING )* ( nameExpression )+ ( STRING )*
            	    {
            	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:914:6: ( STRING )*
            	    loop196:
            	    do {
            	        int alt196=2;
            	        int LA196_0 = input.LA(1);

            	        if ( (LA196_0==STRING) ) {
            	            alt196=1;
            	        }


            	        switch (alt196) {
            	    	case 1 :
            	    	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:0:0: STRING
            	    	    {
            	    	    STRING293=(Token)match(input,STRING,FOLLOW_STRING_in_stringExpression3981); if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) {
            	    	    STRING293_tree = (CommonTree)adaptor.create(STRING293);
            	    	    adaptor.addChild(root_0, STRING293_tree);
            	    	    }

            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop196;
            	        }
            	    } while (true);

            	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:914:14: ( nameExpression )+
            	    int cnt197=0;
            	    loop197:
            	    do {
            	        int alt197=2;
            	        int LA197_0 = input.LA(1);

            	        if ( (LA197_0==EPRESSIONCHAR) ) {
            	            int LA197_2 = input.LA(2);

            	            if ( (synpred283_command()) ) {
            	                alt197=1;
            	            }


            	        }


            	        switch (alt197) {
            	    	case 1 :
            	    	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:0:0: nameExpression
            	    	    {
            	    	    pushFollow(FOLLOW_nameExpression_in_stringExpression3984);
            	    	    nameExpression294=nameExpression();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nameExpression294.getTree());

            	    	    }
            	    	    break;

            	    	default :
            	    	    if ( cnt197 >= 1 ) break loop197;
            	    	    if (state.backtracking>0) {state.failed=true; return retval;}
            	                EarlyExitException eee =
            	                    new EarlyExitException(197, input);
            	                throw eee;
            	        }
            	        cnt197++;
            	    } while (true);

            	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:914:30: ( STRING )*
            	    loop198:
            	    do {
            	        int alt198=2;
            	        int LA198_0 = input.LA(1);

            	        if ( (LA198_0==STRING) ) {
            	            int LA198_2 = input.LA(2);

            	            if ( (synpred284_command()) ) {
            	                alt198=1;
            	            }


            	        }


            	        switch (alt198) {
            	    	case 1 :
            	    	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:0:0: STRING
            	    	    {
            	    	    STRING295=(Token)match(input,STRING,FOLLOW_STRING_in_stringExpression3987); if (state.failed) return retval;
            	    	    if ( state.backtracking==0 ) {
            	    	    STRING295_tree = (CommonTree)adaptor.create(STRING295);
            	    	    adaptor.addChild(root_0, STRING295_tree);
            	    	    }

            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop198;
            	        }
            	    } while (true);


            	    }
            	    break;

            	default :
            	    if ( cnt199 >= 1 ) break loop199;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(199, input);
                        throw eee;
                }
                cnt199++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException ex) {
                  throw new ARTSyntaxException("Syntax error in File: " + Utils.getCurrentFile() + " line: " + (ex.line == 0 ? Utils.getExpressionLine() : ex.line) + " (" + ex.getStackTrace()[0].getMethodName() + ")");
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "stringExpression"

    public static class nameExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nameExpression"
    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:917:1: nameExpression : (e= EPRESSIONCHAR ( ws )* simpleExpr ( ws )* EPRESSIONCHAR | e= EPRESSIONCHAR ( ws )* freeExpression ( ws )* ( EPRESSIONCHAR )+ );
    public final commandParser.nameExpression_return nameExpression() throws RecognitionException {
        commandParser.nameExpression_return retval = new commandParser.nameExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token e=null;
        Token EPRESSIONCHAR299=null;
        Token EPRESSIONCHAR303=null;
        commandParser.ws_return ws296 = null;

        commandParser.simpleExpr_return simpleExpr297 = null;

        commandParser.ws_return ws298 = null;

        commandParser.ws_return ws300 = null;

        commandParser.freeExpression_return freeExpression301 = null;

        commandParser.ws_return ws302 = null;


        CommonTree e_tree=null;
        CommonTree EPRESSIONCHAR299_tree=null;
        CommonTree EPRESSIONCHAR303_tree=null;

        try {
            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:918:3: (e= EPRESSIONCHAR ( ws )* simpleExpr ( ws )* EPRESSIONCHAR | e= EPRESSIONCHAR ( ws )* freeExpression ( ws )* ( EPRESSIONCHAR )+ )
            int alt205=2;
            alt205 = dfa205.predict(input);
            switch (alt205) {
                case 1 :
                    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:918:5: e= EPRESSIONCHAR ( ws )* simpleExpr ( ws )* EPRESSIONCHAR
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    e=(Token)match(input,EPRESSIONCHAR,FOLLOW_EPRESSIONCHAR_in_nameExpression4009); if (state.failed) return retval;
                    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:918:26: ( ws )*
                    loop200:
                    do {
                        int alt200=2;
                        int LA200_0 = input.LA(1);

                        if ( (LA200_0==WS) ) {
                            alt200=1;
                        }


                        switch (alt200) {
                    	case 1 :
                    	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:0:0: ws
                    	    {
                    	    pushFollow(FOLLOW_ws_in_nameExpression4012);
                    	    ws296=ws();

                    	    state._fsp--;
                    	    if (state.failed) return retval;

                    	    }
                    	    break;

                    	default :
                    	    break loop200;
                        }
                    } while (true);

                    pushFollow(FOLLOW_simpleExpr_in_nameExpression4016);
                    simpleExpr297=simpleExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, simpleExpr297.getTree());
                    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:918:42: ( ws )*
                    loop201:
                    do {
                        int alt201=2;
                        int LA201_0 = input.LA(1);

                        if ( (LA201_0==WS) ) {
                            alt201=1;
                        }


                        switch (alt201) {
                    	case 1 :
                    	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:0:0: ws
                    	    {
                    	    pushFollow(FOLLOW_ws_in_nameExpression4018);
                    	    ws298=ws();

                    	    state._fsp--;
                    	    if (state.failed) return retval;

                    	    }
                    	    break;

                    	default :
                    	    break loop201;
                        }
                    } while (true);

                    EPRESSIONCHAR299=(Token)match(input,EPRESSIONCHAR,FOLLOW_EPRESSIONCHAR_in_nameExpression4022); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       lineNo = e.getLine();
                    }

                    }
                    break;
                case 2 :
                    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:919:5: e= EPRESSIONCHAR ( ws )* freeExpression ( ws )* ( EPRESSIONCHAR )+
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    e=(Token)match(input,EPRESSIONCHAR,FOLLOW_EPRESSIONCHAR_in_nameExpression4035); if (state.failed) return retval;
                    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:919:26: ( ws )*
                    loop202:
                    do {
                        int alt202=2;
                        int LA202_0 = input.LA(1);

                        if ( (LA202_0==WS) ) {
                            int LA202_2 = input.LA(2);

                            if ( (synpred289_command()) ) {
                                alt202=1;
                            }


                        }


                        switch (alt202) {
                    	case 1 :
                    	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:0:0: ws
                    	    {
                    	    pushFollow(FOLLOW_ws_in_nameExpression4038);
                    	    ws300=ws();

                    	    state._fsp--;
                    	    if (state.failed) return retval;

                    	    }
                    	    break;

                    	default :
                    	    break loop202;
                        }
                    } while (true);

                    pushFollow(FOLLOW_freeExpression_in_nameExpression4042);
                    freeExpression301=freeExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, freeExpression301.getTree());
                    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:919:46: ( ws )*
                    loop203:
                    do {
                        int alt203=2;
                        int LA203_0 = input.LA(1);

                        if ( (LA203_0==WS) ) {
                            alt203=1;
                        }


                        switch (alt203) {
                    	case 1 :
                    	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:0:0: ws
                    	    {
                    	    pushFollow(FOLLOW_ws_in_nameExpression4044);
                    	    ws302=ws();

                    	    state._fsp--;
                    	    if (state.failed) return retval;

                    	    }
                    	    break;

                    	default :
                    	    break loop203;
                        }
                    } while (true);

                    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:919:62: ( EPRESSIONCHAR )+
                    int cnt204=0;
                    loop204:
                    do {
                        int alt204=2;
                        int LA204_0 = input.LA(1);

                        if ( (LA204_0==EPRESSIONCHAR) ) {
                            int LA204_2 = input.LA(2);

                            if ( (synpred291_command()) ) {
                                alt204=1;
                            }


                        }


                        switch (alt204) {
                    	case 1 :
                    	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:0:0: EPRESSIONCHAR
                    	    {
                    	    EPRESSIONCHAR303=(Token)match(input,EPRESSIONCHAR,FOLLOW_EPRESSIONCHAR_in_nameExpression4048); if (state.failed) return retval;

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt204 >= 1 ) break loop204;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(204, input);
                                throw eee;
                        }
                        cnt204++;
                    } while (true);

                    if ( state.backtracking==0 ) {
                      lineNo = e.getLine();
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException ex) {
                  throw new ARTSyntaxException("Syntax error in File: " + Utils.getCurrentFile() + " line: " + (ex.line == 0 ? Utils.getExpressionLine() : ex.line) + " (" + ex.getStackTrace()[0].getMethodName() + ")");
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nameExpression"

    public static class simpleExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "simpleExpr"
    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:922:1: simpleExpr : REFERENCECHAR ( nameExprTerm )* ;
    public final commandParser.simpleExpr_return simpleExpr() throws RecognitionException {
        commandParser.simpleExpr_return retval = new commandParser.simpleExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token REFERENCECHAR304=null;
        commandParser.nameExprTerm_return nameExprTerm305 = null;


        CommonTree REFERENCECHAR304_tree=null;

        try {
            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:923:3: ( REFERENCECHAR ( nameExprTerm )* )
            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:923:5: REFERENCECHAR ( nameExprTerm )*
            {
            root_0 = (CommonTree)adaptor.nil();

            REFERENCECHAR304=(Token)match(input,REFERENCECHAR,FOLLOW_REFERENCECHAR_in_simpleExpr4067); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            REFERENCECHAR304_tree = (CommonTree)adaptor.create(REFERENCECHAR304);
            root_0 = (CommonTree)adaptor.becomeRoot(REFERENCECHAR304_tree, root_0);
            }
            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:923:20: ( nameExprTerm )*
            loop206:
            do {
                int alt206=2;
                int LA206_0 = input.LA(1);

                if ( (LA206_0==IDENT) ) {
                    int LA206_3 = input.LA(2);

                    if ( (synpred292_command()) ) {
                        alt206=1;
                    }


                }
                else if ( (LA206_0==REFERENCECHAR) ) {
                    int LA206_4 = input.LA(2);

                    if ( (synpred292_command()) ) {
                        alt206=1;
                    }


                }


                switch (alt206) {
            	case 1 :
            	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:0:0: nameExprTerm
            	    {
            	    pushFollow(FOLLOW_nameExprTerm_in_simpleExpr4070);
            	    nameExprTerm305=nameExprTerm();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nameExprTerm305.getTree());

            	    }
            	    break;

            	default :
            	    break loop206;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException ex) {
                  throw new ARTSyntaxException("Syntax error in File: " + Utils.getCurrentFile() + " line: " + (ex.line == 0 ? Utils.getExpressionLine() : ex.line) + " (" + ex.getStackTrace()[0].getMethodName() + ")");
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "simpleExpr"

    public static class nameExprTerm_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nameExprTerm"
    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:926:1: nameExprTerm : ( IDENT | REFERENCECHAR simpleExpr | simpleExpr ) ;
    public final commandParser.nameExprTerm_return nameExprTerm() throws RecognitionException {
        commandParser.nameExprTerm_return retval = new commandParser.nameExprTerm_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token IDENT306=null;
        Token REFERENCECHAR307=null;
        commandParser.simpleExpr_return simpleExpr308 = null;

        commandParser.simpleExpr_return simpleExpr309 = null;


        CommonTree IDENT306_tree=null;
        CommonTree REFERENCECHAR307_tree=null;

        try {
            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:927:3: ( ( IDENT | REFERENCECHAR simpleExpr | simpleExpr ) )
            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:927:5: ( IDENT | REFERENCECHAR simpleExpr | simpleExpr )
            {
            root_0 = (CommonTree)adaptor.nil();

            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:927:5: ( IDENT | REFERENCECHAR simpleExpr | simpleExpr )
            int alt207=3;
            int LA207_0 = input.LA(1);

            if ( (LA207_0==IDENT) ) {
                alt207=1;
            }
            else if ( (LA207_0==REFERENCECHAR) ) {
                int LA207_2 = input.LA(2);

                if ( (LA207_2==EOF||LA207_2==IDENT||LA207_2==EPRESSIONCHAR||LA207_2==WS) ) {
                    alt207=3;
                }
                else if ( (LA207_2==REFERENCECHAR) ) {
                    int LA207_4 = input.LA(3);

                    if ( (synpred294_command()) ) {
                        alt207=2;
                    }
                    else if ( (true) ) {
                        alt207=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 207, 4, input);

                        throw nvae;
                    }
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 207, 2, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 207, 0, input);

                throw nvae;
            }
            switch (alt207) {
                case 1 :
                    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:927:6: IDENT
                    {
                    IDENT306=(Token)match(input,IDENT,FOLLOW_IDENT_in_nameExprTerm4088); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    IDENT306_tree = (CommonTree)adaptor.create(IDENT306);
                    adaptor.addChild(root_0, IDENT306_tree);
                    }

                    }
                    break;
                case 2 :
                    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:928:5: REFERENCECHAR simpleExpr
                    {
                    REFERENCECHAR307=(Token)match(input,REFERENCECHAR,FOLLOW_REFERENCECHAR_in_nameExprTerm4095); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    REFERENCECHAR307_tree = (CommonTree)adaptor.create(REFERENCECHAR307);
                    root_0 = (CommonTree)adaptor.becomeRoot(REFERENCECHAR307_tree, root_0);
                    }
                    pushFollow(FOLLOW_simpleExpr_in_nameExprTerm4098);
                    simpleExpr308=simpleExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, simpleExpr308.getTree());

                    }
                    break;
                case 3 :
                    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:929:5: simpleExpr
                    {
                    pushFollow(FOLLOW_simpleExpr_in_nameExprTerm4105);
                    simpleExpr309=simpleExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, simpleExpr309.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException ex) {
                  throw new ARTSyntaxException("Syntax error in File: " + Utils.getCurrentFile() + " line: " + (ex.line == 0 ? Utils.getExpressionLine() : ex.line) + " (" + ex.getStackTrace()[0].getMethodName() + ")");
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nameExprTerm"

    public static class freeExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "freeExpression"
    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:933:1: freeExpression : (r1= relation ( ( '&&' | '||' ) r2= relation )* ) ;
    public final commandParser.freeExpression_return freeExpression() throws RecognitionException {
        commandParser.freeExpression_return retval = new commandParser.freeExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token string_literal310=null;
        Token string_literal311=null;
        commandParser.relation_return r1 = null;

        commandParser.relation_return r2 = null;


        CommonTree string_literal310_tree=null;
        CommonTree string_literal311_tree=null;

        try {
            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:934:3: ( (r1= relation ( ( '&&' | '||' ) r2= relation )* ) )
            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:934:5: (r1= relation ( ( '&&' | '||' ) r2= relation )* )
            {
            root_0 = (CommonTree)adaptor.nil();

            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:934:5: (r1= relation ( ( '&&' | '||' ) r2= relation )* )
            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:934:7: r1= relation ( ( '&&' | '||' ) r2= relation )*
            {
            pushFollow(FOLLOW_relation_in_freeExpression4127);
            r1=relation();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, r1.getTree());
            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:934:20: ( ( '&&' | '||' ) r2= relation )*
            loop209:
            do {
                int alt209=2;
                alt209 = dfa209.predict(input);
                switch (alt209) {
            	case 1 :
            	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:934:21: ( '&&' | '||' ) r2= relation
            	    {
            	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:934:21: ( '&&' | '||' )
            	    int alt208=2;
            	    int LA208_0 = input.LA(1);

            	    if ( (LA208_0==89) ) {
            	        alt208=1;
            	    }
            	    else if ( (LA208_0==90) ) {
            	        alt208=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 208, 0, input);

            	        throw nvae;
            	    }
            	    switch (alt208) {
            	        case 1 :
            	            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:934:22: '&&'
            	            {
            	            string_literal310=(Token)match(input,89,FOLLOW_89_in_freeExpression4132); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            string_literal310_tree = (CommonTree)adaptor.create(string_literal310);
            	            root_0 = (CommonTree)adaptor.becomeRoot(string_literal310_tree, root_0);
            	            }

            	            }
            	            break;
            	        case 2 :
            	            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:934:30: '||'
            	            {
            	            string_literal311=(Token)match(input,90,FOLLOW_90_in_freeExpression4137); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            string_literal311_tree = (CommonTree)adaptor.create(string_literal311);
            	            root_0 = (CommonTree)adaptor.becomeRoot(string_literal311_tree, root_0);
            	            }

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_relation_in_freeExpression4143);
            	    r2=relation();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, r2.getTree());

            	    }
            	    break;

            	default :
            	    break loop209;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException ex) {
                  throw new ARTSyntaxException("Syntax error in File: " + Utils.getCurrentFile() + " line: " + (ex.line == 0 ? Utils.getExpressionLine() : ex.line) + " (" + ex.getStackTrace()[0].getMethodName() + ")");
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "freeExpression"

    public static class arithmeticTerm_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "arithmeticTerm"
    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:941:1: arithmeticTerm : ( ws )* ( IDENT | '(' ( ws )* freeExpression ( ws )* ')' | ( 'true' | 'false' ) | INTEGER ) ( ws )* ;
    public final commandParser.arithmeticTerm_return arithmeticTerm() throws RecognitionException {
        commandParser.arithmeticTerm_return retval = new commandParser.arithmeticTerm_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token IDENT313=null;
        Token char_literal314=null;
        Token char_literal318=null;
        Token set319=null;
        Token INTEGER320=null;
        commandParser.ws_return ws312 = null;

        commandParser.ws_return ws315 = null;

        commandParser.freeExpression_return freeExpression316 = null;

        commandParser.ws_return ws317 = null;

        commandParser.ws_return ws321 = null;


        CommonTree IDENT313_tree=null;
        CommonTree char_literal314_tree=null;
        CommonTree char_literal318_tree=null;
        CommonTree set319_tree=null;
        CommonTree INTEGER320_tree=null;

        try {
            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:942:5: ( ( ws )* ( IDENT | '(' ( ws )* freeExpression ( ws )* ')' | ( 'true' | 'false' ) | INTEGER ) ( ws )* )
            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:942:7: ( ws )* ( IDENT | '(' ( ws )* freeExpression ( ws )* ')' | ( 'true' | 'false' ) | INTEGER ) ( ws )*
            {
            root_0 = (CommonTree)adaptor.nil();

            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:942:7: ( ws )*
            loop210:
            do {
                int alt210=2;
                int LA210_0 = input.LA(1);

                if ( (LA210_0==WS) ) {
                    alt210=1;
                }


                switch (alt210) {
            	case 1 :
            	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:0:0: ws
            	    {
            	    pushFollow(FOLLOW_ws_in_arithmeticTerm4166);
            	    ws312=ws();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, ws312.getTree());

            	    }
            	    break;

            	default :
            	    break loop210;
                }
            } while (true);

            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:942:11: ( IDENT | '(' ( ws )* freeExpression ( ws )* ')' | ( 'true' | 'false' ) | INTEGER )
            int alt213=4;
            switch ( input.LA(1) ) {
            case IDENT:
                {
                alt213=1;
                }
                break;
            case 86:
                {
                alt213=2;
                }
                break;
            case 91:
            case 92:
                {
                alt213=3;
                }
                break;
            case INTEGER:
                {
                alt213=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 213, 0, input);

                throw nvae;
            }

            switch (alt213) {
                case 1 :
                    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:942:12: IDENT
                    {
                    IDENT313=(Token)match(input,IDENT,FOLLOW_IDENT_in_arithmeticTerm4170); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    IDENT313_tree = (CommonTree)adaptor.create(IDENT313);
                    adaptor.addChild(root_0, IDENT313_tree);
                    }

                    }
                    break;
                case 2 :
                    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:943:7: '(' ( ws )* freeExpression ( ws )* ')'
                    {
                    char_literal314=(Token)match(input,86,FOLLOW_86_in_arithmeticTerm4178); if (state.failed) return retval;
                    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:943:14: ( ws )*
                    loop211:
                    do {
                        int alt211=2;
                        int LA211_0 = input.LA(1);

                        if ( (LA211_0==WS) ) {
                            int LA211_2 = input.LA(2);

                            if ( (synpred299_command()) ) {
                                alt211=1;
                            }


                        }


                        switch (alt211) {
                    	case 1 :
                    	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:0:0: ws
                    	    {
                    	    pushFollow(FOLLOW_ws_in_arithmeticTerm4181);
                    	    ws315=ws();

                    	    state._fsp--;
                    	    if (state.failed) return retval;

                    	    }
                    	    break;

                    	default :
                    	    break loop211;
                        }
                    } while (true);

                    pushFollow(FOLLOW_freeExpression_in_arithmeticTerm4185);
                    freeExpression316=freeExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, freeExpression316.getTree());
                    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:943:34: ( ws )*
                    loop212:
                    do {
                        int alt212=2;
                        int LA212_0 = input.LA(1);

                        if ( (LA212_0==WS) ) {
                            alt212=1;
                        }


                        switch (alt212) {
                    	case 1 :
                    	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:0:0: ws
                    	    {
                    	    pushFollow(FOLLOW_ws_in_arithmeticTerm4187);
                    	    ws317=ws();

                    	    state._fsp--;
                    	    if (state.failed) return retval;

                    	    }
                    	    break;

                    	default :
                    	    break loop212;
                        }
                    } while (true);

                    char_literal318=(Token)match(input,87,FOLLOW_87_in_arithmeticTerm4191); if (state.failed) return retval;

                    }
                    break;
                case 3 :
                    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:944:7: ( 'true' | 'false' )
                    {
                    set319=(Token)input.LT(1);
                    if ( (input.LA(1)>=91 && input.LA(1)<=92) ) {
                        input.consume();
                        if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set319));
                        state.errorRecovery=false;state.failed=false;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }


                    }
                    break;
                case 4 :
                    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:945:7: INTEGER
                    {
                    INTEGER320=(Token)match(input,INTEGER,FOLLOW_INTEGER_in_arithmeticTerm4214); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    INTEGER320_tree = (CommonTree)adaptor.create(INTEGER320);
                    adaptor.addChild(root_0, INTEGER320_tree);
                    }

                    }
                    break;

            }

            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:945:16: ( ws )*
            loop214:
            do {
                int alt214=2;
                int LA214_0 = input.LA(1);

                if ( (LA214_0==WS) ) {
                    int LA214_2 = input.LA(2);

                    if ( (synpred304_command()) ) {
                        alt214=1;
                    }


                }


                switch (alt214) {
            	case 1 :
            	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:0:0: ws
            	    {
            	    pushFollow(FOLLOW_ws_in_arithmeticTerm4217);
            	    ws321=ws();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, ws321.getTree());

            	    }
            	    break;

            	default :
            	    break loop214;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException ex) {
                  throw new ARTSyntaxException("Syntax error in File: " + Utils.getCurrentFile() + " line: " + (ex.line == 0 ? Utils.getExpressionLine() : ex.line) + " (" + ex.getStackTrace()[0].getMethodName() + ")");
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "arithmeticTerm"

    public static class relation_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "relation"
    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:948:1: relation : ( add ( ( '==' | '!=' | '<' | '<=' | '>=' | '>' ) add )* ) ;
    public final commandParser.relation_return relation() throws RecognitionException {
        commandParser.relation_return retval = new commandParser.relation_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token string_literal323=null;
        Token string_literal324=null;
        Token char_literal325=null;
        Token string_literal326=null;
        Token string_literal327=null;
        Token char_literal328=null;
        commandParser.add_return add322 = null;

        commandParser.add_return add329 = null;


        CommonTree string_literal323_tree=null;
        CommonTree string_literal324_tree=null;
        CommonTree char_literal325_tree=null;
        CommonTree string_literal326_tree=null;
        CommonTree string_literal327_tree=null;
        CommonTree char_literal328_tree=null;

        try {
            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:949:3: ( ( add ( ( '==' | '!=' | '<' | '<=' | '>=' | '>' ) add )* ) )
            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:949:5: ( add ( ( '==' | '!=' | '<' | '<=' | '>=' | '>' ) add )* )
            {
            root_0 = (CommonTree)adaptor.nil();

            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:949:5: ( add ( ( '==' | '!=' | '<' | '<=' | '>=' | '>' ) add )* )
            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:949:6: add ( ( '==' | '!=' | '<' | '<=' | '>=' | '>' ) add )*
            {
            pushFollow(FOLLOW_add_in_relation4240);
            add322=add();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, add322.getTree());
            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:949:10: ( ( '==' | '!=' | '<' | '<=' | '>=' | '>' ) add )*
            loop216:
            do {
                int alt216=2;
                alt216 = dfa216.predict(input);
                switch (alt216) {
            	case 1 :
            	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:949:11: ( '==' | '!=' | '<' | '<=' | '>=' | '>' ) add
            	    {
            	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:949:11: ( '==' | '!=' | '<' | '<=' | '>=' | '>' )
            	    int alt215=6;
            	    switch ( input.LA(1) ) {
            	    case 93:
            	        {
            	        alt215=1;
            	        }
            	        break;
            	    case 94:
            	        {
            	        alt215=2;
            	        }
            	        break;
            	    case 95:
            	        {
            	        alt215=3;
            	        }
            	        break;
            	    case 96:
            	        {
            	        alt215=4;
            	        }
            	        break;
            	    case 97:
            	        {
            	        alt215=5;
            	        }
            	        break;
            	    case 98:
            	        {
            	        alt215=6;
            	        }
            	        break;
            	    default:
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 215, 0, input);

            	        throw nvae;
            	    }

            	    switch (alt215) {
            	        case 1 :
            	            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:949:12: '=='
            	            {
            	            string_literal323=(Token)match(input,93,FOLLOW_93_in_relation4244); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            string_literal323_tree = (CommonTree)adaptor.create(string_literal323);
            	            root_0 = (CommonTree)adaptor.becomeRoot(string_literal323_tree, root_0);
            	            }

            	            }
            	            break;
            	        case 2 :
            	            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:949:20: '!='
            	            {
            	            string_literal324=(Token)match(input,94,FOLLOW_94_in_relation4249); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            string_literal324_tree = (CommonTree)adaptor.create(string_literal324);
            	            root_0 = (CommonTree)adaptor.becomeRoot(string_literal324_tree, root_0);
            	            }

            	            }
            	            break;
            	        case 3 :
            	            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:949:28: '<'
            	            {
            	            char_literal325=(Token)match(input,95,FOLLOW_95_in_relation4254); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            char_literal325_tree = (CommonTree)adaptor.create(char_literal325);
            	            root_0 = (CommonTree)adaptor.becomeRoot(char_literal325_tree, root_0);
            	            }

            	            }
            	            break;
            	        case 4 :
            	            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:949:35: '<='
            	            {
            	            string_literal326=(Token)match(input,96,FOLLOW_96_in_relation4259); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            string_literal326_tree = (CommonTree)adaptor.create(string_literal326);
            	            root_0 = (CommonTree)adaptor.becomeRoot(string_literal326_tree, root_0);
            	            }

            	            }
            	            break;
            	        case 5 :
            	            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:949:43: '>='
            	            {
            	            string_literal327=(Token)match(input,97,FOLLOW_97_in_relation4264); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            string_literal327_tree = (CommonTree)adaptor.create(string_literal327);
            	            root_0 = (CommonTree)adaptor.becomeRoot(string_literal327_tree, root_0);
            	            }

            	            }
            	            break;
            	        case 6 :
            	            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:949:51: '>'
            	            {
            	            char_literal328=(Token)match(input,98,FOLLOW_98_in_relation4269); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            char_literal328_tree = (CommonTree)adaptor.create(char_literal328);
            	            root_0 = (CommonTree)adaptor.becomeRoot(char_literal328_tree, root_0);
            	            }

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_add_in_relation4273);
            	    add329=add();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, add329.getTree());

            	    }
            	    break;

            	default :
            	    break loop216;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException ex) {
                  throw new ARTSyntaxException("Syntax error in File: " + Utils.getCurrentFile() + " line: " + (ex.line == 0 ? Utils.getExpressionLine() : ex.line) + " (" + ex.getStackTrace()[0].getMethodName() + ")");
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "relation"

    public static class add_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "add"
    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:952:1: add : mult ( ( '+' | '-' ) mult )* ;
    public final commandParser.add_return add() throws RecognitionException {
        commandParser.add_return retval = new commandParser.add_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token char_literal331=null;
        Token char_literal332=null;
        commandParser.mult_return mult330 = null;

        commandParser.mult_return mult333 = null;


        CommonTree char_literal331_tree=null;
        CommonTree char_literal332_tree=null;

        try {
            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:953:3: ( mult ( ( '+' | '-' ) mult )* )
            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:953:5: mult ( ( '+' | '-' ) mult )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_mult_in_add4289);
            mult330=mult();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, mult330.getTree());
            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:953:10: ( ( '+' | '-' ) mult )*
            loop218:
            do {
                int alt218=2;
                alt218 = dfa218.predict(input);
                switch (alt218) {
            	case 1 :
            	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:953:11: ( '+' | '-' ) mult
            	    {
            	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:953:11: ( '+' | '-' )
            	    int alt217=2;
            	    int LA217_0 = input.LA(1);

            	    if ( (LA217_0==99) ) {
            	        alt217=1;
            	    }
            	    else if ( (LA217_0==100) ) {
            	        alt217=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 217, 0, input);

            	        throw nvae;
            	    }
            	    switch (alt217) {
            	        case 1 :
            	            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:953:12: '+'
            	            {
            	            char_literal331=(Token)match(input,99,FOLLOW_99_in_add4293); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            char_literal331_tree = (CommonTree)adaptor.create(char_literal331);
            	            root_0 = (CommonTree)adaptor.becomeRoot(char_literal331_tree, root_0);
            	            }

            	            }
            	            break;
            	        case 2 :
            	            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:953:19: '-'
            	            {
            	            char_literal332=(Token)match(input,100,FOLLOW_100_in_add4298); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            char_literal332_tree = (CommonTree)adaptor.create(char_literal332);
            	            root_0 = (CommonTree)adaptor.becomeRoot(char_literal332_tree, root_0);
            	            }

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_mult_in_add4302);
            	    mult333=mult();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, mult333.getTree());

            	    }
            	    break;

            	default :
            	    break loop218;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException ex) {
                  throw new ARTSyntaxException("Syntax error in File: " + Utils.getCurrentFile() + " line: " + (ex.line == 0 ? Utils.getExpressionLine() : ex.line) + " (" + ex.getStackTrace()[0].getMethodName() + ")");
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "add"

    public static class mult_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "mult"
    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:956:1: mult : unary ( ( '*' | '/' ) unary )* ;
    public final commandParser.mult_return mult() throws RecognitionException {
        commandParser.mult_return retval = new commandParser.mult_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token char_literal335=null;
        Token char_literal336=null;
        commandParser.unary_return unary334 = null;

        commandParser.unary_return unary337 = null;


        CommonTree char_literal335_tree=null;
        CommonTree char_literal336_tree=null;

        try {
            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:957:3: ( unary ( ( '*' | '/' ) unary )* )
            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:957:5: unary ( ( '*' | '/' ) unary )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_unary_in_mult4319);
            unary334=unary();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, unary334.getTree());
            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:957:11: ( ( '*' | '/' ) unary )*
            loop220:
            do {
                int alt220=2;
                alt220 = dfa220.predict(input);
                switch (alt220) {
            	case 1 :
            	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:957:12: ( '*' | '/' ) unary
            	    {
            	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:957:12: ( '*' | '/' )
            	    int alt219=2;
            	    int LA219_0 = input.LA(1);

            	    if ( (LA219_0==101) ) {
            	        alt219=1;
            	    }
            	    else if ( (LA219_0==102) ) {
            	        alt219=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 219, 0, input);

            	        throw nvae;
            	    }
            	    switch (alt219) {
            	        case 1 :
            	            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:957:13: '*'
            	            {
            	            char_literal335=(Token)match(input,101,FOLLOW_101_in_mult4323); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            char_literal335_tree = (CommonTree)adaptor.create(char_literal335);
            	            root_0 = (CommonTree)adaptor.becomeRoot(char_literal335_tree, root_0);
            	            }

            	            }
            	            break;
            	        case 2 :
            	            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:957:20: '/'
            	            {
            	            char_literal336=(Token)match(input,102,FOLLOW_102_in_mult4328); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            char_literal336_tree = (CommonTree)adaptor.create(char_literal336);
            	            root_0 = (CommonTree)adaptor.becomeRoot(char_literal336_tree, root_0);
            	            }

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_unary_in_mult4332);
            	    unary337=unary();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, unary337.getTree());

            	    }
            	    break;

            	default :
            	    break loop220;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException ex) {
                  throw new ARTSyntaxException("Syntax error in File: " + Utils.getCurrentFile() + " line: " + (ex.line == 0 ? Utils.getExpressionLine() : ex.line) + " (" + ex.getStackTrace()[0].getMethodName() + ")");
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "mult"

    public static class unary_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unary"
    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:960:1: unary : ( ( '+' | negation )* arithmeticTerm | ( ws )* defined ( ws )* arithmeticTerm | ( ws )* bpv );
    public final commandParser.unary_return unary() throws RecognitionException {
        commandParser.unary_return retval = new commandParser.unary_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token char_literal338=null;
        commandParser.negation_return negation339 = null;

        commandParser.arithmeticTerm_return arithmeticTerm340 = null;

        commandParser.ws_return ws341 = null;

        commandParser.defined_return defined342 = null;

        commandParser.ws_return ws343 = null;

        commandParser.arithmeticTerm_return arithmeticTerm344 = null;

        commandParser.ws_return ws345 = null;

        commandParser.bpv_return bpv346 = null;


        CommonTree char_literal338_tree=null;

        try {
            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:961:3: ( ( '+' | negation )* arithmeticTerm | ( ws )* defined ( ws )* arithmeticTerm | ( ws )* bpv )
            int alt225=3;
            alt225 = dfa225.predict(input);
            switch (alt225) {
                case 1 :
                    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:961:5: ( '+' | negation )* arithmeticTerm
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:961:5: ( '+' | negation )*
                    loop221:
                    do {
                        int alt221=3;
                        int LA221_0 = input.LA(1);

                        if ( (LA221_0==99) ) {
                            alt221=1;
                        }
                        else if ( (LA221_0==100) ) {
                            alt221=2;
                        }


                        switch (alt221) {
                    	case 1 :
                    	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:961:6: '+'
                    	    {
                    	    char_literal338=(Token)match(input,99,FOLLOW_99_in_unary4350); if (state.failed) return retval;

                    	    }
                    	    break;
                    	case 2 :
                    	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:961:13: negation
                    	    {
                    	    pushFollow(FOLLOW_negation_in_unary4355);
                    	    negation339=negation();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) root_0 = (CommonTree)adaptor.becomeRoot(negation339.getTree(), root_0);

                    	    }
                    	    break;

                    	default :
                    	    break loop221;
                        }
                    } while (true);

                    pushFollow(FOLLOW_arithmeticTerm_in_unary4360);
                    arithmeticTerm340=arithmeticTerm();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, arithmeticTerm340.getTree());

                    }
                    break;
                case 2 :
                    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:962:5: ( ws )* defined ( ws )* arithmeticTerm
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:962:5: ( ws )*
                    loop222:
                    do {
                        int alt222=2;
                        int LA222_0 = input.LA(1);

                        if ( (LA222_0==WS) ) {
                            alt222=1;
                        }


                        switch (alt222) {
                    	case 1 :
                    	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:0:0: ws
                    	    {
                    	    pushFollow(FOLLOW_ws_in_unary4366);
                    	    ws341=ws();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, ws341.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop222;
                        }
                    } while (true);

                    pushFollow(FOLLOW_defined_in_unary4369);
                    defined342=defined();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) root_0 = (CommonTree)adaptor.becomeRoot(defined342.getTree(), root_0);
                    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:962:18: ( ws )*
                    loop223:
                    do {
                        int alt223=2;
                        int LA223_0 = input.LA(1);

                        if ( (LA223_0==WS) ) {
                            int LA223_1 = input.LA(2);

                            if ( (synpred319_command()) ) {
                                alt223=1;
                            }


                        }


                        switch (alt223) {
                    	case 1 :
                    	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:0:0: ws
                    	    {
                    	    pushFollow(FOLLOW_ws_in_unary4372);
                    	    ws343=ws();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, ws343.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop223;
                        }
                    } while (true);

                    pushFollow(FOLLOW_arithmeticTerm_in_unary4375);
                    arithmeticTerm344=arithmeticTerm();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, arithmeticTerm344.getTree());

                    }
                    break;
                case 3 :
                    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:963:5: ( ws )* bpv
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:963:5: ( ws )*
                    loop224:
                    do {
                        int alt224=2;
                        int LA224_0 = input.LA(1);

                        if ( (LA224_0==WS) ) {
                            alt224=1;
                        }


                        switch (alt224) {
                    	case 1 :
                    	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:0:0: ws
                    	    {
                    	    pushFollow(FOLLOW_ws_in_unary4381);
                    	    ws345=ws();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, ws345.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop224;
                        }
                    } while (true);

                    pushFollow(FOLLOW_bpv_in_unary4384);
                    bpv346=bpv();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, bpv346.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException ex) {
                  throw new ARTSyntaxException("Syntax error in File: " + Utils.getCurrentFile() + " line: " + (ex.line == 0 ? Utils.getExpressionLine() : ex.line) + " (" + ex.getStackTrace()[0].getMethodName() + ")");
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "unary"

    public static class bpv_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "bpv"
    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:967:1: bpv : ( artvarchar ISLAST arithmeticTerm | artvarchar ISFIRST arithmeticTerm | artvarchar SIZE arithmeticTerm | artvarchar ISNUMERIC arithmeticTerm | artvarchar ULCAP arithmeticTerm | artvarchar LLCAP arithmeticTerm | artvarchar DEBUGMODE ( ws )* | artvarchar CURRENTFILE ( ws )* | artvarchar DEFAULTOUTPUT ( ws )* | artvarchar OUTFILE ( ws )* | artvarchar OUTDIR ( ws )* );
    public final commandParser.bpv_return bpv() throws RecognitionException {
        commandParser.bpv_return retval = new commandParser.bpv_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token ISLAST348=null;
        Token ISFIRST351=null;
        Token SIZE354=null;
        Token ISNUMERIC357=null;
        Token ULCAP360=null;
        Token LLCAP363=null;
        Token DEBUGMODE366=null;
        Token CURRENTFILE369=null;
        Token DEFAULTOUTPUT372=null;
        Token OUTFILE375=null;
        Token OUTDIR378=null;
        commandParser.artvarchar_return artvarchar347 = null;

        commandParser.arithmeticTerm_return arithmeticTerm349 = null;

        commandParser.artvarchar_return artvarchar350 = null;

        commandParser.arithmeticTerm_return arithmeticTerm352 = null;

        commandParser.artvarchar_return artvarchar353 = null;

        commandParser.arithmeticTerm_return arithmeticTerm355 = null;

        commandParser.artvarchar_return artvarchar356 = null;

        commandParser.arithmeticTerm_return arithmeticTerm358 = null;

        commandParser.artvarchar_return artvarchar359 = null;

        commandParser.arithmeticTerm_return arithmeticTerm361 = null;

        commandParser.artvarchar_return artvarchar362 = null;

        commandParser.arithmeticTerm_return arithmeticTerm364 = null;

        commandParser.artvarchar_return artvarchar365 = null;

        commandParser.ws_return ws367 = null;

        commandParser.artvarchar_return artvarchar368 = null;

        commandParser.ws_return ws370 = null;

        commandParser.artvarchar_return artvarchar371 = null;

        commandParser.ws_return ws373 = null;

        commandParser.artvarchar_return artvarchar374 = null;

        commandParser.ws_return ws376 = null;

        commandParser.artvarchar_return artvarchar377 = null;

        commandParser.ws_return ws379 = null;


        CommonTree ISLAST348_tree=null;
        CommonTree ISFIRST351_tree=null;
        CommonTree SIZE354_tree=null;
        CommonTree ISNUMERIC357_tree=null;
        CommonTree ULCAP360_tree=null;
        CommonTree LLCAP363_tree=null;
        CommonTree DEBUGMODE366_tree=null;
        CommonTree CURRENTFILE369_tree=null;
        CommonTree DEFAULTOUTPUT372_tree=null;
        CommonTree OUTFILE375_tree=null;
        CommonTree OUTDIR378_tree=null;

        try {
            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:968:3: ( artvarchar ISLAST arithmeticTerm | artvarchar ISFIRST arithmeticTerm | artvarchar SIZE arithmeticTerm | artvarchar ISNUMERIC arithmeticTerm | artvarchar ULCAP arithmeticTerm | artvarchar LLCAP arithmeticTerm | artvarchar DEBUGMODE ( ws )* | artvarchar CURRENTFILE ( ws )* | artvarchar DEFAULTOUTPUT ( ws )* | artvarchar OUTFILE ( ws )* | artvarchar OUTDIR ( ws )* )
            int alt231=11;
            alt231 = dfa231.predict(input);
            switch (alt231) {
                case 1 :
                    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:968:5: artvarchar ISLAST arithmeticTerm
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_artvarchar_in_bpv4401);
                    artvarchar347=artvarchar();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) root_0 = (CommonTree)adaptor.becomeRoot(artvarchar347.getTree(), root_0);
                    ISLAST348=(Token)match(input,ISLAST,FOLLOW_ISLAST_in_bpv4404); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ISLAST348_tree = (CommonTree)adaptor.create(ISLAST348);
                    adaptor.addChild(root_0, ISLAST348_tree);
                    }
                    pushFollow(FOLLOW_arithmeticTerm_in_bpv4406);
                    arithmeticTerm349=arithmeticTerm();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, arithmeticTerm349.getTree());

                    }
                    break;
                case 2 :
                    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:969:5: artvarchar ISFIRST arithmeticTerm
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_artvarchar_in_bpv4412);
                    artvarchar350=artvarchar();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) root_0 = (CommonTree)adaptor.becomeRoot(artvarchar350.getTree(), root_0);
                    ISFIRST351=(Token)match(input,ISFIRST,FOLLOW_ISFIRST_in_bpv4415); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ISFIRST351_tree = (CommonTree)adaptor.create(ISFIRST351);
                    adaptor.addChild(root_0, ISFIRST351_tree);
                    }
                    pushFollow(FOLLOW_arithmeticTerm_in_bpv4417);
                    arithmeticTerm352=arithmeticTerm();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, arithmeticTerm352.getTree());

                    }
                    break;
                case 3 :
                    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:970:5: artvarchar SIZE arithmeticTerm
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_artvarchar_in_bpv4423);
                    artvarchar353=artvarchar();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) root_0 = (CommonTree)adaptor.becomeRoot(artvarchar353.getTree(), root_0);
                    SIZE354=(Token)match(input,SIZE,FOLLOW_SIZE_in_bpv4426); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SIZE354_tree = (CommonTree)adaptor.create(SIZE354);
                    adaptor.addChild(root_0, SIZE354_tree);
                    }
                    pushFollow(FOLLOW_arithmeticTerm_in_bpv4428);
                    arithmeticTerm355=arithmeticTerm();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, arithmeticTerm355.getTree());

                    }
                    break;
                case 4 :
                    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:971:5: artvarchar ISNUMERIC arithmeticTerm
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_artvarchar_in_bpv4434);
                    artvarchar356=artvarchar();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) root_0 = (CommonTree)adaptor.becomeRoot(artvarchar356.getTree(), root_0);
                    ISNUMERIC357=(Token)match(input,ISNUMERIC,FOLLOW_ISNUMERIC_in_bpv4437); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ISNUMERIC357_tree = (CommonTree)adaptor.create(ISNUMERIC357);
                    adaptor.addChild(root_0, ISNUMERIC357_tree);
                    }
                    pushFollow(FOLLOW_arithmeticTerm_in_bpv4439);
                    arithmeticTerm358=arithmeticTerm();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, arithmeticTerm358.getTree());

                    }
                    break;
                case 5 :
                    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:972:5: artvarchar ULCAP arithmeticTerm
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_artvarchar_in_bpv4445);
                    artvarchar359=artvarchar();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) root_0 = (CommonTree)adaptor.becomeRoot(artvarchar359.getTree(), root_0);
                    ULCAP360=(Token)match(input,ULCAP,FOLLOW_ULCAP_in_bpv4448); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ULCAP360_tree = (CommonTree)adaptor.create(ULCAP360);
                    adaptor.addChild(root_0, ULCAP360_tree);
                    }
                    pushFollow(FOLLOW_arithmeticTerm_in_bpv4450);
                    arithmeticTerm361=arithmeticTerm();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, arithmeticTerm361.getTree());

                    }
                    break;
                case 6 :
                    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:973:5: artvarchar LLCAP arithmeticTerm
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_artvarchar_in_bpv4456);
                    artvarchar362=artvarchar();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) root_0 = (CommonTree)adaptor.becomeRoot(artvarchar362.getTree(), root_0);
                    LLCAP363=(Token)match(input,LLCAP,FOLLOW_LLCAP_in_bpv4459); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LLCAP363_tree = (CommonTree)adaptor.create(LLCAP363);
                    adaptor.addChild(root_0, LLCAP363_tree);
                    }
                    pushFollow(FOLLOW_arithmeticTerm_in_bpv4461);
                    arithmeticTerm364=arithmeticTerm();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, arithmeticTerm364.getTree());

                    }
                    break;
                case 7 :
                    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:974:5: artvarchar DEBUGMODE ( ws )*
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_artvarchar_in_bpv4467);
                    artvarchar365=artvarchar();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) root_0 = (CommonTree)adaptor.becomeRoot(artvarchar365.getTree(), root_0);
                    DEBUGMODE366=(Token)match(input,DEBUGMODE,FOLLOW_DEBUGMODE_in_bpv4470); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DEBUGMODE366_tree = (CommonTree)adaptor.create(DEBUGMODE366);
                    adaptor.addChild(root_0, DEBUGMODE366_tree);
                    }
                    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:974:27: ( ws )*
                    loop226:
                    do {
                        int alt226=2;
                        int LA226_0 = input.LA(1);

                        if ( (LA226_0==WS) ) {
                            int LA226_2 = input.LA(2);

                            if ( (synpred328_command()) ) {
                                alt226=1;
                            }


                        }


                        switch (alt226) {
                    	case 1 :
                    	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:0:0: ws
                    	    {
                    	    pushFollow(FOLLOW_ws_in_bpv4472);
                    	    ws367=ws();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, ws367.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop226;
                        }
                    } while (true);


                    }
                    break;
                case 8 :
                    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:975:5: artvarchar CURRENTFILE ( ws )*
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_artvarchar_in_bpv4479);
                    artvarchar368=artvarchar();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) root_0 = (CommonTree)adaptor.becomeRoot(artvarchar368.getTree(), root_0);
                    CURRENTFILE369=(Token)match(input,CURRENTFILE,FOLLOW_CURRENTFILE_in_bpv4482); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    CURRENTFILE369_tree = (CommonTree)adaptor.create(CURRENTFILE369);
                    adaptor.addChild(root_0, CURRENTFILE369_tree);
                    }
                    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:975:29: ( ws )*
                    loop227:
                    do {
                        int alt227=2;
                        int LA227_0 = input.LA(1);

                        if ( (LA227_0==WS) ) {
                            int LA227_2 = input.LA(2);

                            if ( (synpred330_command()) ) {
                                alt227=1;
                            }


                        }


                        switch (alt227) {
                    	case 1 :
                    	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:0:0: ws
                    	    {
                    	    pushFollow(FOLLOW_ws_in_bpv4484);
                    	    ws370=ws();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, ws370.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop227;
                        }
                    } while (true);


                    }
                    break;
                case 9 :
                    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:976:5: artvarchar DEFAULTOUTPUT ( ws )*
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_artvarchar_in_bpv4491);
                    artvarchar371=artvarchar();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) root_0 = (CommonTree)adaptor.becomeRoot(artvarchar371.getTree(), root_0);
                    DEFAULTOUTPUT372=(Token)match(input,DEFAULTOUTPUT,FOLLOW_DEFAULTOUTPUT_in_bpv4494); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DEFAULTOUTPUT372_tree = (CommonTree)adaptor.create(DEFAULTOUTPUT372);
                    adaptor.addChild(root_0, DEFAULTOUTPUT372_tree);
                    }
                    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:976:31: ( ws )*
                    loop228:
                    do {
                        int alt228=2;
                        int LA228_0 = input.LA(1);

                        if ( (LA228_0==WS) ) {
                            int LA228_2 = input.LA(2);

                            if ( (synpred332_command()) ) {
                                alt228=1;
                            }


                        }


                        switch (alt228) {
                    	case 1 :
                    	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:0:0: ws
                    	    {
                    	    pushFollow(FOLLOW_ws_in_bpv4496);
                    	    ws373=ws();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, ws373.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop228;
                        }
                    } while (true);


                    }
                    break;
                case 10 :
                    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:977:5: artvarchar OUTFILE ( ws )*
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_artvarchar_in_bpv4503);
                    artvarchar374=artvarchar();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) root_0 = (CommonTree)adaptor.becomeRoot(artvarchar374.getTree(), root_0);
                    OUTFILE375=(Token)match(input,OUTFILE,FOLLOW_OUTFILE_in_bpv4506); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    OUTFILE375_tree = (CommonTree)adaptor.create(OUTFILE375);
                    adaptor.addChild(root_0, OUTFILE375_tree);
                    }
                    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:977:25: ( ws )*
                    loop229:
                    do {
                        int alt229=2;
                        int LA229_0 = input.LA(1);

                        if ( (LA229_0==WS) ) {
                            int LA229_2 = input.LA(2);

                            if ( (synpred334_command()) ) {
                                alt229=1;
                            }


                        }


                        switch (alt229) {
                    	case 1 :
                    	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:0:0: ws
                    	    {
                    	    pushFollow(FOLLOW_ws_in_bpv4508);
                    	    ws376=ws();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, ws376.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop229;
                        }
                    } while (true);


                    }
                    break;
                case 11 :
                    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:978:5: artvarchar OUTDIR ( ws )*
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_artvarchar_in_bpv4515);
                    artvarchar377=artvarchar();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) root_0 = (CommonTree)adaptor.becomeRoot(artvarchar377.getTree(), root_0);
                    OUTDIR378=(Token)match(input,OUTDIR,FOLLOW_OUTDIR_in_bpv4518); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    OUTDIR378_tree = (CommonTree)adaptor.create(OUTDIR378);
                    adaptor.addChild(root_0, OUTDIR378_tree);
                    }
                    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:978:24: ( ws )*
                    loop230:
                    do {
                        int alt230=2;
                        int LA230_0 = input.LA(1);

                        if ( (LA230_0==WS) ) {
                            int LA230_2 = input.LA(2);

                            if ( (synpred336_command()) ) {
                                alt230=1;
                            }


                        }


                        switch (alt230) {
                    	case 1 :
                    	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:0:0: ws
                    	    {
                    	    pushFollow(FOLLOW_ws_in_bpv4520);
                    	    ws379=ws();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, ws379.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop230;
                        }
                    } while (true);


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException ex) {
                  throw new ARTSyntaxException("Syntax error in File: " + Utils.getCurrentFile() + " line: " + (ex.line == 0 ? Utils.getExpressionLine() : ex.line) + " (" + ex.getStackTrace()[0].getMethodName() + ")");
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "bpv"

    public static class negation_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "negation"
    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:981:1: negation : '-' -> NEGATION ;
    public final commandParser.negation_return negation() throws RecognitionException {
        commandParser.negation_return retval = new commandParser.negation_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token char_literal380=null;

        CommonTree char_literal380_tree=null;
        RewriteRuleTokenStream stream_100=new RewriteRuleTokenStream(adaptor,"token 100");

        try {
            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:982:3: ( '-' -> NEGATION )
            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:982:5: '-'
            {
            char_literal380=(Token)match(input,100,FOLLOW_100_in_negation4534); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_100.add(char_literal380);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 982:9: -> NEGATION
            {
                adaptor.addChild(root_0, (CommonTree)adaptor.create(NEGATION, "NEGATION"));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException ex) {
                  throw new ARTSyntaxException("Syntax error in File: " + Utils.getCurrentFile() + " line: " + (ex.line == 0 ? Utils.getExpressionLine() : ex.line) + " (" + ex.getStackTrace()[0].getMethodName() + ")");
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "negation"

    public static class defined_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "defined"
    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:985:1: defined : 'defined' -> DEFINED ;
    public final commandParser.defined_return defined() throws RecognitionException {
        commandParser.defined_return retval = new commandParser.defined_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token string_literal381=null;

        CommonTree string_literal381_tree=null;
        RewriteRuleTokenStream stream_103=new RewriteRuleTokenStream(adaptor,"token 103");

        try {
            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:986:3: ( 'defined' -> DEFINED )
            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:986:5: 'defined'
            {
            string_literal381=(Token)match(input,103,FOLLOW_103_in_defined4551); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_103.add(string_literal381);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 986:15: -> DEFINED
            {
                adaptor.addChild(root_0, (CommonTree)adaptor.create(DEFINED, "DEFINED"));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException ex) {
                  throw new ARTSyntaxException("Syntax error in File: " + Utils.getCurrentFile() + " line: " + (ex.line == 0 ? Utils.getExpressionLine() : ex.line) + " (" + ex.getStackTrace()[0].getMethodName() + ")");
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "defined"

    public static class artvarchar_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "artvarchar"
    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:989:1: artvarchar : '$' -> ARTVARCHAR ;
    public final commandParser.artvarchar_return artvarchar() throws RecognitionException {
        commandParser.artvarchar_return retval = new commandParser.artvarchar_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token char_literal382=null;

        CommonTree char_literal382_tree=null;
        RewriteRuleTokenStream stream_104=new RewriteRuleTokenStream(adaptor,"token 104");

        try {
            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:990:3: ( '$' -> ARTVARCHAR )
            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:990:5: '$'
            {
            char_literal382=(Token)match(input,104,FOLLOW_104_in_artvarchar4570); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_104.add(char_literal382);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 990:9: -> ARTVARCHAR
            {
                adaptor.addChild(root_0, (CommonTree)adaptor.create(ARTVARCHAR, "ARTVARCHAR"));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException ex) {
                  throw new ARTSyntaxException("Syntax error in File: " + Utils.getCurrentFile() + " line: " + (ex.line == 0 ? Utils.getExpressionLine() : ex.line) + " (" + ex.getStackTrace()[0].getMethodName() + ")");
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "artvarchar"

    public static class islast_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "islast"
    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:1010:1: islast : ISLAST '(' IDENT ')' ;
    public final commandParser.islast_return islast() throws RecognitionException {
        commandParser.islast_return retval = new commandParser.islast_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token ISLAST383=null;
        Token char_literal384=null;
        Token IDENT385=null;
        Token char_literal386=null;

        CommonTree ISLAST383_tree=null;
        CommonTree char_literal384_tree=null;
        CommonTree IDENT385_tree=null;
        CommonTree char_literal386_tree=null;

        try {
            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:1010:7: ( ISLAST '(' IDENT ')' )
            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:1010:9: ISLAST '(' IDENT ')'
            {
            root_0 = (CommonTree)adaptor.nil();

            ISLAST383=(Token)match(input,ISLAST,FOLLOW_ISLAST_in_islast4671); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ISLAST383_tree = (CommonTree)adaptor.create(ISLAST383);
            adaptor.addChild(root_0, ISLAST383_tree);
            }
            char_literal384=(Token)match(input,86,FOLLOW_86_in_islast4673); if (state.failed) return retval;
            IDENT385=(Token)match(input,IDENT,FOLLOW_IDENT_in_islast4676); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            IDENT385_tree = (CommonTree)adaptor.create(IDENT385);
            adaptor.addChild(root_0, IDENT385_tree);
            }
            char_literal386=(Token)match(input,87,FOLLOW_87_in_islast4678); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException ex) {
                  throw new ARTSyntaxException("Syntax error in File: " + Utils.getCurrentFile() + " line: " + (ex.line == 0 ? Utils.getExpressionLine() : ex.line) + " (" + ex.getStackTrace()[0].getMethodName() + ")");
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "islast"

    public static class isfirst_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "isfirst"
    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:1011:1: isfirst : ISFIRST '(' IDENT ')' ;
    public final commandParser.isfirst_return isfirst() throws RecognitionException {
        commandParser.isfirst_return retval = new commandParser.isfirst_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token ISFIRST387=null;
        Token char_literal388=null;
        Token IDENT389=null;
        Token char_literal390=null;

        CommonTree ISFIRST387_tree=null;
        CommonTree char_literal388_tree=null;
        CommonTree IDENT389_tree=null;
        CommonTree char_literal390_tree=null;

        try {
            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:1011:8: ( ISFIRST '(' IDENT ')' )
            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:1011:10: ISFIRST '(' IDENT ')'
            {
            root_0 = (CommonTree)adaptor.nil();

            ISFIRST387=(Token)match(input,ISFIRST,FOLLOW_ISFIRST_in_isfirst4685); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ISFIRST387_tree = (CommonTree)adaptor.create(ISFIRST387);
            adaptor.addChild(root_0, ISFIRST387_tree);
            }
            char_literal388=(Token)match(input,86,FOLLOW_86_in_isfirst4687); if (state.failed) return retval;
            IDENT389=(Token)match(input,IDENT,FOLLOW_IDENT_in_isfirst4690); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            IDENT389_tree = (CommonTree)adaptor.create(IDENT389);
            adaptor.addChild(root_0, IDENT389_tree);
            }
            char_literal390=(Token)match(input,87,FOLLOW_87_in_isfirst4692); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException ex) {
                  throw new ARTSyntaxException("Syntax error in File: " + Utils.getCurrentFile() + " line: " + (ex.line == 0 ? Utils.getExpressionLine() : ex.line) + " (" + ex.getStackTrace()[0].getMethodName() + ")");
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "isfirst"

    public static class ee_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ee"
    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:1035:1: ee : ~ ( '#' | '?' ) ( NOTNEWLINE | QUOTATIONMARK ( ( . )* ) | ( WS )* | '\\\\\"' | '\\\\#' | '\\\\?' | '\\\\%' | '\\\\$' ) ;
    public final commandParser.ee_return ee() throws RecognitionException {
        commandParser.ee_return retval = new commandParser.ee_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token set391=null;
        Token NOTNEWLINE392=null;
        Token QUOTATIONMARK393=null;
        Token wildcard394=null;
        Token WS395=null;
        Token string_literal396=null;
        Token string_literal397=null;
        Token string_literal398=null;
        Token string_literal399=null;
        Token string_literal400=null;

        CommonTree set391_tree=null;
        CommonTree NOTNEWLINE392_tree=null;
        CommonTree QUOTATIONMARK393_tree=null;
        CommonTree wildcard394_tree=null;
        CommonTree WS395_tree=null;
        CommonTree string_literal396_tree=null;
        CommonTree string_literal397_tree=null;
        CommonTree string_literal398_tree=null;
        CommonTree string_literal399_tree=null;
        CommonTree string_literal400_tree=null;

        try {
            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:1036:3: (~ ( '#' | '?' ) ( NOTNEWLINE | QUOTATIONMARK ( ( . )* ) | ( WS )* | '\\\\\"' | '\\\\#' | '\\\\?' | '\\\\%' | '\\\\$' ) )
            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:1036:5: ~ ( '#' | '?' ) ( NOTNEWLINE | QUOTATIONMARK ( ( . )* ) | ( WS )* | '\\\\\"' | '\\\\#' | '\\\\?' | '\\\\%' | '\\\\$' )
            {
            root_0 = (CommonTree)adaptor.nil();

            set391=(Token)input.LT(1);
            if ( (input.LA(1)>=NEGATION && input.LA(1)<=NL)||(input.LA(1)>=IDENT && input.LA(1)<=STRING)||(input.LA(1)>=REFERENCECHAR && input.LA(1)<=109) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (CommonTree)adaptor.create(set391));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }

            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:1036:16: ( NOTNEWLINE | QUOTATIONMARK ( ( . )* ) | ( WS )* | '\\\\\"' | '\\\\#' | '\\\\?' | '\\\\%' | '\\\\$' )
            int alt234=8;
            alt234 = dfa234.predict(input);
            switch (alt234) {
                case 1 :
                    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:1036:17: NOTNEWLINE
                    {
                    NOTNEWLINE392=(Token)match(input,NOTNEWLINE,FOLLOW_NOTNEWLINE_in_ee4861); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NOTNEWLINE392_tree = (CommonTree)adaptor.create(NOTNEWLINE392);
                    adaptor.addChild(root_0, NOTNEWLINE392_tree);
                    }

                    }
                    break;
                case 2 :
                    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:1036:30: QUOTATIONMARK ( ( . )* )
                    {
                    QUOTATIONMARK393=(Token)match(input,QUOTATIONMARK,FOLLOW_QUOTATIONMARK_in_ee4865); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    QUOTATIONMARK393_tree = (CommonTree)adaptor.create(QUOTATIONMARK393);
                    adaptor.addChild(root_0, QUOTATIONMARK393_tree);
                    }
                    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:1036:44: ( ( . )* )
                    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:1036:45: ( . )*
                    {
                    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:1036:45: ( . )*
                    loop232:
                    do {
                        int alt232=2;
                        switch ( input.LA(1) ) {
                        case WS:
                            {
                            int LA232_2 = input.LA(2);

                            if ( (synpred339_command()) ) {
                                alt232=1;
                            }


                            }
                            break;
                        case COMMANDCHAR:
                            {
                            int LA232_3 = input.LA(2);

                            if ( (synpred339_command()) ) {
                                alt232=1;
                            }


                            }
                            break;
                        case EPRESSIONCHAR:
                            {
                            int LA232_4 = input.LA(2);

                            if ( (synpred339_command()) ) {
                                alt232=1;
                            }


                            }
                            break;
                        case STRING:
                            {
                            int LA232_5 = input.LA(2);

                            if ( (synpred339_command()) ) {
                                alt232=1;
                            }


                            }
                            break;
                        case NL:
                            {
                            int LA232_6 = input.LA(2);

                            if ( (synpred339_command()) ) {
                                alt232=1;
                            }


                            }
                            break;
                        case NEGATION:
                        case DEFINED:
                        case ARTVARCHAR:
                        case IDENT:
                        case SIMPLEADAPT:
                        case ADAPTSAMELEVEL:
                        case EXTENDEDADAPT:
                        case EXTENDEDADAPTSAMELEVEL:
                        case ENDADAPT:
                        case ADAPTCOPY:
                        case SET:
                        case SETDEFER:
                        case OUTPUT:
                        case OUTDIR:
                        case OUTFILE:
                        case IF:
                        case ENDIF:
                        case ELIF:
                        case ELSE:
                        case IFDEF:
                        case IFNDEF:
                        case REMOVE:
                        case SELECT:
                        case ENDSELECT:
                        case OPTIONUNDEFINED:
                        case ENDOPTION:
                        case OPTION:
                        case OTHERWISE:
                        case ENDOTHERWISE:
                        case INSERT:
                        case ENDINSERT:
                        case INSERTBEFORE:
                        case INSERTAFTER:
                        case EXTENDEDBREAK:
                        case ENDBREAK:
                        case BREAK:
                        case WHILE:
                        case ENDWHILE:
                        case SETLOOP:
                        case ENDSETLOOP:
                        case VARS:
                        case ENDVARS:
                        case VAR:
                        case ITER:
                        case MESSAGE:
                        case EXTENDEDMESSAGE:
                        case ENDMESSAGE:
                        case MESSAGEIF:
                        case EXTENDEDMESSAGEIF:
                        case MESSAGEDEBUG:
                        case EXTENDEDMESSAGEDEBUG:
                        case TEXT:
                        case ENDTEXT:
                        case REFERENCECHAR:
                        case INTEGER:
                        case ISLAST:
                        case ISFIRST:
                        case SIZE:
                        case ISNUMERIC:
                        case ULCAP:
                        case LLCAP:
                        case DEBUGMODE:
                        case CURRENTFILE:
                        case DEFAULTOUTPUT:
                        case COMMENTCHAR:
                        case QUOTATIONMARK:
                        case STRINGNOEND:
                        case NOTNEWLINE:
                        case COMMENT:
                        case ESCCOMMENT:
                        case DIGIT:
                        case SPECCHAR:
                        case LETTER:
                        case DOT:
                        case ANYCHAR:
                        case 84:
                        case 85:
                        case 86:
                        case 87:
                        case 88:
                        case 89:
                        case 90:
                        case 91:
                        case 92:
                        case 93:
                        case 94:
                        case 95:
                        case 96:
                        case 97:
                        case 98:
                        case 99:
                        case 100:
                        case 101:
                        case 102:
                        case 103:
                        case 104:
                        case 105:
                        case 106:
                        case 107:
                        case 108:
                        case 109:
                            {
                            int LA232_7 = input.LA(2);

                            if ( (synpred339_command()) ) {
                                alt232=1;
                            }


                            }
                            break;

                        }

                        switch (alt232) {
                    	case 1 :
                    	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:0:0: .
                    	    {
                    	    wildcard394=(Token)input.LT(1);
                    	    matchAny(input); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    wildcard394_tree = (CommonTree)adaptor.create(wildcard394);
                    	    adaptor.addChild(root_0, wildcard394_tree);
                    	    }

                    	    }
                    	    break;

                    	default :
                    	    break loop232;
                        }
                    } while (true);


                    }


                    }
                    break;
                case 3 :
                    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:1036:51: ( WS )*
                    {
                    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:1036:51: ( WS )*
                    loop233:
                    do {
                        int alt233=2;
                        int LA233_0 = input.LA(1);

                        if ( (LA233_0==WS) ) {
                            int LA233_2 = input.LA(2);

                            if ( (synpred341_command()) ) {
                                alt233=1;
                            }


                        }


                        switch (alt233) {
                    	case 1 :
                    	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:0:0: WS
                    	    {
                    	    WS395=(Token)match(input,WS,FOLLOW_WS_in_ee4874); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    WS395_tree = (CommonTree)adaptor.create(WS395);
                    	    adaptor.addChild(root_0, WS395_tree);
                    	    }

                    	    }
                    	    break;

                    	default :
                    	    break loop233;
                        }
                    } while (true);


                    }
                    break;
                case 4 :
                    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:1036:57: '\\\\\"'
                    {
                    string_literal396=(Token)match(input,105,FOLLOW_105_in_ee4879); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal396_tree = (CommonTree)adaptor.create(string_literal396);
                    adaptor.addChild(root_0, string_literal396_tree);
                    }

                    }
                    break;
                case 5 :
                    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:1036:65: '\\\\#'
                    {
                    string_literal397=(Token)match(input,106,FOLLOW_106_in_ee4883); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal397_tree = (CommonTree)adaptor.create(string_literal397);
                    adaptor.addChild(root_0, string_literal397_tree);
                    }

                    }
                    break;
                case 6 :
                    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:1036:73: '\\\\?'
                    {
                    string_literal398=(Token)match(input,107,FOLLOW_107_in_ee4887); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal398_tree = (CommonTree)adaptor.create(string_literal398);
                    adaptor.addChild(root_0, string_literal398_tree);
                    }

                    }
                    break;
                case 7 :
                    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:1036:81: '\\\\%'
                    {
                    string_literal399=(Token)match(input,108,FOLLOW_108_in_ee4891); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal399_tree = (CommonTree)adaptor.create(string_literal399);
                    adaptor.addChild(root_0, string_literal399_tree);
                    }

                    }
                    break;
                case 8 :
                    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:1036:89: '\\\\$'
                    {
                    string_literal400=(Token)match(input,109,FOLLOW_109_in_ee4895); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal400_tree = (CommonTree)adaptor.create(string_literal400);
                    adaptor.addChild(root_0, string_literal400_tree);
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException ex) {
                  throw new ARTSyntaxException("Syntax error in File: " + Utils.getCurrentFile() + " line: " + (ex.line == 0 ? Utils.getExpressionLine() : ex.line) + " (" + ex.getStackTrace()[0].getMethodName() + ")");
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "ee"

    public static class ws_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "ws"
    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:1048:1: ws : WS ;
    public final commandParser.ws_return ws() throws RecognitionException {
        commandParser.ws_return retval = new commandParser.ws_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token WS401=null;

        CommonTree WS401_tree=null;

        try {
            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:1048:3: ( WS )
            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:1048:5: WS
            {
            root_0 = (CommonTree)adaptor.nil();

            WS401=(Token)match(input,WS,FOLLOW_WS_in_ws4971); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            WS401_tree = (CommonTree)adaptor.create(WS401);
            adaptor.addChild(root_0, WS401_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException ex) {
                  throw new ARTSyntaxException("Syntax error in File: " + Utils.getCurrentFile() + " line: " + (ex.line == 0 ? Utils.getExpressionLine() : ex.line) + " (" + ex.getStackTrace()[0].getMethodName() + ")");
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "ws"

    public static class nl_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nl"
    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:1049:1: nl : NL ;
    public final commandParser.nl_return nl() throws RecognitionException {
        commandParser.nl_return retval = new commandParser.nl_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NL402=null;

        CommonTree NL402_tree=null;

        try {
            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:1049:3: ( NL )
            // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:1049:5: NL
            {
            root_0 = (CommonTree)adaptor.nil();

            NL402=(Token)match(input,NL,FOLLOW_NL_in_nl4977); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            NL402_tree = (CommonTree)adaptor.create(NL402);
            adaptor.addChild(root_0, NL402_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

            catch (RecognitionException ex) {
                  throw new ARTSyntaxException("Syntax error in File: " + Utils.getCurrentFile() + " line: " + (ex.line == 0 ? Utils.getExpressionLine() : ex.line) + " (" + ex.getStackTrace()[0].getMethodName() + ")");
            }
        finally {
        }
        return retval;
    }
    // $ANTLR end "nl"

    // $ANTLR start synpred2_command
    public final void synpred2_command_fragment() throws RecognitionException {   
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:177:19: ( ws )
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:177:19: ws
        {
        pushFollow(FOLLOW_ws_in_synpred2_command129);
        ws();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred2_command

    // $ANTLR start synpred3_command
    public final void synpred3_command_fragment() throws RecognitionException {   
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:177:23: ( NL )
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:177:23: NL
        {
        match(input,NL,FOLLOW_NL_in_synpred3_command132); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred3_command

    // $ANTLR start synpred4_command
    public final void synpred4_command_fragment() throws RecognitionException {   
        commandParser.command_return c = null;


        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:177:5: ( ( ws )* c= command ( ws )* ( NL )? )
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:177:5: ( ws )* c= command ( ws )* ( NL )?
        {
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:177:5: ( ws )*
        loop235:
        do {
            int alt235=2;
            int LA235_0 = input.LA(1);

            if ( (LA235_0==WS) ) {
                alt235=1;
            }


            switch (alt235) {
        	case 1 :
        	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:0:0: ws
        	    {
        	    pushFollow(FOLLOW_ws_in_synpred4_command122);
        	    ws();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop235;
            }
        } while (true);

        pushFollow(FOLLOW_command_in_synpred4_command127);
        c=command();

        state._fsp--;
        if (state.failed) return ;
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:177:19: ( ws )*
        loop236:
        do {
            int alt236=2;
            int LA236_0 = input.LA(1);

            if ( (LA236_0==WS) ) {
                alt236=1;
            }


            switch (alt236) {
        	case 1 :
        	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:0:0: ws
        	    {
        	    pushFollow(FOLLOW_ws_in_synpred4_command129);
        	    ws();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop236;
            }
        } while (true);

        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:177:23: ( NL )?
        int alt237=2;
        int LA237_0 = input.LA(1);

        if ( (LA237_0==NL) ) {
            alt237=1;
        }
        switch (alt237) {
            case 1 :
                // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:0:0: NL
                {
                match(input,NL,FOLLOW_NL_in_synpred4_command132); if (state.failed) return ;

                }
                break;

        }


        }
    }
    // $ANTLR end synpred4_command

    // $ANTLR start synpred6_command
    public final void synpred6_command_fragment() throws RecognitionException {   
        commandParser.ee_return e = null;


        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:180:5: (e= ee )
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:180:5: e= ee
        {
        pushFollow(FOLLOW_ee_in_synpred6_command152);
        e=ee();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred6_command

    // $ANTLR start synpred23_command
    public final void synpred23_command_fragment() throws RecognitionException {   
        commandParser.ws_return w = null;


        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:203:12: (w= ws )
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:203:12: w= ws
        {
        pushFollow(FOLLOW_ws_in_synpred23_command287);
        w=ws();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred23_command

    // $ANTLR start synpred24_command
    public final void synpred24_command_fragment() throws RecognitionException {   
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:203:17: ( NL )
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:203:17: NL
        {
        match(input,NL,FOLLOW_NL_in_synpred24_command290); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred24_command

    // $ANTLR start synpred27_command
    public final void synpred27_command_fragment() throws RecognitionException {   
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:217:5: ( adaptCopyBinary )
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:217:5: adaptCopyBinary
        {
        pushFollow(FOLLOW_adaptCopyBinary_in_synpred27_command329);
        adaptCopyBinary();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred27_command

    // $ANTLR start synpred29_command
    public final void synpred29_command_fragment() throws RecognitionException {   
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:223:55: ( ws )
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:223:55: ws
        {
        pushFollow(FOLLOW_ws_in_synpred29_command364);
        ws();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred29_command

    // $ANTLR start synpred30_command
    public final void synpred30_command_fragment() throws RecognitionException {   
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:223:72: ( ws )
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:223:72: ws
        {
        pushFollow(FOLLOW_ws_in_synpred30_command371);
        ws();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred30_command

    // $ANTLR start synpred32_command
    public final void synpred32_command_fragment() throws RecognitionException {   
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:237:202: ( ws )
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:237:202: ws
        {
        pushFollow(FOLLOW_ws_in_synpred32_command406);
        ws();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred32_command

    // $ANTLR start synpred35_command
    public final void synpred35_command_fragment() throws RecognitionException {   
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:253:15: ( ws )
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:253:15: ws
        {
        pushFollow(FOLLOW_ws_in_synpred35_command481);
        ws();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred35_command

    // $ANTLR start synpred36_command
    public final void synpred36_command_fragment() throws RecognitionException {   
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:253:32: ( ws )
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:253:32: ws
        {
        pushFollow(FOLLOW_ws_in_synpred36_command488);
        ws();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred36_command

    // $ANTLR start synpred37_command
    public final void synpred37_command_fragment() throws RecognitionException {   
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:263:15: ( ws )
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:263:15: ws
        {
        pushFollow(FOLLOW_ws_in_synpred37_command511);
        ws();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred37_command

    // $ANTLR start synpred38_command
    public final void synpred38_command_fragment() throws RecognitionException {   
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:263:33: ( ws )
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:263:33: ws
        {
        pushFollow(FOLLOW_ws_in_synpred38_command518);
        ws();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred38_command

    // $ANTLR start synpred39_command
    public final void synpred39_command_fragment() throws RecognitionException {   
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:263:51: ( ws )
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:263:51: ws
        {
        pushFollow(FOLLOW_ws_in_synpred39_command525);
        ws();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred39_command

    // $ANTLR start synpred43_command
    public final void synpred43_command_fragment() throws RecognitionException {   
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:275:66: ( ws )
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:275:66: ws
        {
        pushFollow(FOLLOW_ws_in_synpred43_command579);
        ws();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred43_command

    // $ANTLR start synpred44_command
    public final void synpred44_command_fragment() throws RecognitionException {   
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:275:111: ( ws )
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:275:111: ws
        {
        pushFollow(FOLLOW_ws_in_synpred44_command588);
        ws();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred44_command

    // $ANTLR start synpred46_command
    public final void synpred46_command_fragment() throws RecognitionException {   
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:276:14: ( ws )
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:276:14: ws
        {
        pushFollow(FOLLOW_ws_in_synpred46_command601);
        ws();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred46_command

    // $ANTLR start synpred48_command
    public final void synpred48_command_fragment() throws RecognitionException {   
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:276:22: ( ws )
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:276:22: ws
        {
        pushFollow(FOLLOW_ws_in_synpred48_command607);
        ws();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred48_command

    // $ANTLR start synpred49_command
    public final void synpred49_command_fragment() throws RecognitionException {   
        commandParser.expression_return e2 = null;


        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:276:6: ( ( ws )* ',' ( ws )* ( NL )* ( ws )* e2= expression )
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:276:6: ( ws )* ',' ( ws )* ( NL )* ( ws )* e2= expression
        {
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:276:6: ( ws )*
        loop238:
        do {
            int alt238=2;
            int LA238_0 = input.LA(1);

            if ( (LA238_0==WS) ) {
                alt238=1;
            }


            switch (alt238) {
        	case 1 :
        	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:0:0: ws
        	    {
        	    pushFollow(FOLLOW_ws_in_synpred49_command596);
        	    ws();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop238;
            }
        } while (true);

        match(input,85,FOLLOW_85_in_synpred49_command599); if (state.failed) return ;
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:276:14: ( ws )*
        loop239:
        do {
            int alt239=2;
            int LA239_0 = input.LA(1);

            if ( (LA239_0==WS) ) {
                int LA239_2 = input.LA(2);

                if ( (synpred46_command()) ) {
                    alt239=1;
                }


            }


            switch (alt239) {
        	case 1 :
        	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:0:0: ws
        	    {
        	    pushFollow(FOLLOW_ws_in_synpred49_command601);
        	    ws();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop239;
            }
        } while (true);

        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:276:18: ( NL )*
        loop240:
        do {
            int alt240=2;
            int LA240_0 = input.LA(1);

            if ( (LA240_0==NL) ) {
                alt240=1;
            }


            switch (alt240) {
        	case 1 :
        	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:0:0: NL
        	    {
        	    match(input,NL,FOLLOW_NL_in_synpred49_command604); if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop240;
            }
        } while (true);

        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:276:22: ( ws )*
        loop241:
        do {
            int alt241=2;
            int LA241_0 = input.LA(1);

            if ( (LA241_0==WS) ) {
                int LA241_2 = input.LA(2);

                if ( (synpred48_command()) ) {
                    alt241=1;
                }


            }


            switch (alt241) {
        	case 1 :
        	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:0:0: ws
        	    {
        	    pushFollow(FOLLOW_ws_in_synpred49_command607);
        	    ws();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop241;
            }
        } while (true);

        pushFollow(FOLLOW_expression_in_synpred49_command612);
        e2=expression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred49_command

    // $ANTLR start synpred50_command
    public final void synpred50_command_fragment() throws RecognitionException {   
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:276:70: ( ws )
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:276:70: ws
        {
        pushFollow(FOLLOW_ws_in_synpred50_command619);
        ws();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred50_command

    // $ANTLR start synpred51_command
    public final void synpred51_command_fragment() throws RecognitionException {   
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:276:74: ( NL )
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:276:74: NL
        {
        match(input,NL,FOLLOW_NL_in_synpred51_command622); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred51_command

    // $ANTLR start synpred54_command
    public final void synpred54_command_fragment() throws RecognitionException {   
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:291:14: ( ws )
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:291:14: ws
        {
        pushFollow(FOLLOW_ws_in_synpred54_command667);
        ws();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred54_command

    // $ANTLR start synpred55_command
    public final void synpred55_command_fragment() throws RecognitionException {   
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:291:31: ( ws )
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:291:31: ws
        {
        pushFollow(FOLLOW_ws_in_synpred55_command674);
        ws();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred55_command

    // $ANTLR start synpred56_command
    public final void synpred56_command_fragment() throws RecognitionException {   
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:291:35: ( NL )
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:291:35: NL
        {
        match(input,NL,FOLLOW_NL_in_synpred56_command677); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred56_command

    // $ANTLR start synpred57_command
    public final void synpred57_command_fragment() throws RecognitionException {   
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:303:12: ( ws )
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:303:12: ws
        {
        pushFollow(FOLLOW_ws_in_synpred57_command702);
        ws();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred57_command

    // $ANTLR start synpred58_command
    public final void synpred58_command_fragment() throws RecognitionException {   
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:303:29: ( ws )
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:303:29: ws
        {
        pushFollow(FOLLOW_ws_in_synpred58_command709);
        ws();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred58_command

    // $ANTLR start synpred59_command
    public final void synpred59_command_fragment() throws RecognitionException {   
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:303:33: ( NL )
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:303:33: NL
        {
        match(input,NL,FOLLOW_NL_in_synpred59_command712); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred59_command

    // $ANTLR start synpred60_command
    public final void synpred60_command_fragment() throws RecognitionException {   
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:315:13: ( ws )
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:315:13: ws
        {
        pushFollow(FOLLOW_ws_in_synpred60_command737);
        ws();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred60_command

    // $ANTLR start synpred61_command
    public final void synpred61_command_fragment() throws RecognitionException {   
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:315:30: ( ws )
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:315:30: ws
        {
        pushFollow(FOLLOW_ws_in_synpred61_command744);
        ws();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred61_command

    // $ANTLR start synpred62_command
    public final void synpred62_command_fragment() throws RecognitionException {   
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:315:34: ( NL )
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:315:34: NL
        {
        match(input,NL,FOLLOW_NL_in_synpred62_command747); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred62_command

    // $ANTLR start synpred63_command
    public final void synpred63_command_fragment() throws RecognitionException {   
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:327:9: ( ws )
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:327:9: ws
        {
        pushFollow(FOLLOW_ws_in_synpred63_command773);
        ws();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred63_command

    // $ANTLR start synpred64_command
    public final void synpred64_command_fragment() throws RecognitionException {   
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:327:13: ( '(' )
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:327:13: '('
        {
        match(input,86,FOLLOW_86_in_synpred64_command776); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred64_command

    // $ANTLR start synpred65_command
    public final void synpred65_command_fragment() throws RecognitionException {   
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:327:35: ( ')' )
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:327:35: ')'
        {
        match(input,87,FOLLOW_87_in_synpred65_command783); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred65_command

    // $ANTLR start synpred66_command
    public final void synpred66_command_fragment() throws RecognitionException {   
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:327:40: ( NL )
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:327:40: NL
        {
        match(input,NL,FOLLOW_NL_in_synpred66_command786); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred66_command

    // $ANTLR start synpred68_command
    public final void synpred68_command_fragment() throws RecognitionException {   
        commandParser.stringExpression_return se = null;


        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:343:10: (se= stringExpression )
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:343:10: se= stringExpression
        {
        pushFollow(FOLLOW_stringExpression_in_synpred68_command823);
        se=stringExpression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred68_command

    // $ANTLR start synpred69_command
    public final void synpred69_command_fragment() throws RecognitionException {   
        commandParser.ee_return str = null;


        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:344:10: (str= ee )
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:344:10: str= ee
        {
        pushFollow(FOLLOW_ee_in_synpred69_command838);
        str=ee();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred69_command

    // $ANTLR start synpred73_command
    public final void synpred73_command_fragment() throws RecognitionException {   
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:349:24: ( NL )
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:349:24: NL
        {
        match(input,NL,FOLLOW_NL_in_synpred73_command894); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred73_command

    // $ANTLR start synpred74_command
    public final void synpred74_command_fragment() throws RecognitionException {   
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:364:10: ( ws )
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:364:10: ws
        {
        pushFollow(FOLLOW_ws_in_synpred74_command923);
        ws();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred74_command

    // $ANTLR start synpred75_command
    public final void synpred75_command_fragment() throws RecognitionException {   
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:364:14: ( '(' )
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:364:14: '('
        {
        match(input,86,FOLLOW_86_in_synpred75_command926); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred75_command

    // $ANTLR start synpred76_command
    public final void synpred76_command_fragment() throws RecognitionException {   
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:364:36: ( ')' )
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:364:36: ')'
        {
        match(input,87,FOLLOW_87_in_synpred76_command933); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred76_command

    // $ANTLR start synpred77_command
    public final void synpred77_command_fragment() throws RecognitionException {   
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:364:41: ( NL )
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:364:41: NL
        {
        match(input,NL,FOLLOW_NL_in_synpred77_command936); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred77_command

    // $ANTLR start synpred79_command
    public final void synpred79_command_fragment() throws RecognitionException {   
        commandParser.stringExpression_return se = null;


        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:381:10: (se= stringExpression )
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:381:10: se= stringExpression
        {
        pushFollow(FOLLOW_stringExpression_in_synpred79_command981);
        se=stringExpression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred79_command

    // $ANTLR start synpred80_command
    public final void synpred80_command_fragment() throws RecognitionException {   
        commandParser.ee_return str = null;


        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:382:10: (str= ee )
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:382:10: str= ee
        {
        pushFollow(FOLLOW_ee_in_synpred80_command996);
        str=ee();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred80_command

    // $ANTLR start synpred82_command
    public final void synpred82_command_fragment() throws RecognitionException {   
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:387:10: ( NL )
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:387:10: NL
        {
        match(input,NL,FOLLOW_NL_in_synpred82_command1028); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred82_command

    // $ANTLR start synpred84_command
    public final void synpred84_command_fragment() throws RecognitionException {   
        commandParser.stringExpression_return se = null;


        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:400:10: (se= stringExpression )
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:400:10: se= stringExpression
        {
        pushFollow(FOLLOW_stringExpression_in_synpred84_command1057);
        se=stringExpression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred84_command

    // $ANTLR start synpred85_command
    public final void synpred85_command_fragment() throws RecognitionException {   
        commandParser.ee_return str = null;


        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:401:10: (str= ee )
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:401:10: str= ee
        {
        pushFollow(FOLLOW_ee_in_synpred85_command1072);
        str=ee();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred85_command

    // $ANTLR start synpred89_command
    public final void synpred89_command_fragment() throws RecognitionException {   
        commandParser.stringExpression_return se = null;


        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:431:10: (se= stringExpression )
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:431:10: se= stringExpression
        {
        pushFollow(FOLLOW_stringExpression_in_synpred89_command1143);
        se=stringExpression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred89_command

    // $ANTLR start synpred90_command
    public final void synpred90_command_fragment() throws RecognitionException {   
        commandParser.ee_return str = null;


        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:432:10: (str= ee )
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:432:10: str= ee
        {
        pushFollow(FOLLOW_ee_in_synpred90_command1158);
        str=ee();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred90_command

    // $ANTLR start synpred94_command
    public final void synpred94_command_fragment() throws RecognitionException {   
        commandParser.stringExpression_return se = null;


        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:459:10: (se= stringExpression )
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:459:10: se= stringExpression
        {
        pushFollow(FOLLOW_stringExpression_in_synpred94_command1231);
        se=stringExpression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred94_command

    // $ANTLR start synpred95_command
    public final void synpred95_command_fragment() throws RecognitionException {   
        commandParser.ee_return str = null;


        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:460:10: (str= ee )
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:460:10: str= ee
        {
        pushFollow(FOLLOW_ee_in_synpred95_command1246);
        str=ee();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred95_command

    // $ANTLR start synpred98_command
    public final void synpred98_command_fragment() throws RecognitionException {   
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:477:14: ( ws )
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:477:14: ws
        {
        pushFollow(FOLLOW_ws_in_synpred98_command1318);
        ws();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred98_command

    // $ANTLR start synpred99_command
    public final void synpred99_command_fragment() throws RecognitionException {   
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:477:32: ( ws )
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:477:32: ws
        {
        pushFollow(FOLLOW_ws_in_synpred99_command1326);
        ws();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred99_command

    // $ANTLR start synpred100_command
    public final void synpred100_command_fragment() throws RecognitionException {   
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:477:37: ( nl )
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:477:37: nl
        {
        pushFollow(FOLLOW_nl_in_synpred100_command1330);
        nl();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred100_command

    // $ANTLR start synpred102_command
    public final void synpred102_command_fragment() throws RecognitionException {   
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:486:35: ( ws )
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:486:35: ws
        {
        pushFollow(FOLLOW_ws_in_synpred102_command1360);
        ws();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred102_command

    // $ANTLR start synpred103_command
    public final void synpred103_command_fragment() throws RecognitionException {   
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:486:40: ( nl )
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:486:40: nl
        {
        pushFollow(FOLLOW_nl_in_synpred103_command1364);
        nl();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred103_command

    // $ANTLR start synpred104_command
    public final void synpred104_command_fragment() throws RecognitionException {   
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:487:28: ( ws )
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:487:28: ws
        {
        pushFollow(FOLLOW_ws_in_synpred104_command1380);
        ws();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred104_command

    // $ANTLR start synpred105_command
    public final void synpred105_command_fragment() throws RecognitionException {   
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:487:33: ( nl )
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:487:33: nl
        {
        pushFollow(FOLLOW_nl_in_synpred105_command1384);
        nl();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred105_command

    // $ANTLR start synpred111_command
    public final void synpred111_command_fragment() throws RecognitionException {   
        commandParser.stringExpression_return se = null;


        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:509:10: (se= stringExpression )
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:509:10: se= stringExpression
        {
        pushFollow(FOLLOW_stringExpression_in_synpred111_command1478);
        se=stringExpression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred111_command

    // $ANTLR start synpred112_command
    public final void synpred112_command_fragment() throws RecognitionException {   
        commandParser.ee_return str = null;


        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:510:10: (str= ee )
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:510:10: str= ee
        {
        pushFollow(FOLLOW_ee_in_synpred112_command1493);
        str=ee();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred112_command

    // $ANTLR start synpred114_command
    public final void synpred114_command_fragment() throws RecognitionException {   
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:518:14: ( ws )
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:518:14: ws
        {
        pushFollow(FOLLOW_ws_in_synpred114_command1547);
        ws();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred114_command

    // $ANTLR start synpred116_command
    public final void synpred116_command_fragment() throws RecognitionException {   
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:519:14: ( ws )
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:519:14: ws
        {
        pushFollow(FOLLOW_ws_in_synpred116_command1567);
        ws();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred116_command

    // $ANTLR start synpred117_command
    public final void synpred117_command_fragment() throws RecognitionException {   
        commandParser.expression_return e2 = null;


        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:519:6: ( ( ws )* '|' ( ws )* e2= expression )
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:519:6: ( ws )* '|' ( ws )* e2= expression
        {
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:519:6: ( ws )*
        loop243:
        do {
            int alt243=2;
            int LA243_0 = input.LA(1);

            if ( (LA243_0==WS) ) {
                alt243=1;
            }


            switch (alt243) {
        	case 1 :
        	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:0:0: ws
        	    {
        	    pushFollow(FOLLOW_ws_in_synpred117_command1562);
        	    ws();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop243;
            }
        } while (true);

        match(input,88,FOLLOW_88_in_synpred117_command1565); if (state.failed) return ;
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:519:14: ( ws )*
        loop244:
        do {
            int alt244=2;
            int LA244_0 = input.LA(1);

            if ( (LA244_0==WS) ) {
                int LA244_2 = input.LA(2);

                if ( (synpred116_command()) ) {
                    alt244=1;
                }


            }


            switch (alt244) {
        	case 1 :
        	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:0:0: ws
        	    {
        	    pushFollow(FOLLOW_ws_in_synpred117_command1567);
        	    ws();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop244;
            }
        } while (true);

        pushFollow(FOLLOW_expression_in_synpred117_command1572);
        e2=expression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred117_command

    // $ANTLR start synpred119_command
    public final void synpred119_command_fragment() throws RecognitionException {   
        commandParser.stringExpression_return se = null;


        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:529:10: (se= stringExpression )
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:529:10: se= stringExpression
        {
        pushFollow(FOLLOW_stringExpression_in_synpred119_command1613);
        se=stringExpression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred119_command

    // $ANTLR start synpred120_command
    public final void synpred120_command_fragment() throws RecognitionException {   
        commandParser.ee_return str = null;


        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:530:10: (str= ee )
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:530:10: str= ee
        {
        pushFollow(FOLLOW_ee_in_synpred120_command1628);
        str=ee();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred120_command

    // $ANTLR start synpred123_command
    public final void synpred123_command_fragment() throws RecognitionException {   
        commandParser.stringExpression_return se = null;


        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:559:10: (se= stringExpression )
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:559:10: se= stringExpression
        {
        pushFollow(FOLLOW_stringExpression_in_synpred123_command1716);
        se=stringExpression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred123_command

    // $ANTLR start synpred124_command
    public final void synpred124_command_fragment() throws RecognitionException {   
        commandParser.ee_return str = null;


        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:560:10: (str= ee )
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:560:10: str= ee
        {
        pushFollow(FOLLOW_ee_in_synpred124_command1731);
        str=ee();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred124_command

    // $ANTLR start synpred126_command
    public final void synpred126_command_fragment() throws RecognitionException {   
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:575:13: ( ws )
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:575:13: ws
        {
        pushFollow(FOLLOW_ws_in_synpred126_command1785);
        ws();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred126_command

    // $ANTLR start synpred127_command
    public final void synpred127_command_fragment() throws RecognitionException {   
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:575:30: ( NL )
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:575:30: NL
        {
        match(input,NL,FOLLOW_NL_in_synpred127_command1792); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred127_command

    // $ANTLR start synpred128_command
    public final void synpred128_command_fragment() throws RecognitionException {   
        commandParser.ws_return w1 = null;


        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:579:18: (w1= ws )
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:579:18: w1= ws
        {
        pushFollow(FOLLOW_ws_in_synpred128_command1816);
        w1=ws();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred128_command

    // $ANTLR start synpred130_command
    public final void synpred130_command_fragment() throws RecognitionException {   
        commandParser.ws_return w2 = null;


        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:580:38: (w2= ws )
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:580:38: w2= ws
        {
        pushFollow(FOLLOW_ws_in_synpred130_command1840);
        w2=ws();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred130_command

    // $ANTLR start synpred132_command
    public final void synpred132_command_fragment() throws RecognitionException {   
        commandParser.ws_return w3 = null;


        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:581:35: (w3= ws )
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:581:35: w3= ws
        {
        pushFollow(FOLLOW_ws_in_synpred132_command1864);
        w3=ws();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred132_command

    // $ANTLR start synpred134_command
    public final void synpred134_command_fragment() throws RecognitionException {   
        commandParser.ws_return w4 = null;


        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:582:32: (w4= ws )
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:582:32: w4= ws
        {
        pushFollow(FOLLOW_ws_in_synpred134_command1884);
        w4=ws();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred134_command

    // $ANTLR start synpred135_command
    public final void synpred135_command_fragment() throws RecognitionException {   
        commandParser.stringExpression_return se = null;

        commandParser.ws_return w4 = null;


        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:582:10: (se= stringExpression (w4= ws )* )
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:582:10: se= stringExpression (w4= ws )*
        {
        pushFollow(FOLLOW_stringExpression_in_synpred135_command1880);
        se=stringExpression();

        state._fsp--;
        if (state.failed) return ;
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:582:32: (w4= ws )*
        loop248:
        do {
            int alt248=2;
            int LA248_0 = input.LA(1);

            if ( (LA248_0==WS) ) {
                alt248=1;
            }


            switch (alt248) {
        	case 1 :
        	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:0:0: w4= ws
        	    {
        	    pushFollow(FOLLOW_ws_in_synpred135_command1884);
        	    w4=ws();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop248;
            }
        } while (true);


        }
    }
    // $ANTLR end synpred135_command

    // $ANTLR start synpred136_command
    public final void synpred136_command_fragment() throws RecognitionException {   
        commandParser.ws_return w5 = null;


        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:583:19: (w5= ws )
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:583:19: w5= ws
        {
        pushFollow(FOLLOW_ws_in_synpred136_command1905);
        w5=ws();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred136_command

    // $ANTLR start synpred137_command
    public final void synpred137_command_fragment() throws RecognitionException {   
        commandParser.ee_return str = null;

        commandParser.ws_return w5 = null;


        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:583:10: (str= ee (w5= ws )* )
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:583:10: str= ee (w5= ws )*
        {
        pushFollow(FOLLOW_ee_in_synpred137_command1901);
        str=ee();

        state._fsp--;
        if (state.failed) return ;
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:583:19: (w5= ws )*
        loop249:
        do {
            int alt249=2;
            int LA249_0 = input.LA(1);

            if ( (LA249_0==WS) ) {
                alt249=1;
            }


            switch (alt249) {
        	case 1 :
        	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:0:0: w5= ws
        	    {
        	    pushFollow(FOLLOW_ws_in_synpred137_command1905);
        	    w5=ws();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop249;
            }
        } while (true);


        }
    }
    // $ANTLR end synpred137_command

    // $ANTLR start synpred139_command
    public final void synpred139_command_fragment() throws RecognitionException {   
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:601:48: ( ws )
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:601:48: ws
        {
        pushFollow(FOLLOW_ws_in_synpred139_command1983);
        ws();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred139_command

    // $ANTLR start synpred140_command
    public final void synpred140_command_fragment() throws RecognitionException {   
        commandParser.ws_return w1 = null;


        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:605:18: (w1= ws )
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:605:18: w1= ws
        {
        pushFollow(FOLLOW_ws_in_synpred140_command2011);
        w1=ws();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred140_command

    // $ANTLR start synpred142_command
    public final void synpred142_command_fragment() throws RecognitionException {   
        commandParser.ws_return w2 = null;


        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:606:32: (w2= ws )
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:606:32: w2= ws
        {
        pushFollow(FOLLOW_ws_in_synpred142_command2031);
        w2=ws();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred142_command

    // $ANTLR start synpred143_command
    public final void synpred143_command_fragment() throws RecognitionException {   
        commandParser.stringExpression_return se = null;

        commandParser.ws_return w2 = null;


        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:606:10: (se= stringExpression (w2= ws )* )
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:606:10: se= stringExpression (w2= ws )*
        {
        pushFollow(FOLLOW_stringExpression_in_synpred143_command2027);
        se=stringExpression();

        state._fsp--;
        if (state.failed) return ;
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:606:32: (w2= ws )*
        loop251:
        do {
            int alt251=2;
            int LA251_0 = input.LA(1);

            if ( (LA251_0==WS) ) {
                alt251=1;
            }


            switch (alt251) {
        	case 1 :
        	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:0:0: w2= ws
        	    {
        	    pushFollow(FOLLOW_ws_in_synpred143_command2031);
        	    w2=ws();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop251;
            }
        } while (true);


        }
    }
    // $ANTLR end synpred143_command

    // $ANTLR start synpred144_command
    public final void synpred144_command_fragment() throws RecognitionException {   
        commandParser.ws_return w3 = null;


        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:607:19: (w3= ws )
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:607:19: w3= ws
        {
        pushFollow(FOLLOW_ws_in_synpred144_command2052);
        w3=ws();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred144_command

    // $ANTLR start synpred145_command
    public final void synpred145_command_fragment() throws RecognitionException {   
        commandParser.ee_return str = null;

        commandParser.ws_return w3 = null;


        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:607:10: (str= ee (w3= ws )* )
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:607:10: str= ee (w3= ws )*
        {
        pushFollow(FOLLOW_ee_in_synpred145_command2048);
        str=ee();

        state._fsp--;
        if (state.failed) return ;
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:607:19: (w3= ws )*
        loop252:
        do {
            int alt252=2;
            int LA252_0 = input.LA(1);

            if ( (LA252_0==WS) ) {
                alt252=1;
            }


            switch (alt252) {
        	case 1 :
        	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:0:0: w3= ws
        	    {
        	    pushFollow(FOLLOW_ws_in_synpred145_command2052);
        	    w3=ws();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop252;
            }
        } while (true);


        }
    }
    // $ANTLR end synpred145_command

    // $ANTLR start synpred147_command
    public final void synpred147_command_fragment() throws RecognitionException {   
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:625:46: ( ws )
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:625:46: ws
        {
        pushFollow(FOLLOW_ws_in_synpred147_command2130);
        ws();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred147_command

    // $ANTLR start synpred148_command
    public final void synpred148_command_fragment() throws RecognitionException {   
        commandParser.ws_return w1 = null;


        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:629:18: (w1= ws )
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:629:18: w1= ws
        {
        pushFollow(FOLLOW_ws_in_synpred148_command2159);
        w1=ws();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred148_command

    // $ANTLR start synpred150_command
    public final void synpred150_command_fragment() throws RecognitionException {   
        commandParser.ws_return w2 = null;


        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:630:32: (w2= ws )
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:630:32: w2= ws
        {
        pushFollow(FOLLOW_ws_in_synpred150_command2179);
        w2=ws();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred150_command

    // $ANTLR start synpred151_command
    public final void synpred151_command_fragment() throws RecognitionException {   
        commandParser.stringExpression_return se = null;

        commandParser.ws_return w2 = null;


        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:630:10: (se= stringExpression (w2= ws )* )
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:630:10: se= stringExpression (w2= ws )*
        {
        pushFollow(FOLLOW_stringExpression_in_synpred151_command2175);
        se=stringExpression();

        state._fsp--;
        if (state.failed) return ;
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:630:32: (w2= ws )*
        loop254:
        do {
            int alt254=2;
            int LA254_0 = input.LA(1);

            if ( (LA254_0==WS) ) {
                alt254=1;
            }


            switch (alt254) {
        	case 1 :
        	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:0:0: w2= ws
        	    {
        	    pushFollow(FOLLOW_ws_in_synpred151_command2179);
        	    w2=ws();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop254;
            }
        } while (true);


        }
    }
    // $ANTLR end synpred151_command

    // $ANTLR start synpred152_command
    public final void synpred152_command_fragment() throws RecognitionException {   
        commandParser.ws_return w3 = null;


        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:631:19: (w3= ws )
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:631:19: w3= ws
        {
        pushFollow(FOLLOW_ws_in_synpred152_command2200);
        w3=ws();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred152_command

    // $ANTLR start synpred153_command
    public final void synpred153_command_fragment() throws RecognitionException {   
        commandParser.ee_return str = null;

        commandParser.ws_return w3 = null;


        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:631:10: (str= ee (w3= ws )* )
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:631:10: str= ee (w3= ws )*
        {
        pushFollow(FOLLOW_ee_in_synpred153_command2196);
        str=ee();

        state._fsp--;
        if (state.failed) return ;
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:631:19: (w3= ws )*
        loop255:
        do {
            int alt255=2;
            int LA255_0 = input.LA(1);

            if ( (LA255_0==WS) ) {
                alt255=1;
            }


            switch (alt255) {
        	case 1 :
        	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:0:0: w3= ws
        	    {
        	    pushFollow(FOLLOW_ws_in_synpred153_command2200);
        	    w3=ws();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop255;
            }
        } while (true);


        }
    }
    // $ANTLR end synpred153_command

    // $ANTLR start synpred155_command
    public final void synpred155_command_fragment() throws RecognitionException {   
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:649:20: ( ws )
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:649:20: ws
        {
        pushFollow(FOLLOW_ws_in_synpred155_command2275);
        ws();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred155_command

    // $ANTLR start synpred156_command
    public final void synpred156_command_fragment() throws RecognitionException {   
        commandParser.ws_return w1 = null;


        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:653:19: (w1= ws )
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:653:19: w1= ws
        {
        pushFollow(FOLLOW_ws_in_synpred156_command2304);
        w1=ws();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred156_command

    // $ANTLR start synpred158_command
    public final void synpred158_command_fragment() throws RecognitionException {   
        commandParser.ws_return w2 = null;


        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:654:38: (w2= ws )
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:654:38: w2= ws
        {
        pushFollow(FOLLOW_ws_in_synpred158_command2328);
        w2=ws();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred158_command

    // $ANTLR start synpred160_command
    public final void synpred160_command_fragment() throws RecognitionException {   
        commandParser.ws_return w3 = null;


        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:655:35: (w3= ws )
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:655:35: w3= ws
        {
        pushFollow(FOLLOW_ws_in_synpred160_command2352);
        w3=ws();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred160_command

    // $ANTLR start synpred162_command
    public final void synpred162_command_fragment() throws RecognitionException {   
        commandParser.ws_return w4 = null;


        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:656:32: (w4= ws )
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:656:32: w4= ws
        {
        pushFollow(FOLLOW_ws_in_synpred162_command2372);
        w4=ws();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred162_command

    // $ANTLR start synpred163_command
    public final void synpred163_command_fragment() throws RecognitionException {   
        commandParser.stringExpression_return se = null;

        commandParser.ws_return w4 = null;


        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:656:10: (se= stringExpression (w4= ws )* )
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:656:10: se= stringExpression (w4= ws )*
        {
        pushFollow(FOLLOW_stringExpression_in_synpred163_command2368);
        se=stringExpression();

        state._fsp--;
        if (state.failed) return ;
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:656:32: (w4= ws )*
        loop259:
        do {
            int alt259=2;
            int LA259_0 = input.LA(1);

            if ( (LA259_0==WS) ) {
                alt259=1;
            }


            switch (alt259) {
        	case 1 :
        	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:0:0: w4= ws
        	    {
        	    pushFollow(FOLLOW_ws_in_synpred163_command2372);
        	    w4=ws();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop259;
            }
        } while (true);


        }
    }
    // $ANTLR end synpred163_command

    // $ANTLR start synpred164_command
    public final void synpred164_command_fragment() throws RecognitionException {   
        commandParser.ws_return w5 = null;


        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:657:19: (w5= ws )
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:657:19: w5= ws
        {
        pushFollow(FOLLOW_ws_in_synpred164_command2393);
        w5=ws();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred164_command

    // $ANTLR start synpred165_command
    public final void synpred165_command_fragment() throws RecognitionException {   
        commandParser.ee_return str = null;

        commandParser.ws_return w5 = null;


        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:657:10: (str= ee (w5= ws )* )
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:657:10: str= ee (w5= ws )*
        {
        pushFollow(FOLLOW_ee_in_synpred165_command2389);
        str=ee();

        state._fsp--;
        if (state.failed) return ;
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:657:19: (w5= ws )*
        loop260:
        do {
            int alt260=2;
            int LA260_0 = input.LA(1);

            if ( (LA260_0==WS) ) {
                alt260=1;
            }


            switch (alt260) {
        	case 1 :
        	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:0:0: w5= ws
        	    {
        	    pushFollow(FOLLOW_ws_in_synpred165_command2393);
        	    w5=ws();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop260;
            }
        } while (true);


        }
    }
    // $ANTLR end synpred165_command

    // $ANTLR start synpred168_command
    public final void synpred168_command_fragment() throws RecognitionException {   
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:671:11: ( ws )
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:671:11: ws
        {
        pushFollow(FOLLOW_ws_in_synpred168_command2453);
        ws();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred168_command

    // $ANTLR start synpred169_command
    public final void synpred169_command_fragment() throws RecognitionException {   
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:685:11: ( ws )
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:685:11: ws
        {
        pushFollow(FOLLOW_ws_in_synpred169_command2498);
        ws();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred169_command

    // $ANTLR start synpred171_command
    public final void synpred171_command_fragment() throws RecognitionException {   
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:686:13: ( ws )
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:686:13: ws
        {
        pushFollow(FOLLOW_ws_in_synpred171_command2516);
        ws();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred171_command

    // $ANTLR start synpred172_command
    public final void synpred172_command_fragment() throws RecognitionException {   
        commandParser.expression_return e2 = null;


        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:686:5: ( ( ws )* ',' ( ws )* e2= expression )
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:686:5: ( ws )* ',' ( ws )* e2= expression
        {
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:686:5: ( ws )*
        loop269:
        do {
            int alt269=2;
            int LA269_0 = input.LA(1);

            if ( (LA269_0==WS) ) {
                alt269=1;
            }


            switch (alt269) {
        	case 1 :
        	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:0:0: ws
        	    {
        	    pushFollow(FOLLOW_ws_in_synpred172_command2511);
        	    ws();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop269;
            }
        } while (true);

        match(input,85,FOLLOW_85_in_synpred172_command2514); if (state.failed) return ;
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:686:13: ( ws )*
        loop270:
        do {
            int alt270=2;
            int LA270_0 = input.LA(1);

            if ( (LA270_0==WS) ) {
                int LA270_2 = input.LA(2);

                if ( (synpred171_command()) ) {
                    alt270=1;
                }


            }


            switch (alt270) {
        	case 1 :
        	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:0:0: ws
        	    {
        	    pushFollow(FOLLOW_ws_in_synpred172_command2516);
        	    ws();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop270;
            }
        } while (true);

        pushFollow(FOLLOW_expression_in_synpred172_command2521);
        e2=expression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred172_command

    // $ANTLR start synpred173_command
    public final void synpred173_command_fragment() throws RecognitionException {   
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:686:68: ( NL )
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:686:68: NL
        {
        match(input,NL,FOLLOW_NL_in_synpred173_command2528); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred173_command

    // $ANTLR start synpred175_command
    public final void synpred175_command_fragment() throws RecognitionException {   
        commandParser.ws_return w2 = null;


        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:691:32: (w2= ws )
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:691:32: w2= ws
        {
        pushFollow(FOLLOW_ws_in_synpred175_command2577);
        w2=ws();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred175_command

    // $ANTLR start synpred176_command
    public final void synpred176_command_fragment() throws RecognitionException {   
        commandParser.stringExpression_return se = null;

        commandParser.ws_return w2 = null;


        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:691:10: (se= stringExpression (w2= ws )* )
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:691:10: se= stringExpression (w2= ws )*
        {
        pushFollow(FOLLOW_stringExpression_in_synpred176_command2573);
        se=stringExpression();

        state._fsp--;
        if (state.failed) return ;
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:691:32: (w2= ws )*
        loop271:
        do {
            int alt271=2;
            int LA271_0 = input.LA(1);

            if ( (LA271_0==WS) ) {
                alt271=1;
            }


            switch (alt271) {
        	case 1 :
        	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:0:0: w2= ws
        	    {
        	    pushFollow(FOLLOW_ws_in_synpred176_command2577);
        	    w2=ws();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop271;
            }
        } while (true);


        }
    }
    // $ANTLR end synpred176_command

    // $ANTLR start synpred177_command
    public final void synpred177_command_fragment() throws RecognitionException {   
        commandParser.ws_return w3 = null;


        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:692:19: (w3= ws )
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:692:19: w3= ws
        {
        pushFollow(FOLLOW_ws_in_synpred177_command2598);
        w3=ws();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred177_command

    // $ANTLR start synpred178_command
    public final void synpred178_command_fragment() throws RecognitionException {   
        commandParser.ee_return str = null;

        commandParser.ws_return w3 = null;


        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:692:10: (str= ee (w3= ws )* )
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:692:10: str= ee (w3= ws )*
        {
        pushFollow(FOLLOW_ee_in_synpred178_command2594);
        str=ee();

        state._fsp--;
        if (state.failed) return ;
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:692:19: (w3= ws )*
        loop272:
        do {
            int alt272=2;
            int LA272_0 = input.LA(1);

            if ( (LA272_0==WS) ) {
                alt272=1;
            }


            switch (alt272) {
        	case 1 :
        	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:0:0: w3= ws
        	    {
        	    pushFollow(FOLLOW_ws_in_synpred178_command2598);
        	    w3=ws();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop272;
            }
        } while (true);


        }
    }
    // $ANTLR end synpred178_command

    // $ANTLR start synpred180_command
    public final void synpred180_command_fragment() throws RecognitionException {   
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:704:28: ( NL )
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:704:28: NL
        {
        match(input,NL,FOLLOW_NL_in_synpred180_command2657); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred180_command

    // $ANTLR start synpred182_command
    public final void synpred182_command_fragment() throws RecognitionException {   
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:708:37: ( ws )
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:708:37: ws
        {
        pushFollow(FOLLOW_ws_in_synpred182_command2694);
        ws();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred182_command

    // $ANTLR start synpred183_command
    public final void synpred183_command_fragment() throws RecognitionException {   
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:708:42: ( nl )
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:708:42: nl
        {
        pushFollow(FOLLOW_nl_in_synpred183_command2698);
        nl();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred183_command

    // $ANTLR start synpred202_command
    public final void synpred202_command_fragment() throws RecognitionException {   
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:739:22: ( ws )
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:739:22: ws
        {
        pushFollow(FOLLOW_ws_in_synpred202_command2945);
        ws();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred202_command

    // $ANTLR start synpred203_command
    public final void synpred203_command_fragment() throws RecognitionException {   
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:739:31: ( ws )
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:739:31: ws
        {
        pushFollow(FOLLOW_ws_in_synpred203_command2951);
        ws();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred203_command

    // $ANTLR start synpred204_command
    public final void synpred204_command_fragment() throws RecognitionException {   
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:739:48: ( ws )
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:739:48: ws
        {
        pushFollow(FOLLOW_ws_in_synpred204_command2958);
        ws();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred204_command

    // $ANTLR start synpred205_command
    public final void synpred205_command_fragment() throws RecognitionException {   
        commandParser.expression_return e = null;


        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:739:27: ( '=' ( ws )* e= expression ( ws )* )
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:739:27: '=' ( ws )* e= expression ( ws )*
        {
        match(input,84,FOLLOW_84_in_synpred205_command2949); if (state.failed) return ;
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:739:31: ( ws )*
        loop277:
        do {
            int alt277=2;
            int LA277_0 = input.LA(1);

            if ( (LA277_0==WS) ) {
                int LA277_2 = input.LA(2);

                if ( (synpred203_command()) ) {
                    alt277=1;
                }


            }


            switch (alt277) {
        	case 1 :
        	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:0:0: ws
        	    {
        	    pushFollow(FOLLOW_ws_in_synpred205_command2951);
        	    ws();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop277;
            }
        } while (true);

        pushFollow(FOLLOW_expression_in_synpred205_command2956);
        e=expression();

        state._fsp--;
        if (state.failed) return ;
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:739:48: ( ws )*
        loop278:
        do {
            int alt278=2;
            int LA278_0 = input.LA(1);

            if ( (LA278_0==WS) ) {
                alt278=1;
            }


            switch (alt278) {
        	case 1 :
        	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:0:0: ws
        	    {
        	    pushFollow(FOLLOW_ws_in_synpred205_command2958);
        	    ws();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop278;
            }
        } while (true);


        }
    }
    // $ANTLR end synpred205_command

    // $ANTLR start synpred206_command
    public final void synpred206_command_fragment() throws RecognitionException {   
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:739:55: ( ws )
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:739:55: ws
        {
        pushFollow(FOLLOW_ws_in_synpred206_command2964);
        ws();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred206_command

    // $ANTLR start synpred207_command
    public final void synpred207_command_fragment() throws RecognitionException {   
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:739:60: ( nl )
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:739:60: nl
        {
        pushFollow(FOLLOW_nl_in_synpred207_command2968);
        nl();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred207_command

    // $ANTLR start synpred210_command
    public final void synpred210_command_fragment() throws RecognitionException {   
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:752:30: ( ws )
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:752:30: ws
        {
        pushFollow(FOLLOW_ws_in_synpred210_command3017);
        ws();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred210_command

    // $ANTLR start synpred211_command
    public final void synpred211_command_fragment() throws RecognitionException {   
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:752:47: ( ws )
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:752:47: ws
        {
        pushFollow(FOLLOW_ws_in_synpred211_command3024);
        ws();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred211_command

    // $ANTLR start synpred214_command
    public final void synpred214_command_fragment() throws RecognitionException {   
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:753:29: ( ws )
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:753:29: ws
        {
        pushFollow(FOLLOW_ws_in_synpred214_command3047);
        ws();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred214_command

    // $ANTLR start synpred215_command
    public final void synpred215_command_fragment() throws RecognitionException {   
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:753:47: ( ws )
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:753:47: ws
        {
        pushFollow(FOLLOW_ws_in_synpred215_command3054);
        ws();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred215_command

    // $ANTLR start synpred216_command
    public final void synpred216_command_fragment() throws RecognitionException {   
        Token i1=null;
        commandParser.expression_return e1 = null;


        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:753:4: ( ',' ( ws )* i1= IDENT ( ws )* '=' ( ws )* e1= expression ( ws )* )
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:753:4: ',' ( ws )* i1= IDENT ( ws )* '=' ( ws )* e1= expression ( ws )*
        {
        match(input,85,FOLLOW_85_in_synpred216_command3033); if (state.failed) return ;
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:753:8: ( ws )*
        loop279:
        do {
            int alt279=2;
            int LA279_0 = input.LA(1);

            if ( (LA279_0==WS) ) {
                alt279=1;
            }


            switch (alt279) {
        	case 1 :
        	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:0:0: ws
        	    {
        	    pushFollow(FOLLOW_ws_in_synpred216_command3035);
        	    ws();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop279;
            }
        } while (true);

        i1=(Token)match(input,IDENT,FOLLOW_IDENT_in_synpred216_command3040); if (state.failed) return ;
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:753:21: ( ws )*
        loop280:
        do {
            int alt280=2;
            int LA280_0 = input.LA(1);

            if ( (LA280_0==WS) ) {
                alt280=1;
            }


            switch (alt280) {
        	case 1 :
        	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:0:0: ws
        	    {
        	    pushFollow(FOLLOW_ws_in_synpred216_command3042);
        	    ws();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop280;
            }
        } while (true);

        match(input,84,FOLLOW_84_in_synpred216_command3045); if (state.failed) return ;
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:753:29: ( ws )*
        loop281:
        do {
            int alt281=2;
            int LA281_0 = input.LA(1);

            if ( (LA281_0==WS) ) {
                int LA281_2 = input.LA(2);

                if ( (synpred214_command()) ) {
                    alt281=1;
                }


            }


            switch (alt281) {
        	case 1 :
        	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:0:0: ws
        	    {
        	    pushFollow(FOLLOW_ws_in_synpred216_command3047);
        	    ws();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop281;
            }
        } while (true);

        pushFollow(FOLLOW_expression_in_synpred216_command3052);
        e1=expression();

        state._fsp--;
        if (state.failed) return ;
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:753:47: ( ws )*
        loop282:
        do {
            int alt282=2;
            int LA282_0 = input.LA(1);

            if ( (LA282_0==WS) ) {
                alt282=1;
            }


            switch (alt282) {
        	case 1 :
        	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:0:0: ws
        	    {
        	    pushFollow(FOLLOW_ws_in_synpred216_command3054);
        	    ws();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop282;
            }
        } while (true);


        }
    }
    // $ANTLR end synpred216_command

    // $ANTLR start synpred217_command
    public final void synpred217_command_fragment() throws RecognitionException {   
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:753:117: ( ws )
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:753:117: ws
        {
        pushFollow(FOLLOW_ws_in_synpred217_command3063);
        ws();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred217_command

    // $ANTLR start synpred218_command
    public final void synpred218_command_fragment() throws RecognitionException {   
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:753:122: ( nl )
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:753:122: nl
        {
        pushFollow(FOLLOW_nl_in_synpred218_command3067);
        nl();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred218_command

    // $ANTLR start synpred219_command
    public final void synpred219_command_fragment() throws RecognitionException {   
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:765:21: ( ws )
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:765:21: ws
        {
        pushFollow(FOLLOW_ws_in_synpred219_command3108);
        ws();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred219_command

    // $ANTLR start synpred222_command
    public final void synpred222_command_fragment() throws RecognitionException {   
        commandParser.ws_return w = null;


        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:769:31: (w= ws )
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:769:31: w= ws
        {
        pushFollow(FOLLOW_ws_in_synpred222_command3158);
        w=ws();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred222_command

    // $ANTLR start synpred226_command
    public final void synpred226_command_fragment() throws RecognitionException {   
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:783:13: ( ws )
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:783:13: ws
        {
        pushFollow(FOLLOW_ws_in_synpred226_command3240);
        ws();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred226_command

    // $ANTLR start synpred227_command
    public final void synpred227_command_fragment() throws RecognitionException {   
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:783:33: ( ws )
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:783:33: ws
        {
        pushFollow(FOLLOW_ws_in_synpred227_command3249);
        ws();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred227_command

    // $ANTLR start synpred228_command
    public final void synpred228_command_fragment() throws RecognitionException {   
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:783:38: ( nl )
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:783:38: nl
        {
        pushFollow(FOLLOW_nl_in_synpred228_command3253);
        nl();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred228_command

    // $ANTLR start synpred229_command
    public final void synpred229_command_fragment() throws RecognitionException {   
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:796:21: ( ws )
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:796:21: ws
        {
        pushFollow(FOLLOW_ws_in_synpred229_command3305);
        ws();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred229_command

    // $ANTLR start synpred232_command
    public final void synpred232_command_fragment() throws RecognitionException {   
        commandParser.ws_return w = null;


        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:800:34: (w= ws )
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:800:34: w= ws
        {
        pushFollow(FOLLOW_ws_in_synpred232_command3355);
        w=ws();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred232_command

    // $ANTLR start synpred236_command
    public final void synpred236_command_fragment() throws RecognitionException {   
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:814:13: ( ws )
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:814:13: ws
        {
        pushFollow(FOLLOW_ws_in_synpred236_command3436);
        ws();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred236_command

    // $ANTLR start synpred237_command
    public final void synpred237_command_fragment() throws RecognitionException {   
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:814:33: ( ws )
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:814:33: ws
        {
        pushFollow(FOLLOW_ws_in_synpred237_command3445);
        ws();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred237_command

    // $ANTLR start synpred238_command
    public final void synpred238_command_fragment() throws RecognitionException {   
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:814:38: ( nl )
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:814:38: nl
        {
        pushFollow(FOLLOW_nl_in_synpred238_command3449);
        nl();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred238_command

    // $ANTLR start synpred244_command
    public final void synpred244_command_fragment() throws RecognitionException {   
        commandParser.stringExpression_return se = null;


        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:829:3: (se= stringExpression )
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:829:3: se= stringExpression
        {
        pushFollow(FOLLOW_stringExpression_in_synpred244_command3527);
        se=stringExpression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred244_command

    // $ANTLR start synpred245_command
    public final void synpred245_command_fragment() throws RecognitionException {   
        Token str=null;

        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:830:5: (str=~ ( NL ) )
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:830:5: str=~ ( NL )
        {
        str=(Token)input.LT(1);
        if ( (input.LA(1)>=NEGATION && input.LA(1)<=ARTVARCHAR)||(input.LA(1)>=COMMANDCHAR && input.LA(1)<=109) ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }
    }
    // $ANTLR end synpred245_command

    // $ANTLR start synpred246_command
    public final void synpred246_command_fragment() throws RecognitionException {   
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:831:6: ( ws )
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:831:6: ws
        {
        pushFollow(FOLLOW_ws_in_synpred246_command3550);
        ws();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred246_command

    // $ANTLR start synpred247_command
    public final void synpred247_command_fragment() throws RecognitionException {   
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:831:32: ( NL )
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:831:32: NL
        {
        match(input,NL,FOLLOW_NL_in_synpred247_command3555); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred247_command

    // $ANTLR start synpred248_command
    public final void synpred248_command_fragment() throws RecognitionException {   
        commandParser.stringExpression_return se = null;


        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:835:5: (se= stringExpression )
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:835:5: se= stringExpression
        {
        pushFollow(FOLLOW_stringExpression_in_synpred248_command3576);
        se=stringExpression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred248_command

    // $ANTLR start synpred249_command
    public final void synpred249_command_fragment() throws RecognitionException {   
        commandParser.ee_return str = null;


        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:836:5: (str= ee )
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:836:5: str= ee
        {
        pushFollow(FOLLOW_ee_in_synpred249_command3586);
        str=ee();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred249_command

    // $ANTLR start synpred250_command
    public final void synpred250_command_fragment() throws RecognitionException {   
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:838:26: ( NL )
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:838:26: NL
        {
        match(input,NL,FOLLOW_NL_in_synpred250_command3603); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred250_command

    // $ANTLR start synpred251_command
    public final void synpred251_command_fragment() throws RecognitionException {   
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:842:18: ( ws )
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:842:18: ws
        {
        pushFollow(FOLLOW_ws_in_synpred251_command3624);
        ws();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred251_command

    // $ANTLR start synpred252_command
    public final void synpred252_command_fragment() throws RecognitionException {   
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:842:22: ( '(' )
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:842:22: '('
        {
        match(input,86,FOLLOW_86_in_synpred252_command3627); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred252_command

    // $ANTLR start synpred253_command
    public final void synpred253_command_fragment() throws RecognitionException {   
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:842:47: ( ')' )
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:842:47: ')'
        {
        match(input,87,FOLLOW_87_in_synpred253_command3634); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred253_command

    // $ANTLR start synpred254_command
    public final void synpred254_command_fragment() throws RecognitionException {   
        commandParser.stringExpression_return se = null;


        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:856:5: (se= stringExpression )
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:856:5: se= stringExpression
        {
        pushFollow(FOLLOW_stringExpression_in_synpred254_command3650);
        se=stringExpression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred254_command

    // $ANTLR start synpred255_command
    public final void synpred255_command_fragment() throws RecognitionException {   
        Token str=null;

        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:857:5: (str=~ ( NL ) )
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:857:5: str=~ ( NL )
        {
        str=(Token)input.LT(1);
        if ( (input.LA(1)>=NEGATION && input.LA(1)<=ARTVARCHAR)||(input.LA(1)>=COMMANDCHAR && input.LA(1)<=109) ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }
    }
    // $ANTLR end synpred255_command

    // $ANTLR start synpred256_command
    public final void synpred256_command_fragment() throws RecognitionException {   
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:858:6: ( ws )
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:858:6: ws
        {
        pushFollow(FOLLOW_ws_in_synpred256_command3674);
        ws();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred256_command

    // $ANTLR start synpred257_command
    public final void synpred257_command_fragment() throws RecognitionException {   
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:858:32: ( NL )
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:858:32: NL
        {
        match(input,NL,FOLLOW_NL_in_synpred257_command3679); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred257_command

    // $ANTLR start synpred258_command
    public final void synpred258_command_fragment() throws RecognitionException {   
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:862:26: ( ws )
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:862:26: ws
        {
        pushFollow(FOLLOW_ws_in_synpred258_command3702);
        ws();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred258_command

    // $ANTLR start synpred259_command
    public final void synpred259_command_fragment() throws RecognitionException {   
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:862:30: ( '(' )
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:862:30: '('
        {
        match(input,86,FOLLOW_86_in_synpred259_command3705); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred259_command

    // $ANTLR start synpred260_command
    public final void synpred260_command_fragment() throws RecognitionException {   
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:862:55: ( ')' )
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:862:55: ')'
        {
        match(input,87,FOLLOW_87_in_synpred260_command3712); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred260_command

    // $ANTLR start synpred261_command
    public final void synpred261_command_fragment() throws RecognitionException {   
        commandParser.stringExpression_return se = null;


        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:876:5: (se= stringExpression )
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:876:5: se= stringExpression
        {
        pushFollow(FOLLOW_stringExpression_in_synpred261_command3728);
        se=stringExpression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred261_command

    // $ANTLR start synpred262_command
    public final void synpred262_command_fragment() throws RecognitionException {   
        commandParser.ee_return str = null;


        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:877:5: (str= ee )
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:877:5: str= ee
        {
        pushFollow(FOLLOW_ee_in_synpred262_command3739);
        str=ee();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred262_command

    // $ANTLR start synpred263_command
    public final void synpred263_command_fragment() throws RecognitionException {   
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:879:27: ( NL )
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:879:27: NL
        {
        match(input,NL,FOLLOW_NL_in_synpred263_command3757); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred263_command

    // $ANTLR start synpred264_command
    public final void synpred264_command_fragment() throws RecognitionException {   
        commandParser.stringExpression_return se = null;


        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:884:5: (se= stringExpression )
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:884:5: se= stringExpression
        {
        pushFollow(FOLLOW_stringExpression_in_synpred264_command3778);
        se=stringExpression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred264_command

    // $ANTLR start synpred265_command
    public final void synpred265_command_fragment() throws RecognitionException {   
        commandParser.ee_return str = null;


        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:885:5: (str= ee )
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:885:5: str= ee
        {
        pushFollow(FOLLOW_ee_in_synpred265_command3789);
        str=ee();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred265_command

    // $ANTLR start synpred266_command
    public final void synpred266_command_fragment() throws RecognitionException {   
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:886:7: ( ws )
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:886:7: ws
        {
        pushFollow(FOLLOW_ws_in_synpred266_command3800);
        ws();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred266_command

    // $ANTLR start synpred267_command
    public final void synpred267_command_fragment() throws RecognitionException {   
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:886:33: ( NL )
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:886:33: NL
        {
        match(input,NL,FOLLOW_NL_in_synpred267_command3805); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred267_command

    // $ANTLR start synpred268_command
    public final void synpred268_command_fragment() throws RecognitionException {   
        commandParser.stringExpression_return se = null;


        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:890:5: (se= stringExpression )
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:890:5: se= stringExpression
        {
        pushFollow(FOLLOW_stringExpression_in_synpred268_command3826);
        se=stringExpression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred268_command

    // $ANTLR start synpred269_command
    public final void synpred269_command_fragment() throws RecognitionException {   
        commandParser.ee_return str = null;


        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:891:5: (str= ee )
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:891:5: str= ee
        {
        pushFollow(FOLLOW_ee_in_synpred269_command3836);
        str=ee();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred269_command

    // $ANTLR start synpred270_command
    public final void synpred270_command_fragment() throws RecognitionException {   
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:893:26: ( NL )
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:893:26: NL
        {
        match(input,NL,FOLLOW_NL_in_synpred270_command3853); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred270_command

    // $ANTLR start synpred271_command
    public final void synpred271_command_fragment() throws RecognitionException {   
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:896:9: ( ws )
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:896:9: ws
        {
        pushFollow(FOLLOW_ws_in_synpred271_command3868);
        ws();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred271_command

    // $ANTLR start synpred272_command
    public final void synpred272_command_fragment() throws RecognitionException {   
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:896:14: ( NL )
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:896:14: NL
        {
        match(input,NL,FOLLOW_NL_in_synpred272_command3872); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred272_command

    // $ANTLR start synpred273_command
    public final void synpred273_command_fragment() throws RecognitionException {   
        commandParser.stringExpression_return se = null;


        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:898:5: (se= stringExpression )
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:898:5: se= stringExpression
        {
        pushFollow(FOLLOW_stringExpression_in_synpred273_command3886);
        se=stringExpression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred273_command

    // $ANTLR start synpred275_command
    public final void synpred275_command_fragment() throws RecognitionException {   
        commandParser.ee_return str = null;


        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:900:5: (str= ee )
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:900:5: str= ee
        {
        pushFollow(FOLLOW_ee_in_synpred275_command3908);
        str=ee();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred275_command

    // $ANTLR start synpred277_command
    public final void synpred277_command_fragment() throws RecognitionException {   
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:902:23: ( NL )
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:902:23: NL
        {
        match(input,NL,FOLLOW_NL_in_synpred277_command3928); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred277_command

    // $ANTLR start synpred279_command
    public final void synpred279_command_fragment() throws RecognitionException {   
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:909:5: ( stringExpression )
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:909:5: stringExpression
        {
        pushFollow(FOLLOW_stringExpression_in_synpred279_command3951);
        stringExpression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred279_command

    // $ANTLR start synpred281_command
    public final void synpred281_command_fragment() throws RecognitionException {   
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:910:16: ( ws )
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:910:16: ws
        {
        pushFollow(FOLLOW_ws_in_synpred281_command3963);
        ws();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred281_command

    // $ANTLR start synpred283_command
    public final void synpred283_command_fragment() throws RecognitionException {   
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:914:14: ( nameExpression )
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:914:14: nameExpression
        {
        pushFollow(FOLLOW_nameExpression_in_synpred283_command3984);
        nameExpression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred283_command

    // $ANTLR start synpred284_command
    public final void synpred284_command_fragment() throws RecognitionException {   
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:914:30: ( STRING )
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:914:30: STRING
        {
        match(input,STRING,FOLLOW_STRING_in_synpred284_command3987); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred284_command

    // $ANTLR start synpred285_command
    public final void synpred285_command_fragment() throws RecognitionException {   
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:914:6: ( ( STRING )* ( nameExpression )+ ( STRING )* )
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:914:6: ( STRING )* ( nameExpression )+ ( STRING )*
        {
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:914:6: ( STRING )*
        loop291:
        do {
            int alt291=2;
            int LA291_0 = input.LA(1);

            if ( (LA291_0==STRING) ) {
                alt291=1;
            }


            switch (alt291) {
        	case 1 :
        	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:0:0: STRING
        	    {
        	    match(input,STRING,FOLLOW_STRING_in_synpred285_command3981); if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop291;
            }
        } while (true);

        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:914:14: ( nameExpression )+
        int cnt292=0;
        loop292:
        do {
            int alt292=2;
            int LA292_0 = input.LA(1);

            if ( (LA292_0==EPRESSIONCHAR) ) {
                alt292=1;
            }


            switch (alt292) {
        	case 1 :
        	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:0:0: nameExpression
        	    {
        	    pushFollow(FOLLOW_nameExpression_in_synpred285_command3984);
        	    nameExpression();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    if ( cnt292 >= 1 ) break loop292;
        	    if (state.backtracking>0) {state.failed=true; return ;}
                    EarlyExitException eee =
                        new EarlyExitException(292, input);
                    throw eee;
            }
            cnt292++;
        } while (true);

        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:914:30: ( STRING )*
        loop293:
        do {
            int alt293=2;
            int LA293_0 = input.LA(1);

            if ( (LA293_0==STRING) ) {
                alt293=1;
            }


            switch (alt293) {
        	case 1 :
        	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:0:0: STRING
        	    {
        	    match(input,STRING,FOLLOW_STRING_in_synpred285_command3987); if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop293;
            }
        } while (true);


        }
    }
    // $ANTLR end synpred285_command

    // $ANTLR start synpred289_command
    public final void synpred289_command_fragment() throws RecognitionException {   
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:919:24: ( ws )
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:919:24: ws
        {
        pushFollow(FOLLOW_ws_in_synpred289_command4038);
        ws();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred289_command

    // $ANTLR start synpred291_command
    public final void synpred291_command_fragment() throws RecognitionException {   
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:919:49: ( EPRESSIONCHAR )
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:919:49: EPRESSIONCHAR
        {
        match(input,EPRESSIONCHAR,FOLLOW_EPRESSIONCHAR_in_synpred291_command4048); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred291_command

    // $ANTLR start synpred292_command
    public final void synpred292_command_fragment() throws RecognitionException {   
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:923:20: ( nameExprTerm )
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:923:20: nameExprTerm
        {
        pushFollow(FOLLOW_nameExprTerm_in_synpred292_command4070);
        nameExprTerm();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred292_command

    // $ANTLR start synpred294_command
    public final void synpred294_command_fragment() throws RecognitionException {   
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:928:5: ( REFERENCECHAR simpleExpr )
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:928:5: REFERENCECHAR simpleExpr
        {
        match(input,REFERENCECHAR,FOLLOW_REFERENCECHAR_in_synpred294_command4095); if (state.failed) return ;
        pushFollow(FOLLOW_simpleExpr_in_synpred294_command4098);
        simpleExpr();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred294_command

    // $ANTLR start synpred296_command
    public final void synpred296_command_fragment() throws RecognitionException {   
        commandParser.relation_return r2 = null;


        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:934:21: ( ( '&&' | '||' ) r2= relation )
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:934:21: ( '&&' | '||' ) r2= relation
        {
        if ( (input.LA(1)>=89 && input.LA(1)<=90) ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }

        pushFollow(FOLLOW_relation_in_synpred296_command4143);
        r2=relation();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred296_command

    // $ANTLR start synpred299_command
    public final void synpred299_command_fragment() throws RecognitionException {   
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:943:12: ( ws )
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:943:12: ws
        {
        pushFollow(FOLLOW_ws_in_synpred299_command4181);
        ws();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred299_command

    // $ANTLR start synpred304_command
    public final void synpred304_command_fragment() throws RecognitionException {   
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:945:16: ( ws )
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:945:16: ws
        {
        pushFollow(FOLLOW_ws_in_synpred304_command4217);
        ws();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred304_command

    // $ANTLR start synpred310_command
    public final void synpred310_command_fragment() throws RecognitionException {   
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:949:11: ( ( '==' | '!=' | '<' | '<=' | '>=' | '>' ) add )
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:949:11: ( '==' | '!=' | '<' | '<=' | '>=' | '>' ) add
        {
        if ( (input.LA(1)>=93 && input.LA(1)<=98) ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }

        pushFollow(FOLLOW_add_in_synpred310_command4273);
        add();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred310_command

    // $ANTLR start synpred312_command
    public final void synpred312_command_fragment() throws RecognitionException {   
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:953:11: ( ( '+' | '-' ) mult )
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:953:11: ( '+' | '-' ) mult
        {
        if ( (input.LA(1)>=99 && input.LA(1)<=100) ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }

        pushFollow(FOLLOW_mult_in_synpred312_command4302);
        mult();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred312_command

    // $ANTLR start synpred314_command
    public final void synpred314_command_fragment() throws RecognitionException {   
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:957:12: ( ( '*' | '/' ) unary )
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:957:12: ( '*' | '/' ) unary
        {
        if ( (input.LA(1)>=101 && input.LA(1)<=102) ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }

        pushFollow(FOLLOW_unary_in_synpred314_command4332);
        unary();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred314_command

    // $ANTLR start synpred319_command
    public final void synpred319_command_fragment() throws RecognitionException {   
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:962:18: ( ws )
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:962:18: ws
        {
        pushFollow(FOLLOW_ws_in_synpred319_command4372);
        ws();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred319_command

    // $ANTLR start synpred328_command
    public final void synpred328_command_fragment() throws RecognitionException {   
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:974:27: ( ws )
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:974:27: ws
        {
        pushFollow(FOLLOW_ws_in_synpred328_command4472);
        ws();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred328_command

    // $ANTLR start synpred330_command
    public final void synpred330_command_fragment() throws RecognitionException {   
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:975:29: ( ws )
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:975:29: ws
        {
        pushFollow(FOLLOW_ws_in_synpred330_command4484);
        ws();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred330_command

    // $ANTLR start synpred332_command
    public final void synpred332_command_fragment() throws RecognitionException {   
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:976:31: ( ws )
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:976:31: ws
        {
        pushFollow(FOLLOW_ws_in_synpred332_command4496);
        ws();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred332_command

    // $ANTLR start synpred334_command
    public final void synpred334_command_fragment() throws RecognitionException {   
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:977:25: ( ws )
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:977:25: ws
        {
        pushFollow(FOLLOW_ws_in_synpred334_command4508);
        ws();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred334_command

    // $ANTLR start synpred336_command
    public final void synpred336_command_fragment() throws RecognitionException {   
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:978:24: ( ws )
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:978:24: ws
        {
        pushFollow(FOLLOW_ws_in_synpred336_command4520);
        ws();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred336_command

    // $ANTLR start synpred338_command
    public final void synpred338_command_fragment() throws RecognitionException {   
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:1036:17: ( NOTNEWLINE )
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:1036:17: NOTNEWLINE
        {
        match(input,NOTNEWLINE,FOLLOW_NOTNEWLINE_in_synpred338_command4861); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred338_command

    // $ANTLR start synpred339_command
    public final void synpred339_command_fragment() throws RecognitionException {   
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:1036:45: ( . )
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:1036:45: .
        {
        matchAny(input); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred339_command

    // $ANTLR start synpred340_command
    public final void synpred340_command_fragment() throws RecognitionException {   
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:1036:30: ( QUOTATIONMARK ( ( . )* ) )
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:1036:30: QUOTATIONMARK ( ( . )* )
        {
        match(input,QUOTATIONMARK,FOLLOW_QUOTATIONMARK_in_synpred340_command4865); if (state.failed) return ;
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:1036:44: ( ( . )* )
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:1036:45: ( . )*
        {
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:1036:45: ( . )*
        loop305:
        do {
            int alt305=2;
            int LA305_0 = input.LA(1);

            if ( ((LA305_0>=NEGATION && LA305_0<=109)) ) {
                alt305=1;
            }


            switch (alt305) {
        	case 1 :
        	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:0:0: .
        	    {
        	    matchAny(input); if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop305;
            }
        } while (true);


        }


        }
    }
    // $ANTLR end synpred340_command

    // $ANTLR start synpred341_command
    public final void synpred341_command_fragment() throws RecognitionException {   
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:1036:51: ( WS )
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:1036:51: WS
        {
        match(input,WS,FOLLOW_WS_in_synpred341_command4874); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred341_command

    // $ANTLR start synpred342_command
    public final void synpred342_command_fragment() throws RecognitionException {   
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:1036:51: ( ( WS )* )
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:1036:51: ( WS )*
        {
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:1036:51: ( WS )*
        loop306:
        do {
            int alt306=2;
            int LA306_0 = input.LA(1);

            if ( (LA306_0==WS) ) {
                alt306=1;
            }


            switch (alt306) {
        	case 1 :
        	    // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:0:0: WS
        	    {
        	    match(input,WS,FOLLOW_WS_in_synpred342_command4874); if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop306;
            }
        } while (true);


        }
    }
    // $ANTLR end synpred342_command

    // $ANTLR start synpred343_command
    public final void synpred343_command_fragment() throws RecognitionException {   
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:1036:57: ( '\\\\\"' )
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:1036:57: '\\\\\"'
        {
        match(input,105,FOLLOW_105_in_synpred343_command4879); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred343_command

    // $ANTLR start synpred344_command
    public final void synpred344_command_fragment() throws RecognitionException {   
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:1036:65: ( '\\\\#' )
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:1036:65: '\\\\#'
        {
        match(input,106,FOLLOW_106_in_synpred344_command4883); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred344_command

    // $ANTLR start synpred345_command
    public final void synpred345_command_fragment() throws RecognitionException {   
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:1036:73: ( '\\\\?' )
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:1036:73: '\\\\?'
        {
        match(input,107,FOLLOW_107_in_synpred345_command4887); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred345_command

    // $ANTLR start synpred346_command
    public final void synpred346_command_fragment() throws RecognitionException {   
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:1036:81: ( '\\\\%' )
        // C:\\work\\art\\latest-code\\ART\\src\\art\\grammar\\command.g:1036:81: '\\\\%'
        {
        match(input,108,FOLLOW_108_in_synpred346_command4891); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred346_command

    // Delegated rules

    public final boolean synpred332_command() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred332_command_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred261_command() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred261_command_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred334_command() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred334_command_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred312_command() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred312_command_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred267_command() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred267_command_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred285_command() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred285_command_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred258_command() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred258_command_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred50_command() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred50_command_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred254_command() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred254_command_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred214_command() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred214_command_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred250_command() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred250_command_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred69_command() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred69_command_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred24_command() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred24_command_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred211_command() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred211_command_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred76_command() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred76_command_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred6_command() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred6_command_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred296_command() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred296_command_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred264_command() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred264_command_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred46_command() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred46_command_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred310_command() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred310_command_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred51_command() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred51_command_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred330_command() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred330_command_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred215_command() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred215_command_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred38_command() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred38_command_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred144_command() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred144_command_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred49_command() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred49_command_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred339_command() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred339_command_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred32_command() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred32_command_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred37_command() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred37_command_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred202_command() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred202_command_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred246_command() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred246_command_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred123_command() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred123_command_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred165_command() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred165_command_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred260_command() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred260_command_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred116_command() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred116_command_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred218_command() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred218_command_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred160_command() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred160_command_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred171_command() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred171_command_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred292_command() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred292_command_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred114_command() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred114_command_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred80_command() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred80_command_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred27_command() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred27_command_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred139_command() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred139_command_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred82_command() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred82_command_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred283_command() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred283_command_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred304_command() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred304_command_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred102_command() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred102_command_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred90_command() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred90_command_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred99_command() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred99_command_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred291_command() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred291_command_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred105_command() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred105_command_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred57_command() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred57_command_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred270_command() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred270_command_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred142_command() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred142_command_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred66_command() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred66_command_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred54_command() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred54_command_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred63_command() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred63_command_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred36_command() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred36_command_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred162_command() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred162_command_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred100_command() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred100_command_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred55_command() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred55_command_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred60_command() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred60_command_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred251_command() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred251_command_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred58_command() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred58_command_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred237_command() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred237_command_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred342_command() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred342_command_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred248_command() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred248_command_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred132_command() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred132_command_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred341_command() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred341_command_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred319_command() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred319_command_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred180_command() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred180_command_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred289_command() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred289_command_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred328_command() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred328_command_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred257_command() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred257_command_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred244_command() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred244_command_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred75_command() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred75_command_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred98_command() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred98_command_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred273_command() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred273_command_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred294_command() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred294_command_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred271_command() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred271_command_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred236_command() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred236_command_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred268_command() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred268_command_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred156_command() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred156_command_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred94_command() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred94_command_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred120_command() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred120_command_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred147_command() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred147_command_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred48_command() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred48_command_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred140_command() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred140_command_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred247_command() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred247_command_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred130_command() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred130_command_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred203_command() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred203_command_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred256_command() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred256_command_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred173_command() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred173_command_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred2_command() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred2_command_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred74_command() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred74_command_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred275_command() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred275_command_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred227_command() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred227_command_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred177_command() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred177_command_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred145_command() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred145_command_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred176_command() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred176_command_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred134_command() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred134_command_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred29_command() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred29_command_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred272_command() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred272_command_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred127_command() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred127_command_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred112_command() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred112_command_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred206_command() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred206_command_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred148_command() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred148_command_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred164_command() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred164_command_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred222_command() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred222_command_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred178_command() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred178_command_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred229_command() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred229_command_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred175_command() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred175_command_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred226_command() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred226_command_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred284_command() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred284_command_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred346_command() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred346_command_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred269_command() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred269_command_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred85_command() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred85_command_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred111_command() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred111_command_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred281_command() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred281_command_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred277_command() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred277_command_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred343_command() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred343_command_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred44_command() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred44_command_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred43_command() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred43_command_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred279_command() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred279_command_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred262_command() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred262_command_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred219_command() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred219_command_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred205_command() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred205_command_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred119_command() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred119_command_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred169_command() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred169_command_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred182_command() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred182_command_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred126_command() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred126_command_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred23_command() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred23_command_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred39_command() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred39_command_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred340_command() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred340_command_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred336_command() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred336_command_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred153_command() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred153_command_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred172_command() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred172_command_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred137_command() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred137_command_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred210_command() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred210_command_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred79_command() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred79_command_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred3_command() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred3_command_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred228_command() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred228_command_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred56_command() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred56_command_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred89_command() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred89_command_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred345_command() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred345_command_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred314_command() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred314_command_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred253_command() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred253_command_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred135_command() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred135_command_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred151_command() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred151_command_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred30_command() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred30_command_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred84_command() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred84_command_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred163_command() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred163_command_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred95_command() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred95_command_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred266_command() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred266_command_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred217_command() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred217_command_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred155_command() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred155_command_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred143_command() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred143_command_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred128_command() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred128_command_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred238_command() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred238_command_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred117_command() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred117_command_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred338_command() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred338_command_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred249_command() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred249_command_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred35_command() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred35_command_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred232_command() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred232_command_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred124_command() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred124_command_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred207_command() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred207_command_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred204_command() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred204_command_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred344_command() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred344_command_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred136_command() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred136_command_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred252_command() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred252_command_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred59_command() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred59_command_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred245_command() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred245_command_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred61_command() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred61_command_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred152_command() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred152_command_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred62_command() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred62_command_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred259_command() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred259_command_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred73_command() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred73_command_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred158_command() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred158_command_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred68_command() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred68_command_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred216_command() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred216_command_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred103_command() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred103_command_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred65_command() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred65_command_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred255_command() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred255_command_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred299_command() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred299_command_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred150_command() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred150_command_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred183_command() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred183_command_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred77_command() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred77_command_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred104_command() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred104_command_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred263_command() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred263_command_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred64_command() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred64_command_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred4_command() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred4_command_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred265_command() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred265_command_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred168_command() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred168_command_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }


    protected DFA29 dfa29 = new DFA29(this);
    protected DFA43 dfa43 = new DFA43(this);
    protected DFA52 dfa52 = new DFA52(this);
    protected DFA92 dfa92 = new DFA92(this);
    protected DFA112 dfa112 = new DFA112(this);
    protected DFA141 dfa141 = new DFA141(this);
    protected DFA151 dfa151 = new DFA151(this);
    protected DFA168 dfa168 = new DFA168(this);
    protected DFA174 dfa174 = new DFA174(this);
    protected DFA176 dfa176 = new DFA176(this);
    protected DFA180 dfa180 = new DFA180(this);
    protected DFA184 dfa184 = new DFA184(this);
    protected DFA195 dfa195 = new DFA195(this);
    protected DFA205 dfa205 = new DFA205(this);
    protected DFA209 dfa209 = new DFA209(this);
    protected DFA216 dfa216 = new DFA216(this);
    protected DFA218 dfa218 = new DFA218(this);
    protected DFA220 dfa220 = new DFA220(this);
    protected DFA225 dfa225 = new DFA225(this);
    protected DFA231 dfa231 = new DFA231(this);
    protected DFA234 dfa234 = new DFA234(this);
    static final String DFA29_eotS =
        "\12\uffff";
    static final String DFA29_eofS =
        "\1\2\11\uffff";
    static final String DFA29_minS =
        "\1\4\1\0\5\uffff\1\0\2\uffff";
    static final String DFA29_maxS =
        "\1\155\1\0\5\uffff\1\0\2\uffff";
    static final String DFA29_acceptS =
        "\2\uffff\1\2\6\uffff\1\1";
    static final String DFA29_specialS =
        "\1\uffff\1\0\5\uffff\1\1\2\uffff}>";
    static final String[] DFA29_transitionS = {
            "\110\2\1\1\10\2\1\7\30\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            ""
    };

    static final short[] DFA29_eot = DFA.unpackEncodedString(DFA29_eotS);
    static final short[] DFA29_eof = DFA.unpackEncodedString(DFA29_eofS);
    static final char[] DFA29_min = DFA.unpackEncodedStringToUnsignedChars(DFA29_minS);
    static final char[] DFA29_max = DFA.unpackEncodedStringToUnsignedChars(DFA29_maxS);
    static final short[] DFA29_accept = DFA.unpackEncodedString(DFA29_acceptS);
    static final short[] DFA29_special = DFA.unpackEncodedString(DFA29_specialS);
    static final short[][] DFA29_transition;

    static {
        int numStates = DFA29_transitionS.length;
        DFA29_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA29_transition[i] = DFA.unpackEncodedString(DFA29_transitionS[i]);
        }
    }

    class DFA29 extends DFA {

        public DFA29(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 29;
            this.eot = DFA29_eot;
            this.eof = DFA29_eof;
            this.min = DFA29_min;
            this.max = DFA29_max;
            this.accept = DFA29_accept;
            this.special = DFA29_special;
            this.transition = DFA29_transition;
        }
        public String getDescription() {
            return "()* loopback of 276:4: ( ( ws )* ',' ( ws )* ( NL )* ( ws )* e2= expression )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA29_1 = input.LA(1);

                         
                        int index29_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred49_command()) ) {s = 9;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index29_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA29_7 = input.LA(1);

                         
                        int index29_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred49_command()) ) {s = 9;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index29_7);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 29, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA43_eotS =
        "\13\uffff";
    static final String DFA43_eofS =
        "\13\uffff";
    static final String DFA43_minS =
        "\1\11\1\0\11\uffff";
    static final String DFA43_maxS =
        "\1\150\1\0\11\uffff";
    static final String DFA43_acceptS =
        "\2\uffff\1\2\7\uffff\1\1";
    static final String DFA43_specialS =
        "\1\uffff\1\0\11\uffff}>";
    static final String[] DFA43_transitionS = {
            "\1\2\64\uffff\1\2\15\uffff\1\2\11\uffff\1\1\4\uffff\2\2\6\uffff"+
            "\2\2\2\uffff\2\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA43_eot = DFA.unpackEncodedString(DFA43_eotS);
    static final short[] DFA43_eof = DFA.unpackEncodedString(DFA43_eofS);
    static final char[] DFA43_min = DFA.unpackEncodedStringToUnsignedChars(DFA43_minS);
    static final char[] DFA43_max = DFA.unpackEncodedStringToUnsignedChars(DFA43_maxS);
    static final short[] DFA43_accept = DFA.unpackEncodedString(DFA43_acceptS);
    static final short[] DFA43_special = DFA.unpackEncodedString(DFA43_specialS);
    static final short[][] DFA43_transition;

    static {
        int numStates = DFA43_transitionS.length;
        DFA43_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA43_transition[i] = DFA.unpackEncodedString(DFA43_transitionS[i]);
        }
    }

    class DFA43 extends DFA {

        public DFA43(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 43;
            this.eot = DFA43_eot;
            this.eof = DFA43_eof;
            this.min = DFA43_min;
            this.max = DFA43_max;
            this.accept = DFA43_accept;
            this.special = DFA43_special;
            this.transition = DFA43_transition;
        }
        public String getDescription() {
            return "327:13: ( '(' )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA43_1 = input.LA(1);

                         
                        int index43_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred64_command()) ) {s = 10;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index43_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 43, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA52_eotS =
        "\13\uffff";
    static final String DFA52_eofS =
        "\13\uffff";
    static final String DFA52_minS =
        "\1\11\1\0\11\uffff";
    static final String DFA52_maxS =
        "\1\150\1\0\11\uffff";
    static final String DFA52_acceptS =
        "\2\uffff\1\2\7\uffff\1\1";
    static final String DFA52_specialS =
        "\1\uffff\1\0\11\uffff}>";
    static final String[] DFA52_transitionS = {
            "\1\2\64\uffff\1\2\15\uffff\1\2\11\uffff\1\1\4\uffff\2\2\6\uffff"+
            "\2\2\2\uffff\2\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA52_eot = DFA.unpackEncodedString(DFA52_eotS);
    static final short[] DFA52_eof = DFA.unpackEncodedString(DFA52_eofS);
    static final char[] DFA52_min = DFA.unpackEncodedStringToUnsignedChars(DFA52_minS);
    static final char[] DFA52_max = DFA.unpackEncodedStringToUnsignedChars(DFA52_maxS);
    static final short[] DFA52_accept = DFA.unpackEncodedString(DFA52_acceptS);
    static final short[] DFA52_special = DFA.unpackEncodedString(DFA52_specialS);
    static final short[][] DFA52_transition;

    static {
        int numStates = DFA52_transitionS.length;
        DFA52_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA52_transition[i] = DFA.unpackEncodedString(DFA52_transitionS[i]);
        }
    }

    class DFA52 extends DFA {

        public DFA52(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 52;
            this.eot = DFA52_eot;
            this.eof = DFA52_eof;
            this.min = DFA52_min;
            this.max = DFA52_max;
            this.accept = DFA52_accept;
            this.special = DFA52_special;
            this.transition = DFA52_transition;
        }
        public String getDescription() {
            return "364:14: ( '(' )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA52_1 = input.LA(1);

                         
                        int index52_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred75_command()) ) {s = 10;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index52_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 52, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA92_eotS =
        "\12\uffff";
    static final String DFA92_eofS =
        "\12\uffff";
    static final String DFA92_minS =
        "\1\4\1\0\1\11\1\0\6\uffff";
    static final String DFA92_maxS =
        "\1\155\1\0\1\71\1\0\6\uffff";
    static final String DFA92_acceptS =
        "\4\uffff\1\4\1\5\1\6\1\1\1\2\1\3";
    static final String DFA92_specialS =
        "\1\uffff\1\0\1\uffff\1\1\6\uffff}>";
    static final String[] DFA92_transitionS = {
            "\4\5\1\2\62\5\1\3\1\4\17\5\1\1\41\5",
            "\1\uffff",
            "\5\7\1\uffff\7\7\3\uffff\4\7\6\uffff\1\7\1\6\3\7\1\uffff\2"+
            "\7\1\uffff\1\7\3\uffff\1\10\1\11\2\7\1\uffff\5\7",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA92_eot = DFA.unpackEncodedString(DFA92_eotS);
    static final short[] DFA92_eof = DFA.unpackEncodedString(DFA92_eofS);
    static final char[] DFA92_min = DFA.unpackEncodedStringToUnsignedChars(DFA92_minS);
    static final char[] DFA92_max = DFA.unpackEncodedStringToUnsignedChars(DFA92_maxS);
    static final short[] DFA92_accept = DFA.unpackEncodedString(DFA92_acceptS);
    static final short[] DFA92_special = DFA.unpackEncodedString(DFA92_specialS);
    static final short[][] DFA92_transition;

    static {
        int numStates = DFA92_transitionS.length;
        DFA92_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA92_transition[i] = DFA.unpackEncodedString(DFA92_transitionS[i]);
        }
    }

    class DFA92 extends DFA {

        public DFA92(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 92;
            this.eot = DFA92_eot;
            this.eof = DFA92_eof;
            this.min = DFA92_min;
            this.max = DFA92_max;
            this.accept = DFA92_accept;
            this.special = DFA92_special;
            this.transition = DFA92_transition;
        }
        public String getDescription() {
            return "()* loopback of 579:5: (c= command (w1= ws )* | cc1= COMMANDCHAR v= varDesc (w2= ws )* | cc2= COMMANDCHAR i= iter (w3= ws )* | se= stringExpression (w4= ws )* | str= ee (w5= ws )* )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA92_1 = input.LA(1);

                         
                        int index92_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred137_command()) ) {s = 5;}

                        else if ( (true) ) {s = 6;}

                         
                        input.seek(index92_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA92_3 = input.LA(1);

                         
                        int index92_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_command()) ) {s = 4;}

                        else if ( (synpred137_command()) ) {s = 5;}

                         
                        input.seek(index92_3);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 92, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA112_eotS =
        "\12\uffff";
    static final String DFA112_eofS =
        "\12\uffff";
    static final String DFA112_minS =
        "\1\4\1\0\1\11\1\0\6\uffff";
    static final String DFA112_maxS =
        "\1\155\1\0\1\71\1\0\6\uffff";
    static final String DFA112_acceptS =
        "\4\uffff\1\4\1\5\1\6\1\1\1\2\1\3";
    static final String DFA112_specialS =
        "\1\uffff\1\1\1\uffff\1\0\6\uffff}>";
    static final String[] DFA112_transitionS = {
            "\4\5\1\2\62\5\1\3\1\4\17\5\1\1\41\5",
            "\1\uffff",
            "\5\7\1\uffff\7\7\3\uffff\4\7\6\uffff\1\7\1\uffff\3\7\1\6\2"+
            "\7\1\uffff\1\7\3\uffff\1\10\1\11\2\7\1\uffff\5\7",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA112_eot = DFA.unpackEncodedString(DFA112_eotS);
    static final short[] DFA112_eof = DFA.unpackEncodedString(DFA112_eofS);
    static final char[] DFA112_min = DFA.unpackEncodedStringToUnsignedChars(DFA112_minS);
    static final char[] DFA112_max = DFA.unpackEncodedStringToUnsignedChars(DFA112_maxS);
    static final short[] DFA112_accept = DFA.unpackEncodedString(DFA112_acceptS);
    static final short[] DFA112_special = DFA.unpackEncodedString(DFA112_specialS);
    static final short[][] DFA112_transition;

    static {
        int numStates = DFA112_transitionS.length;
        DFA112_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA112_transition[i] = DFA.unpackEncodedString(DFA112_transitionS[i]);
        }
    }

    class DFA112 extends DFA {

        public DFA112(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 112;
            this.eot = DFA112_eot;
            this.eof = DFA112_eof;
            this.min = DFA112_min;
            this.max = DFA112_max;
            this.accept = DFA112_accept;
            this.special = DFA112_special;
            this.transition = DFA112_transition;
        }
        public String getDescription() {
            return "()* loopback of 653:6: (c= command (w1= ws )* | cc1= COMMANDCHAR v= varDesc (w2= ws )* | cc2= COMMANDCHAR i= iter (w3= ws )* | se= stringExpression (w4= ws )* | str= ee (w5= ws )* )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA112_3 = input.LA(1);

                         
                        int index112_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred163_command()) ) {s = 4;}

                        else if ( (synpred165_command()) ) {s = 5;}

                         
                        input.seek(index112_3);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA112_1 = input.LA(1);

                         
                        int index112_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred165_command()) ) {s = 5;}

                        else if ( (true) ) {s = 6;}

                         
                        input.seek(index112_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 112, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA141_eotS =
        "\12\uffff";
    static final String DFA141_eofS =
        "\1\2\11\uffff";
    static final String DFA141_minS =
        "\1\4\1\0\10\uffff";
    static final String DFA141_maxS =
        "\1\155\1\0\10\uffff";
    static final String DFA141_acceptS =
        "\2\uffff\1\2\6\uffff\1\1";
    static final String DFA141_specialS =
        "\1\uffff\1\0\10\uffff}>";
    static final String[] DFA141_transitionS = {
            "\120\2\1\1\31\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA141_eot = DFA.unpackEncodedString(DFA141_eotS);
    static final short[] DFA141_eof = DFA.unpackEncodedString(DFA141_eofS);
    static final char[] DFA141_min = DFA.unpackEncodedStringToUnsignedChars(DFA141_minS);
    static final char[] DFA141_max = DFA.unpackEncodedStringToUnsignedChars(DFA141_maxS);
    static final short[] DFA141_accept = DFA.unpackEncodedString(DFA141_acceptS);
    static final short[] DFA141_special = DFA.unpackEncodedString(DFA141_specialS);
    static final short[][] DFA141_transition;

    static {
        int numStates = DFA141_transitionS.length;
        DFA141_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA141_transition[i] = DFA.unpackEncodedString(DFA141_transitionS[i]);
        }
    }

    class DFA141 extends DFA {

        public DFA141(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 141;
            this.eot = DFA141_eot;
            this.eof = DFA141_eof;
            this.min = DFA141_min;
            this.max = DFA141_max;
            this.accept = DFA141_accept;
            this.special = DFA141_special;
            this.transition = DFA141_transition;
        }
        public String getDescription() {
            return "739:26: ( '=' ( ws )* e= expression ( ws )* )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA141_1 = input.LA(1);

                         
                        int index141_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred205_command()) ) {s = 9;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index141_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 141, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA151_eotS =
        "\12\uffff";
    static final String DFA151_eofS =
        "\1\1\11\uffff";
    static final String DFA151_minS =
        "\1\4\5\uffff\1\0\3\uffff";
    static final String DFA151_maxS =
        "\1\155\5\uffff\1\0\3\uffff";
    static final String DFA151_acceptS =
        "\1\uffff\1\2\7\uffff\1\1";
    static final String DFA151_specialS =
        "\6\uffff\1\0\3\uffff}>";
    static final String[] DFA151_transitionS = {
            "\121\1\1\6\30\1",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            ""
    };

    static final short[] DFA151_eot = DFA.unpackEncodedString(DFA151_eotS);
    static final short[] DFA151_eof = DFA.unpackEncodedString(DFA151_eofS);
    static final char[] DFA151_min = DFA.unpackEncodedStringToUnsignedChars(DFA151_minS);
    static final char[] DFA151_max = DFA.unpackEncodedStringToUnsignedChars(DFA151_maxS);
    static final short[] DFA151_accept = DFA.unpackEncodedString(DFA151_acceptS);
    static final short[] DFA151_special = DFA.unpackEncodedString(DFA151_specialS);
    static final short[][] DFA151_transition;

    static {
        int numStates = DFA151_transitionS.length;
        DFA151_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA151_transition[i] = DFA.unpackEncodedString(DFA151_transitionS[i]);
        }
    }

    class DFA151 extends DFA {

        public DFA151(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 151;
            this.eot = DFA151_eot;
            this.eof = DFA151_eof;
            this.min = DFA151_min;
            this.max = DFA151_max;
            this.accept = DFA151_accept;
            this.special = DFA151_special;
            this.transition = DFA151_transition;
        }
        public String getDescription() {
            return "()* loopback of 753:3: ( ',' ( ws )* i1= IDENT ( ws )* '=' ( ws )* e1= expression ( ws )* )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA151_6 = input.LA(1);

                         
                        int index151_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred216_command()) ) {s = 9;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index151_6);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 151, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA168_eotS =
        "\12\uffff";
    static final String DFA168_eofS =
        "\1\2\11\uffff";
    static final String DFA168_minS =
        "\1\4\1\0\2\uffff\4\0\2\uffff";
    static final String DFA168_maxS =
        "\1\155\1\0\2\uffff\4\0\2\uffff";
    static final String DFA168_acceptS =
        "\2\uffff\1\3\5\uffff\1\2\1\1";
    static final String DFA168_specialS =
        "\1\uffff\1\0\2\uffff\1\1\1\2\1\3\1\4\2\uffff}>";
    static final String[] DFA168_transitionS = {
            "\3\7\1\2\1\4\62\7\1\6\1\5\17\7\1\1\41\7",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            ""
    };

    static final short[] DFA168_eot = DFA.unpackEncodedString(DFA168_eotS);
    static final short[] DFA168_eof = DFA.unpackEncodedString(DFA168_eofS);
    static final char[] DFA168_min = DFA.unpackEncodedStringToUnsignedChars(DFA168_minS);
    static final char[] DFA168_max = DFA.unpackEncodedStringToUnsignedChars(DFA168_maxS);
    static final short[] DFA168_accept = DFA.unpackEncodedString(DFA168_acceptS);
    static final short[] DFA168_special = DFA.unpackEncodedString(DFA168_specialS);
    static final short[][] DFA168_transition;

    static {
        int numStates = DFA168_transitionS.length;
        DFA168_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA168_transition[i] = DFA.unpackEncodedString(DFA168_transitionS[i]);
        }
    }

    class DFA168 extends DFA {

        public DFA168(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 168;
            this.eot = DFA168_eot;
            this.eof = DFA168_eof;
            this.min = DFA168_min;
            this.max = DFA168_max;
            this.accept = DFA168_accept;
            this.special = DFA168_special;
            this.transition = DFA168_transition;
        }
        public String getDescription() {
            return "()* loopback of 828:3: (se= stringExpression | str=~ ( NL ) )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA168_1 = input.LA(1);

                         
                        int index168_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred245_command()) ) {s = 8;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index168_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA168_4 = input.LA(1);

                         
                        int index168_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred245_command()) ) {s = 8;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index168_4);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA168_5 = input.LA(1);

                         
                        int index168_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred244_command()) ) {s = 9;}

                        else if ( (synpred245_command()) ) {s = 8;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index168_5);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA168_6 = input.LA(1);

                         
                        int index168_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred244_command()) ) {s = 9;}

                        else if ( (synpred245_command()) ) {s = 8;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index168_6);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA168_7 = input.LA(1);

                         
                        int index168_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred245_command()) ) {s = 8;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index168_7);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 168, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA174_eotS =
        "\13\uffff";
    static final String DFA174_eofS =
        "\13\uffff";
    static final String DFA174_minS =
        "\1\11\1\0\11\uffff";
    static final String DFA174_maxS =
        "\1\150\1\0\11\uffff";
    static final String DFA174_acceptS =
        "\2\uffff\1\2\7\uffff\1\1";
    static final String DFA174_specialS =
        "\1\uffff\1\0\11\uffff}>";
    static final String[] DFA174_transitionS = {
            "\1\2\64\uffff\1\2\15\uffff\1\2\11\uffff\1\1\4\uffff\2\2\6\uffff"+
            "\2\2\2\uffff\2\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA174_eot = DFA.unpackEncodedString(DFA174_eotS);
    static final short[] DFA174_eof = DFA.unpackEncodedString(DFA174_eofS);
    static final char[] DFA174_min = DFA.unpackEncodedStringToUnsignedChars(DFA174_minS);
    static final char[] DFA174_max = DFA.unpackEncodedStringToUnsignedChars(DFA174_maxS);
    static final short[] DFA174_accept = DFA.unpackEncodedString(DFA174_acceptS);
    static final short[] DFA174_special = DFA.unpackEncodedString(DFA174_specialS);
    static final short[][] DFA174_transition;

    static {
        int numStates = DFA174_transitionS.length;
        DFA174_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA174_transition[i] = DFA.unpackEncodedString(DFA174_transitionS[i]);
        }
    }

    class DFA174 extends DFA {

        public DFA174(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 174;
            this.eot = DFA174_eot;
            this.eof = DFA174_eof;
            this.min = DFA174_min;
            this.max = DFA174_max;
            this.accept = DFA174_accept;
            this.special = DFA174_special;
            this.transition = DFA174_transition;
        }
        public String getDescription() {
            return "842:22: ( '(' )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA174_1 = input.LA(1);

                         
                        int index174_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred252_command()) ) {s = 10;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index174_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 174, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA176_eotS =
        "\12\uffff";
    static final String DFA176_eofS =
        "\1\2\11\uffff";
    static final String DFA176_minS =
        "\1\4\1\0\2\uffff\4\0\2\uffff";
    static final String DFA176_maxS =
        "\1\155\1\0\2\uffff\4\0\2\uffff";
    static final String DFA176_acceptS =
        "\2\uffff\1\3\5\uffff\1\2\1\1";
    static final String DFA176_specialS =
        "\1\uffff\1\0\2\uffff\1\1\1\2\1\3\1\4\2\uffff}>";
    static final String[] DFA176_transitionS = {
            "\3\7\1\2\1\4\62\7\1\6\1\5\17\7\1\1\41\7",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            ""
    };

    static final short[] DFA176_eot = DFA.unpackEncodedString(DFA176_eotS);
    static final short[] DFA176_eof = DFA.unpackEncodedString(DFA176_eofS);
    static final char[] DFA176_min = DFA.unpackEncodedStringToUnsignedChars(DFA176_minS);
    static final char[] DFA176_max = DFA.unpackEncodedStringToUnsignedChars(DFA176_maxS);
    static final short[] DFA176_accept = DFA.unpackEncodedString(DFA176_acceptS);
    static final short[] DFA176_special = DFA.unpackEncodedString(DFA176_specialS);
    static final short[][] DFA176_transition;

    static {
        int numStates = DFA176_transitionS.length;
        DFA176_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA176_transition[i] = DFA.unpackEncodedString(DFA176_transitionS[i]);
        }
    }

    class DFA176 extends DFA {

        public DFA176(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 176;
            this.eot = DFA176_eot;
            this.eof = DFA176_eof;
            this.min = DFA176_min;
            this.max = DFA176_max;
            this.accept = DFA176_accept;
            this.special = DFA176_special;
            this.transition = DFA176_transition;
        }
        public String getDescription() {
            return "()* loopback of 856:3: (se= stringExpression | str=~ ( NL ) )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA176_1 = input.LA(1);

                         
                        int index176_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred255_command()) ) {s = 8;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index176_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA176_4 = input.LA(1);

                         
                        int index176_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred255_command()) ) {s = 8;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index176_4);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA176_5 = input.LA(1);

                         
                        int index176_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred254_command()) ) {s = 9;}

                        else if ( (synpred255_command()) ) {s = 8;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index176_5);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA176_6 = input.LA(1);

                         
                        int index176_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred254_command()) ) {s = 9;}

                        else if ( (synpred255_command()) ) {s = 8;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index176_6);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA176_7 = input.LA(1);

                         
                        int index176_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred255_command()) ) {s = 8;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index176_7);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 176, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA180_eotS =
        "\13\uffff";
    static final String DFA180_eofS =
        "\13\uffff";
    static final String DFA180_minS =
        "\1\11\1\0\11\uffff";
    static final String DFA180_maxS =
        "\1\150\1\0\11\uffff";
    static final String DFA180_acceptS =
        "\2\uffff\1\2\7\uffff\1\1";
    static final String DFA180_specialS =
        "\1\uffff\1\0\11\uffff}>";
    static final String[] DFA180_transitionS = {
            "\1\2\64\uffff\1\2\15\uffff\1\2\11\uffff\1\1\4\uffff\2\2\6\uffff"+
            "\2\2\2\uffff\2\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA180_eot = DFA.unpackEncodedString(DFA180_eotS);
    static final short[] DFA180_eof = DFA.unpackEncodedString(DFA180_eofS);
    static final char[] DFA180_min = DFA.unpackEncodedStringToUnsignedChars(DFA180_minS);
    static final char[] DFA180_max = DFA.unpackEncodedStringToUnsignedChars(DFA180_maxS);
    static final short[] DFA180_accept = DFA.unpackEncodedString(DFA180_acceptS);
    static final short[] DFA180_special = DFA.unpackEncodedString(DFA180_specialS);
    static final short[][] DFA180_transition;

    static {
        int numStates = DFA180_transitionS.length;
        DFA180_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA180_transition[i] = DFA.unpackEncodedString(DFA180_transitionS[i]);
        }
    }

    class DFA180 extends DFA {

        public DFA180(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 180;
            this.eot = DFA180_eot;
            this.eof = DFA180_eof;
            this.min = DFA180_min;
            this.max = DFA180_max;
            this.accept = DFA180_accept;
            this.special = DFA180_special;
            this.transition = DFA180_transition;
        }
        public String getDescription() {
            return "862:30: ( '(' )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA180_1 = input.LA(1);

                         
                        int index180_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred259_command()) ) {s = 10;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index180_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 180, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA184_eotS =
        "\12\uffff";
    static final String DFA184_eofS =
        "\1\3\11\uffff";
    static final String DFA184_minS =
        "\1\4\2\0\2\uffff\3\0\2\uffff";
    static final String DFA184_maxS =
        "\1\155\2\0\2\uffff\3\0\2\uffff";
    static final String DFA184_acceptS =
        "\3\uffff\1\3\4\uffff\1\2\1\1";
    static final String DFA184_specialS =
        "\1\uffff\1\0\1\1\2\uffff\1\2\1\3\1\4\2\uffff}>";
    static final String[] DFA184_transitionS = {
            "\3\7\1\2\1\3\62\7\1\6\1\5\17\7\1\1\41\7",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            ""
    };

    static final short[] DFA184_eot = DFA.unpackEncodedString(DFA184_eotS);
    static final short[] DFA184_eof = DFA.unpackEncodedString(DFA184_eofS);
    static final char[] DFA184_min = DFA.unpackEncodedStringToUnsignedChars(DFA184_minS);
    static final char[] DFA184_max = DFA.unpackEncodedStringToUnsignedChars(DFA184_maxS);
    static final short[] DFA184_accept = DFA.unpackEncodedString(DFA184_acceptS);
    static final short[] DFA184_special = DFA.unpackEncodedString(DFA184_specialS);
    static final short[][] DFA184_transition;

    static {
        int numStates = DFA184_transitionS.length;
        DFA184_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA184_transition[i] = DFA.unpackEncodedString(DFA184_transitionS[i]);
        }
    }

    class DFA184 extends DFA {

        public DFA184(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 184;
            this.eot = DFA184_eot;
            this.eof = DFA184_eof;
            this.min = DFA184_min;
            this.max = DFA184_max;
            this.accept = DFA184_accept;
            this.special = DFA184_special;
            this.transition = DFA184_transition;
        }
        public String getDescription() {
            return "()* loopback of 884:3: (se= stringExpression | str= ee )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA184_1 = input.LA(1);

                         
                        int index184_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred265_command()) ) {s = 8;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index184_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA184_2 = input.LA(1);

                         
                        int index184_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred265_command()) ) {s = 8;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index184_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA184_5 = input.LA(1);

                         
                        int index184_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred264_command()) ) {s = 9;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index184_5);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA184_6 = input.LA(1);

                         
                        int index184_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred264_command()) ) {s = 9;}

                        else if ( (synpred265_command()) ) {s = 8;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index184_6);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA184_7 = input.LA(1);

                         
                        int index184_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred265_command()) ) {s = 8;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index184_7);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 184, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA195_eotS =
        "\6\uffff";
    static final String DFA195_eofS =
        "\6\uffff";
    static final String DFA195_minS =
        "\1\11\1\uffff\1\11\1\0\2\uffff";
    static final String DFA195_maxS =
        "\1\150\1\uffff\1\150\1\0\2\uffff";
    static final String DFA195_acceptS =
        "\1\uffff\1\1\2\uffff\1\2\1\3";
    static final String DFA195_specialS =
        "\3\uffff\1\0\2\uffff}>";
    static final String[] DFA195_transitionS = {
            "\1\1\61\uffff\1\3\1\4\1\uffff\1\1\15\uffff\1\2\11\uffff\1\1"+
            "\4\uffff\2\1\6\uffff\2\1\2\uffff\2\1",
            "",
            "\1\1\61\uffff\1\5\2\uffff\1\1\15\uffff\1\2\11\uffff\1\1\4"+
            "\uffff\2\1\12\uffff\2\1",
            "\1\uffff",
            "",
            ""
    };

    static final short[] DFA195_eot = DFA.unpackEncodedString(DFA195_eotS);
    static final short[] DFA195_eof = DFA.unpackEncodedString(DFA195_eofS);
    static final char[] DFA195_min = DFA.unpackEncodedStringToUnsignedChars(DFA195_minS);
    static final char[] DFA195_max = DFA.unpackEncodedStringToUnsignedChars(DFA195_maxS);
    static final short[] DFA195_accept = DFA.unpackEncodedString(DFA195_acceptS);
    static final short[] DFA195_special = DFA.unpackEncodedString(DFA195_specialS);
    static final short[][] DFA195_transition;

    static {
        int numStates = DFA195_transitionS.length;
        DFA195_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA195_transition[i] = DFA.unpackEncodedString(DFA195_transitionS[i]);
        }
    }

    class DFA195 extends DFA {

        public DFA195(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 195;
            this.eot = DFA195_eot;
            this.eof = DFA195_eof;
            this.min = DFA195_min;
            this.max = DFA195_max;
            this.accept = DFA195_accept;
            this.special = DFA195_special;
            this.transition = DFA195_transition;
        }
        public String getDescription() {
            return "907:1: expression : ( freeExpression | stringExpression | ( ws )* STRING ( ws )* );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA195_3 = input.LA(1);

                         
                        int index195_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred279_command()) ) {s = 4;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index195_3);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 195, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA205_eotS =
        "\5\uffff";
    static final String DFA205_eofS =
        "\5\uffff";
    static final String DFA205_minS =
        "\1\74\2\11\2\uffff";
    static final String DFA205_maxS =
        "\1\74\2\150\2\uffff";
    static final String DFA205_acceptS =
        "\3\uffff\1\1\1\2";
    static final String DFA205_specialS =
        "\5\uffff}>";
    static final String[] DFA205_transitionS = {
            "\1\1",
            "\1\4\63\uffff\1\3\1\4\15\uffff\1\2\11\uffff\1\4\4\uffff\2"+
            "\4\6\uffff\2\4\2\uffff\2\4",
            "\1\4\63\uffff\1\3\1\4\15\uffff\1\2\11\uffff\1\4\4\uffff\2"+
            "\4\6\uffff\2\4\2\uffff\2\4",
            "",
            ""
    };

    static final short[] DFA205_eot = DFA.unpackEncodedString(DFA205_eotS);
    static final short[] DFA205_eof = DFA.unpackEncodedString(DFA205_eofS);
    static final char[] DFA205_min = DFA.unpackEncodedStringToUnsignedChars(DFA205_minS);
    static final char[] DFA205_max = DFA.unpackEncodedStringToUnsignedChars(DFA205_maxS);
    static final short[] DFA205_accept = DFA.unpackEncodedString(DFA205_acceptS);
    static final short[] DFA205_special = DFA.unpackEncodedString(DFA205_specialS);
    static final short[][] DFA205_transition;

    static {
        int numStates = DFA205_transitionS.length;
        DFA205_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA205_transition[i] = DFA.unpackEncodedString(DFA205_transitionS[i]);
        }
    }

    class DFA205 extends DFA {

        public DFA205(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 205;
            this.eot = DFA205_eot;
            this.eof = DFA205_eof;
            this.min = DFA205_min;
            this.max = DFA205_max;
            this.accept = DFA205_accept;
            this.special = DFA205_special;
            this.transition = DFA205_transition;
        }
        public String getDescription() {
            return "917:1: nameExpression : (e= EPRESSIONCHAR ( ws )* simpleExpr ( ws )* EPRESSIONCHAR | e= EPRESSIONCHAR ( ws )* freeExpression ( ws )* ( EPRESSIONCHAR )+ );";
        }
    }
    static final String DFA209_eotS =
        "\26\uffff";
    static final String DFA209_eofS =
        "\1\1\25\uffff";
    static final String DFA209_minS =
        "\1\4\21\uffff\2\0\2\uffff";
    static final String DFA209_maxS =
        "\1\155\21\uffff\2\0\2\uffff";
    static final String DFA209_acceptS =
        "\1\uffff\1\2\23\uffff\1\1";
    static final String DFA209_specialS =
        "\22\uffff\1\0\1\1\2\uffff}>";
    static final String[] DFA209_transitionS = {
            "\125\1\1\22\1\23\23\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            ""
    };

    static final short[] DFA209_eot = DFA.unpackEncodedString(DFA209_eotS);
    static final short[] DFA209_eof = DFA.unpackEncodedString(DFA209_eofS);
    static final char[] DFA209_min = DFA.unpackEncodedStringToUnsignedChars(DFA209_minS);
    static final char[] DFA209_max = DFA.unpackEncodedStringToUnsignedChars(DFA209_maxS);
    static final short[] DFA209_accept = DFA.unpackEncodedString(DFA209_acceptS);
    static final short[] DFA209_special = DFA.unpackEncodedString(DFA209_specialS);
    static final short[][] DFA209_transition;

    static {
        int numStates = DFA209_transitionS.length;
        DFA209_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA209_transition[i] = DFA.unpackEncodedString(DFA209_transitionS[i]);
        }
    }

    class DFA209 extends DFA {

        public DFA209(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 209;
            this.eot = DFA209_eot;
            this.eof = DFA209_eof;
            this.min = DFA209_min;
            this.max = DFA209_max;
            this.accept = DFA209_accept;
            this.special = DFA209_special;
            this.transition = DFA209_transition;
        }
        public String getDescription() {
            return "()* loopback of 934:20: ( ( '&&' | '||' ) r2= relation )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA209_18 = input.LA(1);

                         
                        int index209_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred296_command()) ) {s = 21;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index209_18);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA209_19 = input.LA(1);

                         
                        int index209_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred296_command()) ) {s = 21;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index209_19);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 209, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA216_eotS =
        "\34\uffff";
    static final String DFA216_eofS =
        "\1\1\33\uffff";
    static final String DFA216_minS =
        "\1\4\23\uffff\6\0\2\uffff";
    static final String DFA216_maxS =
        "\1\155\23\uffff\6\0\2\uffff";
    static final String DFA216_acceptS =
        "\1\uffff\1\2\31\uffff\1\1";
    static final String DFA216_specialS =
        "\24\uffff\1\0\1\1\1\2\1\3\1\4\1\5\2\uffff}>";
    static final String[] DFA216_transitionS = {
            "\131\1\1\24\1\25\1\26\1\27\1\30\1\31\13\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            ""
    };

    static final short[] DFA216_eot = DFA.unpackEncodedString(DFA216_eotS);
    static final short[] DFA216_eof = DFA.unpackEncodedString(DFA216_eofS);
    static final char[] DFA216_min = DFA.unpackEncodedStringToUnsignedChars(DFA216_minS);
    static final char[] DFA216_max = DFA.unpackEncodedStringToUnsignedChars(DFA216_maxS);
    static final short[] DFA216_accept = DFA.unpackEncodedString(DFA216_acceptS);
    static final short[] DFA216_special = DFA.unpackEncodedString(DFA216_specialS);
    static final short[][] DFA216_transition;

    static {
        int numStates = DFA216_transitionS.length;
        DFA216_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA216_transition[i] = DFA.unpackEncodedString(DFA216_transitionS[i]);
        }
    }

    class DFA216 extends DFA {

        public DFA216(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 216;
            this.eot = DFA216_eot;
            this.eof = DFA216_eof;
            this.min = DFA216_min;
            this.max = DFA216_max;
            this.accept = DFA216_accept;
            this.special = DFA216_special;
            this.transition = DFA216_transition;
        }
        public String getDescription() {
            return "()* loopback of 949:10: ( ( '==' | '!=' | '<' | '<=' | '>=' | '>' ) add )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA216_20 = input.LA(1);

                         
                        int index216_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred310_command()) ) {s = 27;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index216_20);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA216_21 = input.LA(1);

                         
                        int index216_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred310_command()) ) {s = 27;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index216_21);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA216_22 = input.LA(1);

                         
                        int index216_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred310_command()) ) {s = 27;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index216_22);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA216_23 = input.LA(1);

                         
                        int index216_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred310_command()) ) {s = 27;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index216_23);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA216_24 = input.LA(1);

                         
                        int index216_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred310_command()) ) {s = 27;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index216_24);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA216_25 = input.LA(1);

                         
                        int index216_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred310_command()) ) {s = 27;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index216_25);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 216, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA218_eotS =
        "\34\uffff";
    static final String DFA218_eofS =
        "\1\1\33\uffff";
    static final String DFA218_minS =
        "\1\4\16\uffff\1\0\1\uffff\1\0\12\uffff";
    static final String DFA218_maxS =
        "\1\155\16\uffff\1\0\1\uffff\1\0\12\uffff";
    static final String DFA218_acceptS =
        "\1\uffff\1\2\31\uffff\1\1";
    static final String DFA218_specialS =
        "\17\uffff\1\0\1\uffff\1\1\12\uffff}>";
    static final String[] DFA218_transitionS = {
            "\137\1\1\17\1\21\11\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA218_eot = DFA.unpackEncodedString(DFA218_eotS);
    static final short[] DFA218_eof = DFA.unpackEncodedString(DFA218_eofS);
    static final char[] DFA218_min = DFA.unpackEncodedStringToUnsignedChars(DFA218_minS);
    static final char[] DFA218_max = DFA.unpackEncodedStringToUnsignedChars(DFA218_maxS);
    static final short[] DFA218_accept = DFA.unpackEncodedString(DFA218_acceptS);
    static final short[] DFA218_special = DFA.unpackEncodedString(DFA218_specialS);
    static final short[][] DFA218_transition;

    static {
        int numStates = DFA218_transitionS.length;
        DFA218_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA218_transition[i] = DFA.unpackEncodedString(DFA218_transitionS[i]);
        }
    }

    class DFA218 extends DFA {

        public DFA218(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 218;
            this.eot = DFA218_eot;
            this.eof = DFA218_eof;
            this.min = DFA218_min;
            this.max = DFA218_max;
            this.accept = DFA218_accept;
            this.special = DFA218_special;
            this.transition = DFA218_transition;
        }
        public String getDescription() {
            return "()* loopback of 953:10: ( ( '+' | '-' ) mult )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA218_15 = input.LA(1);

                         
                        int index218_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred312_command()) ) {s = 27;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index218_15);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA218_17 = input.LA(1);

                         
                        int index218_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred312_command()) ) {s = 27;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index218_17);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 218, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA220_eotS =
        "\36\uffff";
    static final String DFA220_eofS =
        "\1\1\35\uffff";
    static final String DFA220_minS =
        "\1\4\31\uffff\2\0\2\uffff";
    static final String DFA220_maxS =
        "\1\155\31\uffff\2\0\2\uffff";
    static final String DFA220_acceptS =
        "\1\uffff\1\2\33\uffff\1\1";
    static final String DFA220_specialS =
        "\32\uffff\1\0\1\1\2\uffff}>";
    static final String[] DFA220_transitionS = {
            "\141\1\1\32\1\33\7\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            ""
    };

    static final short[] DFA220_eot = DFA.unpackEncodedString(DFA220_eotS);
    static final short[] DFA220_eof = DFA.unpackEncodedString(DFA220_eofS);
    static final char[] DFA220_min = DFA.unpackEncodedStringToUnsignedChars(DFA220_minS);
    static final char[] DFA220_max = DFA.unpackEncodedStringToUnsignedChars(DFA220_maxS);
    static final short[] DFA220_accept = DFA.unpackEncodedString(DFA220_acceptS);
    static final short[] DFA220_special = DFA.unpackEncodedString(DFA220_specialS);
    static final short[][] DFA220_transition;

    static {
        int numStates = DFA220_transitionS.length;
        DFA220_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA220_transition[i] = DFA.unpackEncodedString(DFA220_transitionS[i]);
        }
    }

    class DFA220 extends DFA {

        public DFA220(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 220;
            this.eot = DFA220_eot;
            this.eof = DFA220_eof;
            this.min = DFA220_min;
            this.max = DFA220_max;
            this.accept = DFA220_accept;
            this.special = DFA220_special;
            this.transition = DFA220_transition;
        }
        public String getDescription() {
            return "()* loopback of 957:11: ( ( '*' | '/' ) unary )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA220_26 = input.LA(1);

                         
                        int index220_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred314_command()) ) {s = 29;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index220_26);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA220_27 = input.LA(1);

                         
                        int index220_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred314_command()) ) {s = 29;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index220_27);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 220, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA225_eotS =
        "\5\uffff";
    static final String DFA225_eofS =
        "\5\uffff";
    static final String DFA225_minS =
        "\1\11\1\uffff\1\11\2\uffff";
    static final String DFA225_maxS =
        "\1\150\1\uffff\1\150\2\uffff";
    static final String DFA225_acceptS =
        "\1\uffff\1\1\1\uffff\1\2\1\3";
    static final String DFA225_specialS =
        "\5\uffff}>";
    static final String[] DFA225_transitionS = {
            "\1\1\64\uffff\1\1\15\uffff\1\2\11\uffff\1\1\4\uffff\2\1\6\uffff"+
            "\2\1\2\uffff\1\3\1\4",
            "",
            "\1\1\64\uffff\1\1\15\uffff\1\2\11\uffff\1\1\4\uffff\2\1\12"+
            "\uffff\1\3\1\4",
            "",
            ""
    };

    static final short[] DFA225_eot = DFA.unpackEncodedString(DFA225_eotS);
    static final short[] DFA225_eof = DFA.unpackEncodedString(DFA225_eofS);
    static final char[] DFA225_min = DFA.unpackEncodedStringToUnsignedChars(DFA225_minS);
    static final char[] DFA225_max = DFA.unpackEncodedStringToUnsignedChars(DFA225_maxS);
    static final short[] DFA225_accept = DFA.unpackEncodedString(DFA225_acceptS);
    static final short[] DFA225_special = DFA.unpackEncodedString(DFA225_specialS);
    static final short[][] DFA225_transition;

    static {
        int numStates = DFA225_transitionS.length;
        DFA225_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA225_transition[i] = DFA.unpackEncodedString(DFA225_transitionS[i]);
        }
    }

    class DFA225 extends DFA {

        public DFA225(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 225;
            this.eot = DFA225_eot;
            this.eof = DFA225_eof;
            this.min = DFA225_min;
            this.max = DFA225_max;
            this.accept = DFA225_accept;
            this.special = DFA225_special;
            this.transition = DFA225_transition;
        }
        public String getDescription() {
            return "960:1: unary : ( ( '+' | negation )* arithmeticTerm | ( ws )* defined ( ws )* arithmeticTerm | ( ws )* bpv );";
        }
    }
    static final String DFA231_eotS =
        "\15\uffff";
    static final String DFA231_eofS =
        "\15\uffff";
    static final String DFA231_minS =
        "\1\150\1\23\13\uffff";
    static final String DFA231_maxS =
        "\1\150\1\107\13\uffff";
    static final String DFA231_acceptS =
        "\2\uffff\1\6\1\5\1\2\1\13\1\1\1\7\1\4\1\3\1\11\1\12\1\10";
    static final String DFA231_specialS =
        "\15\uffff}>";
    static final String[] DFA231_transitionS = {
            "\1\1",
            "\1\5\1\13\52\uffff\1\6\1\4\1\11\1\10\1\3\1\2\1\7\1\14\1\12",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA231_eot = DFA.unpackEncodedString(DFA231_eotS);
    static final short[] DFA231_eof = DFA.unpackEncodedString(DFA231_eofS);
    static final char[] DFA231_min = DFA.unpackEncodedStringToUnsignedChars(DFA231_minS);
    static final char[] DFA231_max = DFA.unpackEncodedStringToUnsignedChars(DFA231_maxS);
    static final short[] DFA231_accept = DFA.unpackEncodedString(DFA231_acceptS);
    static final short[] DFA231_special = DFA.unpackEncodedString(DFA231_specialS);
    static final short[][] DFA231_transition;

    static {
        int numStates = DFA231_transitionS.length;
        DFA231_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA231_transition[i] = DFA.unpackEncodedString(DFA231_transitionS[i]);
        }
    }

    class DFA231 extends DFA {

        public DFA231(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 231;
            this.eot = DFA231_eot;
            this.eof = DFA231_eof;
            this.min = DFA231_min;
            this.max = DFA231_max;
            this.accept = DFA231_accept;
            this.special = DFA231_special;
            this.transition = DFA231_transition;
        }
        public String getDescription() {
            return "967:1: bpv : ( artvarchar ISLAST arithmeticTerm | artvarchar ISFIRST arithmeticTerm | artvarchar SIZE arithmeticTerm | artvarchar ISNUMERIC arithmeticTerm | artvarchar ULCAP arithmeticTerm | artvarchar LLCAP arithmeticTerm | artvarchar DEBUGMODE ( ws )* | artvarchar CURRENTFILE ( ws )* | artvarchar DEFAULTOUTPUT ( ws )* | artvarchar OUTFILE ( ws )* | artvarchar OUTDIR ( ws )* );";
        }
    }
    static final String DFA234_eotS =
        "\20\uffff";
    static final String DFA234_eofS =
        "\1\3\17\uffff";
    static final String DFA234_minS =
        "\1\4\2\0\1\uffff\5\0\7\uffff";
    static final String DFA234_maxS =
        "\1\155\2\0\1\uffff\5\0\7\uffff";
    static final String DFA234_acceptS =
        "\3\uffff\1\3\5\uffff\1\1\1\2\1\4\1\5\1\6\1\7\1\10";
    static final String DFA234_specialS =
        "\1\uffff\1\4\1\3\1\uffff\1\1\1\0\1\6\1\5\1\2\7\uffff}>";
    static final String[] DFA234_transitionS = {
            "\105\3\1\2\1\3\1\1\35\3\1\4\1\5\1\6\1\7\1\10",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA234_eot = DFA.unpackEncodedString(DFA234_eotS);
    static final short[] DFA234_eof = DFA.unpackEncodedString(DFA234_eofS);
    static final char[] DFA234_min = DFA.unpackEncodedStringToUnsignedChars(DFA234_minS);
    static final char[] DFA234_max = DFA.unpackEncodedStringToUnsignedChars(DFA234_maxS);
    static final short[] DFA234_accept = DFA.unpackEncodedString(DFA234_acceptS);
    static final short[] DFA234_special = DFA.unpackEncodedString(DFA234_specialS);
    static final short[][] DFA234_transition;

    static {
        int numStates = DFA234_transitionS.length;
        DFA234_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA234_transition[i] = DFA.unpackEncodedString(DFA234_transitionS[i]);
        }
    }

    class DFA234 extends DFA {

        public DFA234(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 234;
            this.eot = DFA234_eot;
            this.eof = DFA234_eof;
            this.min = DFA234_min;
            this.max = DFA234_max;
            this.accept = DFA234_accept;
            this.special = DFA234_special;
            this.transition = DFA234_transition;
        }
        public String getDescription() {
            return "1036:16: ( NOTNEWLINE | QUOTATIONMARK ( ( . )* ) | ( WS )* | '\\\\\"' | '\\\\#' | '\\\\?' | '\\\\%' | '\\\\$' )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA234_5 = input.LA(1);

                         
                        int index234_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred342_command()) ) {s = 3;}

                        else if ( (synpred344_command()) ) {s = 12;}

                         
                        input.seek(index234_5);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA234_4 = input.LA(1);

                         
                        int index234_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred342_command()) ) {s = 3;}

                        else if ( (synpred343_command()) ) {s = 11;}

                         
                        input.seek(index234_4);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA234_8 = input.LA(1);

                         
                        int index234_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred342_command()) ) {s = 3;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index234_8);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA234_2 = input.LA(1);

                         
                        int index234_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred340_command()) ) {s = 10;}

                        else if ( (synpred342_command()) ) {s = 3;}

                         
                        input.seek(index234_2);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA234_1 = input.LA(1);

                         
                        int index234_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred338_command()) ) {s = 9;}

                        else if ( (synpred342_command()) ) {s = 3;}

                         
                        input.seek(index234_1);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA234_7 = input.LA(1);

                         
                        int index234_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred342_command()) ) {s = 3;}

                        else if ( (synpred346_command()) ) {s = 14;}

                         
                        input.seek(index234_7);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA234_6 = input.LA(1);

                         
                        int index234_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred342_command()) ) {s = 3;}

                        else if ( (synpred345_command()) ) {s = 13;}

                         
                        input.seek(index234_6);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 234, _s, input);
            error(nvae);
            throw nvae;
        }
    }
 

    public static final BitSet FOLLOW_ws_in_evaluator122 = new BitSet(new long[]{0x0000000000000100L,0x0000000000001000L});
    public static final BitSet FOLLOW_command_in_evaluator127 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0x00003FFFFFFFFFFFL});
    public static final BitSet FOLLOW_ws_in_evaluator129 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0x00003FFFFFFFFFFFL});
    public static final BitSet FOLLOW_NL_in_evaluator132 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0x00003FFFFFFFFFFFL});
    public static final BitSet FOLLOW_nameExpression_in_evaluator141 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0x00003FFFFFFFFFFFL});
    public static final BitSet FOLLOW_ee_in_evaluator152 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0x00003FFFFFFFFFFFL});
    public static final BitSet FOLLOW_EOF_in_evaluator161 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COMMANDCHAR_in_command179 = new BitSet(new long[]{0x03EC16E81E3FBE00L});
    public static final BitSet FOLLOW_set_in_command187 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_adapt_in_command193 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_outputCommand_in_command199 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_insertCommand_in_command205 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_insertBefCommand_in_command211 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_insertAftCommand_in_command217 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_breakCommand_in_command223 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_removeCommand_in_command229 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ifCommand_in_command235 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ifDefCommand_in_command241 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ifnDefCommand_in_command247 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_selectCommand_in_command253 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_whileCommand_in_command259 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_setLoopCommand_in_command265 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_messageCommand_in_command271 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_textCommand_in_command277 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_command283 = new BitSet(new long[]{0x0000000000000182L,0x0000000000001000L});
    public static final BitSet FOLLOW_ws_in_command287 = new BitSet(new long[]{0x0000000000000182L,0x0000000000001000L});
    public static final BitSet FOLLOW_NL_in_command290 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_simpleAdapt_in_adapt317 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_extendedAdapt_in_adapt323 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_adaptCopyBinary_in_adapt329 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_adaptCopy_in_adapt335 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SIMPLEADAPT_in_simpleAdapt355 = new BitSet(new long[]{0x5800000000000300L,0x0000019818401000L});
    public static final BitSet FOLLOW_ADAPTSAMELEVEL_in_simpleAdapt359 = new BitSet(new long[]{0x5800000000000300L,0x0000019818401000L});
    public static final BitSet FOLLOW_ws_in_simpleAdapt364 = new BitSet(new long[]{0x5800000000000300L,0x0000019818401000L});
    public static final BitSet FOLLOW_expression_in_simpleAdapt369 = new BitSet(new long[]{0x0000000000000102L,0x0000000000001000L});
    public static final BitSet FOLLOW_ws_in_simpleAdapt371 = new BitSet(new long[]{0x0000000000000102L,0x0000000000001000L});
    public static final BitSet FOLLOW_EXTENDEDADAPT_in_extendedAdapt395 = new BitSet(new long[]{0x5800000000000300L,0x0000019818401000L});
    public static final BitSet FOLLOW_EXTENDEDADAPTSAMELEVEL_in_extendedAdapt399 = new BitSet(new long[]{0x5800000000000300L,0x0000019818401000L});
    public static final BitSet FOLLOW_ws_in_extendedAdapt406 = new BitSet(new long[]{0x5800000000000300L,0x0000019818401000L});
    public static final BitSet FOLLOW_expression_in_extendedAdapt411 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0x00003FFFFFFFFFFFL});
    public static final BitSet FOLLOW_command_in_extendedAdapt430 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0x00003FFFFFFFFFFFL});
    public static final BitSet FOLLOW_ee_in_extendedAdapt436 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0x00003FFFFFFFFFFFL});
    public static final BitSet FOLLOW_COMMANDCHAR_in_extendedAdapt446 = new BitSet(new long[]{0x0000000000004000L});
    public static final BitSet FOLLOW_ENDADAPT_in_extendedAdapt448 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ADAPTCOPY_in_adaptCopy479 = new BitSet(new long[]{0x5800000000000300L,0x0000019818401000L});
    public static final BitSet FOLLOW_ws_in_adaptCopy481 = new BitSet(new long[]{0x5800000000000300L,0x0000019818401000L});
    public static final BitSet FOLLOW_expression_in_adaptCopy486 = new BitSet(new long[]{0x0000000000000102L,0x0000000000001000L});
    public static final BitSet FOLLOW_ws_in_adaptCopy488 = new BitSet(new long[]{0x0000000000000102L,0x0000000000001000L});
    public static final BitSet FOLLOW_ADAPTCOPY_in_adaptCopyBinary509 = new BitSet(new long[]{0x5800000000000300L,0x0000019818401000L});
    public static final BitSet FOLLOW_ws_in_adaptCopyBinary511 = new BitSet(new long[]{0x5800000000000300L,0x0000019818401000L});
    public static final BitSet FOLLOW_expression_in_adaptCopyBinary516 = new BitSet(new long[]{0x5800000000000300L,0x0000019818401000L});
    public static final BitSet FOLLOW_ws_in_adaptCopyBinary518 = new BitSet(new long[]{0x5800000000000300L,0x0000019818401000L});
    public static final BitSet FOLLOW_expression_in_adaptCopyBinary523 = new BitSet(new long[]{0x0000000000000102L,0x0000000000001000L});
    public static final BitSet FOLLOW_ws_in_adaptCopyBinary525 = new BitSet(new long[]{0x0000000000000102L,0x0000000000001000L});
    public static final BitSet FOLLOW_SET_in_set555 = new BitSet(new long[]{0x0000000000000300L,0x0000000000001000L});
    public static final BitSet FOLLOW_SETDEFER_in_set561 = new BitSet(new long[]{0x0000000000000300L,0x0000000000001000L});
    public static final BitSet FOLLOW_ws_in_set567 = new BitSet(new long[]{0x0000000000000300L,0x0000000000001000L});
    public static final BitSet FOLLOW_IDENT_in_set572 = new BitSet(new long[]{0x0000000000000100L,0x0000000000101000L});
    public static final BitSet FOLLOW_ws_in_set574 = new BitSet(new long[]{0x0000000000000100L,0x0000000000101000L});
    public static final BitSet FOLLOW_84_in_set577 = new BitSet(new long[]{0x5800000000000300L,0x0000019818401000L});
    public static final BitSet FOLLOW_ws_in_set579 = new BitSet(new long[]{0x5800000000000300L,0x0000019818401000L});
    public static final BitSet FOLLOW_expression_in_set584 = new BitSet(new long[]{0x0000000000000182L,0x0000000000201000L});
    public static final BitSet FOLLOW_ws_in_set588 = new BitSet(new long[]{0x0000000000000182L,0x0000000000201000L});
    public static final BitSet FOLLOW_ws_in_set596 = new BitSet(new long[]{0x0000000000000100L,0x0000000000201000L});
    public static final BitSet FOLLOW_85_in_set599 = new BitSet(new long[]{0x5800000000000380L,0x0000019818401000L});
    public static final BitSet FOLLOW_ws_in_set601 = new BitSet(new long[]{0x5800000000000380L,0x0000019818401000L});
    public static final BitSet FOLLOW_NL_in_set604 = new BitSet(new long[]{0x5800000000000380L,0x0000019818401000L});
    public static final BitSet FOLLOW_ws_in_set607 = new BitSet(new long[]{0x5800000000000300L,0x0000019818401000L});
    public static final BitSet FOLLOW_expression_in_set612 = new BitSet(new long[]{0x0000000000000182L,0x0000000000201000L});
    public static final BitSet FOLLOW_ws_in_set619 = new BitSet(new long[]{0x0000000000000182L,0x0000000000001000L});
    public static final BitSet FOLLOW_NL_in_set622 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fullOutputCommand_in_outputCommand643 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_outdirCommand_in_outputCommand647 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_outfileCommand_in_outputCommand651 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OUTPUT_in_fullOutputCommand665 = new BitSet(new long[]{0x5800000000000300L,0x0000019818401000L});
    public static final BitSet FOLLOW_ws_in_fullOutputCommand667 = new BitSet(new long[]{0x5800000000000300L,0x0000019818401000L});
    public static final BitSet FOLLOW_expression_in_fullOutputCommand672 = new BitSet(new long[]{0x0000000000000182L,0x0000000000001000L});
    public static final BitSet FOLLOW_ws_in_fullOutputCommand674 = new BitSet(new long[]{0x0000000000000182L,0x0000000000001000L});
    public static final BitSet FOLLOW_NL_in_fullOutputCommand677 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OUTDIR_in_outdirCommand700 = new BitSet(new long[]{0x5800000000000300L,0x0000019818401000L});
    public static final BitSet FOLLOW_ws_in_outdirCommand702 = new BitSet(new long[]{0x5800000000000300L,0x0000019818401000L});
    public static final BitSet FOLLOW_expression_in_outdirCommand707 = new BitSet(new long[]{0x0000000000000182L,0x0000000000001000L});
    public static final BitSet FOLLOW_ws_in_outdirCommand709 = new BitSet(new long[]{0x0000000000000182L,0x0000000000001000L});
    public static final BitSet FOLLOW_NL_in_outdirCommand712 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OUTFILE_in_outfileCommand735 = new BitSet(new long[]{0x5800000000000300L,0x0000019818401000L});
    public static final BitSet FOLLOW_ws_in_outfileCommand737 = new BitSet(new long[]{0x5800000000000300L,0x0000019818401000L});
    public static final BitSet FOLLOW_expression_in_outfileCommand742 = new BitSet(new long[]{0x0000000000000182L,0x0000000000001000L});
    public static final BitSet FOLLOW_ws_in_outfileCommand744 = new BitSet(new long[]{0x0000000000000182L,0x0000000000001000L});
    public static final BitSet FOLLOW_NL_in_outfileCommand747 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IF_in_ifCommand771 = new BitSet(new long[]{0x4000000000000300L,0x0000019818401000L});
    public static final BitSet FOLLOW_ws_in_ifCommand773 = new BitSet(new long[]{0x4000000000000300L,0x0000019818401000L});
    public static final BitSet FOLLOW_86_in_ifCommand776 = new BitSet(new long[]{0x4000000000000300L,0x0000019818401000L});
    public static final BitSet FOLLOW_freeExpression_in_ifCommand781 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0x00003FFFFFFFFFFFL});
    public static final BitSet FOLLOW_87_in_ifCommand783 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0x00003FFFFFFFFFFFL});
    public static final BitSet FOLLOW_NL_in_ifCommand786 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0x00003FFFFFFFFFFFL});
    public static final BitSet FOLLOW_command_in_ifCommand810 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0x00003FFFFFFFFFFFL});
    public static final BitSet FOLLOW_stringExpression_in_ifCommand823 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0x00003FFFFFFFFFFFL});
    public static final BitSet FOLLOW_ee_in_ifCommand838 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0x00003FFFFFFFFFFFL});
    public static final BitSet FOLLOW_ws_in_ifCommand850 = new BitSet(new long[]{0x0000000000000100L,0x0000000000001000L});
    public static final BitSet FOLLOW_COMMANDCHAR_in_ifCommand866 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_elifPart_in_ifCommand868 = new BitSet(new long[]{0x0000000000000100L});
    public static final BitSet FOLLOW_COMMANDCHAR_in_ifCommand879 = new BitSet(new long[]{0x0000000001000000L});
    public static final BitSet FOLLOW_elsePart_in_ifCommand881 = new BitSet(new long[]{0x0000000000000100L});
    public static final BitSet FOLLOW_COMMANDCHAR_in_ifCommand890 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_ENDIF_in_ifCommand892 = new BitSet(new long[]{0x0000000000000082L});
    public static final BitSet FOLLOW_NL_in_ifCommand894 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ELIF_in_elifPart921 = new BitSet(new long[]{0x4000000000000300L,0x0000019818401000L});
    public static final BitSet FOLLOW_ws_in_elifPart923 = new BitSet(new long[]{0x4000000000000300L,0x0000019818401000L});
    public static final BitSet FOLLOW_86_in_elifPart926 = new BitSet(new long[]{0x4000000000000300L,0x0000019818401000L});
    public static final BitSet FOLLOW_freeExpression_in_elifPart931 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF2L,0x00003FFFFFFFFFFFL});
    public static final BitSet FOLLOW_87_in_elifPart933 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF2L,0x00003FFFFFFFFFFFL});
    public static final BitSet FOLLOW_NL_in_elifPart936 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF2L,0x00003FFFFFFFFFFFL});
    public static final BitSet FOLLOW_command_in_elifPart968 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF2L,0x00003FFFFFFFFFFFL});
    public static final BitSet FOLLOW_stringExpression_in_elifPart981 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF2L,0x00003FFFFFFFFFFFL});
    public static final BitSet FOLLOW_ee_in_elifPart996 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF2L,0x00003FFFFFFFFFFFL});
    public static final BitSet FOLLOW_ws_in_elifPart1008 = new BitSet(new long[]{0x0000000000000102L,0x0000000000001000L});
    public static final BitSet FOLLOW_ELSE_in_elsePart1026 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF2L,0x00003FFFFFFFFFFFL});
    public static final BitSet FOLLOW_NL_in_elsePart1028 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF2L,0x00003FFFFFFFFFFFL});
    public static final BitSet FOLLOW_command_in_elsePart1044 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF2L,0x00003FFFFFFFFFFFL});
    public static final BitSet FOLLOW_stringExpression_in_elsePart1057 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF2L,0x00003FFFFFFFFFFFL});
    public static final BitSet FOLLOW_ee_in_elsePart1072 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF2L,0x00003FFFFFFFFFFFL});
    public static final BitSet FOLLOW_ws_in_elsePart1084 = new BitSet(new long[]{0x0000000000000102L,0x0000000000001000L});
    public static final BitSet FOLLOW_IFDEF_in_ifDefCommand1110 = new BitSet(new long[]{0x0000000000000300L,0x0000000000001000L});
    public static final BitSet FOLLOW_ws_in_ifDefCommand1112 = new BitSet(new long[]{0x0000000000000300L,0x0000000000001000L});
    public static final BitSet FOLLOW_IDENT_in_ifDefCommand1117 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0x00003FFFFFFFFFFFL});
    public static final BitSet FOLLOW_command_in_ifDefCommand1130 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0x00003FFFFFFFFFFFL});
    public static final BitSet FOLLOW_stringExpression_in_ifDefCommand1143 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0x00003FFFFFFFFFFFL});
    public static final BitSet FOLLOW_ee_in_ifDefCommand1158 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0x00003FFFFFFFFFFFL});
    public static final BitSet FOLLOW_ws_in_ifDefCommand1170 = new BitSet(new long[]{0x0000000000000100L,0x0000000000001000L});
    public static final BitSet FOLLOW_COMMANDCHAR_in_ifDefCommand1178 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_ENDIF_in_ifDefCommand1180 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IFNDEF_in_ifnDefCommand1198 = new BitSet(new long[]{0x0000000000000300L,0x0000000000001000L});
    public static final BitSet FOLLOW_ws_in_ifnDefCommand1200 = new BitSet(new long[]{0x0000000000000300L,0x0000000000001000L});
    public static final BitSet FOLLOW_IDENT_in_ifnDefCommand1205 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0x00003FFFFFFFFFFFL});
    public static final BitSet FOLLOW_command_in_ifnDefCommand1218 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0x00003FFFFFFFFFFFL});
    public static final BitSet FOLLOW_stringExpression_in_ifnDefCommand1231 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0x00003FFFFFFFFFFFL});
    public static final BitSet FOLLOW_ee_in_ifnDefCommand1246 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0x00003FFFFFFFFFFFL});
    public static final BitSet FOLLOW_ws_in_ifnDefCommand1258 = new BitSet(new long[]{0x0000000000000100L,0x0000000000001000L});
    public static final BitSet FOLLOW_COMMANDCHAR_in_ifnDefCommand1266 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_ENDIF_in_ifnDefCommand1268 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REMOVE_in_removeCommand1287 = new BitSet(new long[]{0x0000000000000300L,0x0000000000001000L});
    public static final BitSet FOLLOW_ws_in_removeCommand1289 = new BitSet(new long[]{0x0000000000000300L,0x0000000000001000L});
    public static final BitSet FOLLOW_IDENT_in_removeCommand1294 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SELECT_in_selectCommand1316 = new BitSet(new long[]{0x5800000000000300L,0x0000019818401000L});
    public static final BitSet FOLLOW_ws_in_selectCommand1318 = new BitSet(new long[]{0x5800000000000300L,0x0000019818401000L});
    public static final BitSet FOLLOW_expression_in_selectCommand1323 = new BitSet(new long[]{0x0000000000000180L,0x0000000000001000L});
    public static final BitSet FOLLOW_ws_in_selectCommand1326 = new BitSet(new long[]{0x0000000000000180L,0x0000000000001000L});
    public static final BitSet FOLLOW_nl_in_selectCommand1330 = new BitSet(new long[]{0x0000000000000180L,0x0000000000001000L});
    public static final BitSet FOLLOW_COMMANDCHAR_in_selectCommand1353 = new BitSet(new long[]{0x0000000040000000L});
    public static final BitSet FOLLOW_optionUndef_in_selectCommand1355 = new BitSet(new long[]{0x0000000000000180L,0x0000000000001000L});
    public static final BitSet FOLLOW_ws_in_selectCommand1360 = new BitSet(new long[]{0x0000000000000180L,0x0000000000001000L});
    public static final BitSet FOLLOW_nl_in_selectCommand1364 = new BitSet(new long[]{0x0000000000000180L,0x0000000000001000L});
    public static final BitSet FOLLOW_COMMANDCHAR_in_selectCommand1375 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_option_in_selectCommand1377 = new BitSet(new long[]{0x0000000000000180L,0x0000000000001000L});
    public static final BitSet FOLLOW_ws_in_selectCommand1380 = new BitSet(new long[]{0x0000000000000180L,0x0000000000001000L});
    public static final BitSet FOLLOW_nl_in_selectCommand1384 = new BitSet(new long[]{0x0000000000000180L,0x0000000000001000L});
    public static final BitSet FOLLOW_COMMANDCHAR_in_selectCommand1398 = new BitSet(new long[]{0x0000000200000000L});
    public static final BitSet FOLLOW_otherwise_in_selectCommand1400 = new BitSet(new long[]{0x0000000000000180L,0x0000000000001000L});
    public static final BitSet FOLLOW_ws_in_selectCommand1405 = new BitSet(new long[]{0x0000000000000180L,0x0000000000001000L});
    public static final BitSet FOLLOW_nl_in_selectCommand1409 = new BitSet(new long[]{0x0000000000000180L,0x0000000000001000L});
    public static final BitSet FOLLOW_COMMANDCHAR_in_selectCommand1420 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_ENDSELECT_in_selectCommand1422 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OPTIONUNDEFINED_in_optionUndef1444 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0x00003FFFFFFFFFFFL});
    public static final BitSet FOLLOW_command_in_optionUndef1465 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0x00003FFFFFFFFFFFL});
    public static final BitSet FOLLOW_stringExpression_in_optionUndef1478 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0x00003FFFFFFFFFFFL});
    public static final BitSet FOLLOW_ee_in_optionUndef1493 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0x00003FFFFFFFFFFFL});
    public static final BitSet FOLLOW_ws_in_optionUndef1505 = new BitSet(new long[]{0x0000000000000100L,0x0000000000001000L});
    public static final BitSet FOLLOW_COMMANDCHAR_in_optionUndef1518 = new BitSet(new long[]{0x0000000080000000L});
    public static final BitSet FOLLOW_ENDOPTION_in_optionUndef1520 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OPTION_in_option1545 = new BitSet(new long[]{0x5800000000000300L,0x0000019818401000L});
    public static final BitSet FOLLOW_ws_in_option1547 = new BitSet(new long[]{0x5800000000000300L,0x0000019818401000L});
    public static final BitSet FOLLOW_expression_in_option1552 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0x00003FFFFFFFFFFFL});
    public static final BitSet FOLLOW_ws_in_option1562 = new BitSet(new long[]{0x0000000000000100L,0x0000000001001000L});
    public static final BitSet FOLLOW_88_in_option1565 = new BitSet(new long[]{0x5800000000000300L,0x0000019818401000L});
    public static final BitSet FOLLOW_ws_in_option1567 = new BitSet(new long[]{0x5800000000000300L,0x0000019818401000L});
    public static final BitSet FOLLOW_expression_in_option1572 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0x00003FFFFFFFFFFFL});
    public static final BitSet FOLLOW_command_in_option1600 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0x00003FFFFFFFFFFFL});
    public static final BitSet FOLLOW_stringExpression_in_option1613 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0x00003FFFFFFFFFFFL});
    public static final BitSet FOLLOW_ee_in_option1628 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0x00003FFFFFFFFFFFL});
    public static final BitSet FOLLOW_ws_in_option1640 = new BitSet(new long[]{0x0000000000000100L,0x0000000000001000L});
    public static final BitSet FOLLOW_COMMANDCHAR_in_option1652 = new BitSet(new long[]{0x0000000080000000L});
    public static final BitSet FOLLOW_ENDOPTION_in_option1654 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OTHERWISE_in_otherwise1675 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0x00003FFFFFFFFFFFL});
    public static final BitSet FOLLOW_command_in_otherwise1703 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0x00003FFFFFFFFFFFL});
    public static final BitSet FOLLOW_stringExpression_in_otherwise1716 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0x00003FFFFFFFFFFFL});
    public static final BitSet FOLLOW_ee_in_otherwise1731 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0x00003FFFFFFFFFFFL});
    public static final BitSet FOLLOW_ws_in_otherwise1742 = new BitSet(new long[]{0x0000000000000100L,0x0000000000001000L});
    public static final BitSet FOLLOW_COMMANDCHAR_in_otherwise1754 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_ENDOTHERWISE_in_otherwise1756 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INSERT_in_insertCommand1783 = new BitSet(new long[]{0x5800000000000300L,0x0000019818401000L});
    public static final BitSet FOLLOW_ws_in_insertCommand1785 = new BitSet(new long[]{0x5800000000000300L,0x0000019818401000L});
    public static final BitSet FOLLOW_expression_in_insertCommand1790 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0x00003FFFFFFFFFFFL});
    public static final BitSet FOLLOW_NL_in_insertCommand1792 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0x00003FFFFFFFFFFFL});
    public static final BitSet FOLLOW_command_in_insertCommand1812 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0x00003FFFFFFFFFFFL});
    public static final BitSet FOLLOW_ws_in_insertCommand1816 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0x00003FFFFFFFFFFFL});
    public static final BitSet FOLLOW_COMMANDCHAR_in_insertCommand1832 = new BitSet(new long[]{0x0001000000000000L});
    public static final BitSet FOLLOW_varDesc_in_insertCommand1836 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0x00003FFFFFFFFFFFL});
    public static final BitSet FOLLOW_ws_in_insertCommand1840 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0x00003FFFFFFFFFFFL});
    public static final BitSet FOLLOW_COMMANDCHAR_in_insertCommand1856 = new BitSet(new long[]{0x0002000000000000L});
    public static final BitSet FOLLOW_iter_in_insertCommand1860 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0x00003FFFFFFFFFFFL});
    public static final BitSet FOLLOW_ws_in_insertCommand1864 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0x00003FFFFFFFFFFFL});
    public static final BitSet FOLLOW_stringExpression_in_insertCommand1880 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0x00003FFFFFFFFFFFL});
    public static final BitSet FOLLOW_ws_in_insertCommand1884 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0x00003FFFFFFFFFFFL});
    public static final BitSet FOLLOW_ee_in_insertCommand1901 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0x00003FFFFFFFFFFFL});
    public static final BitSet FOLLOW_ws_in_insertCommand1905 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0x00003FFFFFFFFFFFL});
    public static final BitSet FOLLOW_ws_in_insertCommand1917 = new BitSet(new long[]{0x0000000000000100L,0x0000000000001000L});
    public static final BitSet FOLLOW_COMMANDCHAR_in_insertCommand1930 = new BitSet(new long[]{0x0000001000000000L});
    public static final BitSet FOLLOW_ENDINSERT_in_insertCommand1932 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INSERTBEFORE_in_insertBefCommand1979 = new BitSet(new long[]{0x5800000000000300L,0x0000019818401000L});
    public static final BitSet FOLLOW_ws_in_insertBefCommand1983 = new BitSet(new long[]{0x5800000000000300L,0x0000019818401000L});
    public static final BitSet FOLLOW_expression_in_insertBefCommand1988 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0x00003FFFFFFFFFFFL});
    public static final BitSet FOLLOW_command_in_insertBefCommand2007 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0x00003FFFFFFFFFFFL});
    public static final BitSet FOLLOW_ws_in_insertBefCommand2011 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0x00003FFFFFFFFFFFL});
    public static final BitSet FOLLOW_stringExpression_in_insertBefCommand2027 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0x00003FFFFFFFFFFFL});
    public static final BitSet FOLLOW_ws_in_insertBefCommand2031 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0x00003FFFFFFFFFFFL});
    public static final BitSet FOLLOW_ee_in_insertBefCommand2048 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0x00003FFFFFFFFFFFL});
    public static final BitSet FOLLOW_ws_in_insertBefCommand2052 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0x00003FFFFFFFFFFFL});
    public static final BitSet FOLLOW_ws_in_insertBefCommand2064 = new BitSet(new long[]{0x0000000000000100L,0x0000000000001000L});
    public static final BitSet FOLLOW_COMMANDCHAR_in_insertBefCommand2077 = new BitSet(new long[]{0x0000001000000000L});
    public static final BitSet FOLLOW_ENDINSERT_in_insertBefCommand2079 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INSERTAFTER_in_insertAftCommand2126 = new BitSet(new long[]{0x5800000000000300L,0x0000019818401000L});
    public static final BitSet FOLLOW_ws_in_insertAftCommand2130 = new BitSet(new long[]{0x5800000000000300L,0x0000019818401000L});
    public static final BitSet FOLLOW_expression_in_insertAftCommand2135 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0x00003FFFFFFFFFFFL});
    public static final BitSet FOLLOW_command_in_insertAftCommand2155 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0x00003FFFFFFFFFFFL});
    public static final BitSet FOLLOW_ws_in_insertAftCommand2159 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0x00003FFFFFFFFFFFL});
    public static final BitSet FOLLOW_stringExpression_in_insertAftCommand2175 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0x00003FFFFFFFFFFFL});
    public static final BitSet FOLLOW_ws_in_insertAftCommand2179 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0x00003FFFFFFFFFFFL});
    public static final BitSet FOLLOW_ee_in_insertAftCommand2196 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0x00003FFFFFFFFFFFL});
    public static final BitSet FOLLOW_ws_in_insertAftCommand2200 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0x00003FFFFFFFFFFFL});
    public static final BitSet FOLLOW_ws_in_insertAftCommand2212 = new BitSet(new long[]{0x0000000000000100L,0x0000000000001000L});
    public static final BitSet FOLLOW_COMMANDCHAR_in_insertAftCommand2225 = new BitSet(new long[]{0x0000001000000000L});
    public static final BitSet FOLLOW_ENDINSERT_in_insertAftCommand2227 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EXTENDEDBREAK_in_breakCommand2273 = new BitSet(new long[]{0x5800000000000300L,0x0000019818401000L});
    public static final BitSet FOLLOW_ws_in_breakCommand2275 = new BitSet(new long[]{0x5800000000000300L,0x0000019818401000L});
    public static final BitSet FOLLOW_expression_in_breakCommand2280 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0x00003FFFFFFFFFFFL});
    public static final BitSet FOLLOW_command_in_breakCommand2300 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0x00003FFFFFFFFFFFL});
    public static final BitSet FOLLOW_ws_in_breakCommand2304 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0x00003FFFFFFFFFFFL});
    public static final BitSet FOLLOW_COMMANDCHAR_in_breakCommand2320 = new BitSet(new long[]{0x0001000000000000L});
    public static final BitSet FOLLOW_varDesc_in_breakCommand2324 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0x00003FFFFFFFFFFFL});
    public static final BitSet FOLLOW_ws_in_breakCommand2328 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0x00003FFFFFFFFFFFL});
    public static final BitSet FOLLOW_COMMANDCHAR_in_breakCommand2344 = new BitSet(new long[]{0x0002000000000000L});
    public static final BitSet FOLLOW_iter_in_breakCommand2348 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0x00003FFFFFFFFFFFL});
    public static final BitSet FOLLOW_ws_in_breakCommand2352 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0x00003FFFFFFFFFFFL});
    public static final BitSet FOLLOW_stringExpression_in_breakCommand2368 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0x00003FFFFFFFFFFFL});
    public static final BitSet FOLLOW_ws_in_breakCommand2372 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0x00003FFFFFFFFFFFL});
    public static final BitSet FOLLOW_ee_in_breakCommand2389 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0x00003FFFFFFFFFFFL});
    public static final BitSet FOLLOW_ws_in_breakCommand2393 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0x00003FFFFFFFFFFFL});
    public static final BitSet FOLLOW_ws_in_breakCommand2405 = new BitSet(new long[]{0x0000000000000100L,0x0000000000001000L});
    public static final BitSet FOLLOW_COMMANDCHAR_in_breakCommand2418 = new BitSet(new long[]{0x0000010000000000L});
    public static final BitSet FOLLOW_ENDBREAK_in_breakCommand2420 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BREAK_in_breakCommand2451 = new BitSet(new long[]{0x5800000000000300L,0x0000019818401000L});
    public static final BitSet FOLLOW_ws_in_breakCommand2453 = new BitSet(new long[]{0x5800000000000300L,0x0000019818401000L});
    public static final BitSet FOLLOW_expression_in_breakCommand2458 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WHILE_in_whileCommand2496 = new BitSet(new long[]{0x5800000000000300L,0x0000019818401000L});
    public static final BitSet FOLLOW_ws_in_whileCommand2498 = new BitSet(new long[]{0x5800000000000300L,0x0000019818401000L});
    public static final BitSet FOLLOW_expression_in_whileCommand2503 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0x00003FFFFFFFFFFFL});
    public static final BitSet FOLLOW_ws_in_whileCommand2511 = new BitSet(new long[]{0x0000000000000100L,0x0000000000201000L});
    public static final BitSet FOLLOW_85_in_whileCommand2514 = new BitSet(new long[]{0x5800000000000300L,0x0000019818401000L});
    public static final BitSet FOLLOW_ws_in_whileCommand2516 = new BitSet(new long[]{0x5800000000000300L,0x0000019818401000L});
    public static final BitSet FOLLOW_expression_in_whileCommand2521 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0x00003FFFFFFFFFFFL});
    public static final BitSet FOLLOW_NL_in_whileCommand2528 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0x00003FFFFFFFFFFFL});
    public static final BitSet FOLLOW_command_in_whileCommand2558 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0x00003FFFFFFFFFFFL});
    public static final BitSet FOLLOW_stringExpression_in_whileCommand2573 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0x00003FFFFFFFFFFFL});
    public static final BitSet FOLLOW_ws_in_whileCommand2577 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0x00003FFFFFFFFFFFL});
    public static final BitSet FOLLOW_ee_in_whileCommand2594 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0x00003FFFFFFFFFFFL});
    public static final BitSet FOLLOW_ws_in_whileCommand2598 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0x00003FFFFFFFFFFFL});
    public static final BitSet FOLLOW_ws_in_whileCommand2612 = new BitSet(new long[]{0x0000000000000100L,0x0000000000001000L});
    public static final BitSet FOLLOW_COMMANDCHAR_in_whileCommand2653 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_ENDWHILE_in_whileCommand2655 = new BitSet(new long[]{0x0000000000000082L});
    public static final BitSet FOLLOW_NL_in_whileCommand2657 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SETLOOP_in_setLoopCommand2675 = new BitSet(new long[]{0x0000000000000300L,0x0000000000001000L});
    public static final BitSet FOLLOW_ws_in_setLoopCommand2677 = new BitSet(new long[]{0x0000000000000300L,0x0000000000001000L});
    public static final BitSet FOLLOW_IDENT_in_setLoopCommand2682 = new BitSet(new long[]{0x0000000000000180L,0x0000000000001000L});
    public static final BitSet FOLLOW_ws_in_setLoopCommand2694 = new BitSet(new long[]{0x0000000000000180L,0x0000000000001000L});
    public static final BitSet FOLLOW_nl_in_setLoopCommand2698 = new BitSet(new long[]{0x0000000000000180L,0x0000000000001000L});
    public static final BitSet FOLLOW_COMMANDCHAR_in_setLoopCommand2724 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_setloopVars_in_setLoopCommand2726 = new BitSet(new long[]{0x0000000000000180L,0x0000000000001000L});
    public static final BitSet FOLLOW_ws_in_setLoopCommand2734 = new BitSet(new long[]{0x0000000000000180L,0x0000000000001000L});
    public static final BitSet FOLLOW_nl_in_setLoopCommand2738 = new BitSet(new long[]{0x0000000000000180L,0x0000000000001000L});
    public static final BitSet FOLLOW_COMMANDCHAR_in_setLoopCommand2752 = new BitSet(new long[]{0x0000028000000000L});
    public static final BitSet FOLLOW_iterBreakCommand_in_setLoopCommand2754 = new BitSet(new long[]{0x0000000000000180L,0x0000000000001000L});
    public static final BitSet FOLLOW_ws_in_setLoopCommand2758 = new BitSet(new long[]{0x0000000000000180L,0x0000000000001000L});
    public static final BitSet FOLLOW_nl_in_setLoopCommand2762 = new BitSet(new long[]{0x0000000000000180L,0x0000000000001000L});
    public static final BitSet FOLLOW_COMMANDCHAR_in_setLoopCommand2776 = new BitSet(new long[]{0x0002000000000000L});
    public static final BitSet FOLLOW_iter_in_setLoopCommand2778 = new BitSet(new long[]{0x0000000000000180L,0x0000000000001000L});
    public static final BitSet FOLLOW_ws_in_setLoopCommand2790 = new BitSet(new long[]{0x0000000000000180L,0x0000000000001000L});
    public static final BitSet FOLLOW_nl_in_setLoopCommand2794 = new BitSet(new long[]{0x0000000000000180L,0x0000000000001000L});
    public static final BitSet FOLLOW_COMMANDCHAR_in_setLoopCommand2813 = new BitSet(new long[]{0x0000200000000000L});
    public static final BitSet FOLLOW_ENDSETLOOP_in_setLoopCommand2815 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VARS_in_setloopVars2846 = new BitSet(new long[]{0x0000000000000180L,0x0000000000001000L});
    public static final BitSet FOLLOW_ws_in_setloopVars2849 = new BitSet(new long[]{0x0000000000000180L,0x0000000000001000L});
    public static final BitSet FOLLOW_nl_in_setloopVars2853 = new BitSet(new long[]{0x0000000000000180L,0x0000000000001000L});
    public static final BitSet FOLLOW_COMMANDCHAR_in_setloopVars2866 = new BitSet(new long[]{0x0001000000000000L});
    public static final BitSet FOLLOW_varDesc_in_setloopVars2868 = new BitSet(new long[]{0x0000000000000180L,0x0000000000001000L});
    public static final BitSet FOLLOW_ws_in_setloopVars2872 = new BitSet(new long[]{0x0000000000000180L,0x0000000000001000L});
    public static final BitSet FOLLOW_nl_in_setloopVars2876 = new BitSet(new long[]{0x0000000000000180L,0x0000000000001000L});
    public static final BitSet FOLLOW_COMMANDCHAR_in_setloopVars2889 = new BitSet(new long[]{0x0000028000000000L});
    public static final BitSet FOLLOW_varBreakCommand_in_setloopVars2891 = new BitSet(new long[]{0x0000000000000180L,0x0000000000001000L});
    public static final BitSet FOLLOW_ws_in_setloopVars2895 = new BitSet(new long[]{0x0000000000000180L,0x0000000000001000L});
    public static final BitSet FOLLOW_nl_in_setloopVars2899 = new BitSet(new long[]{0x0000000000000180L,0x0000000000001000L});
    public static final BitSet FOLLOW_COMMANDCHAR_in_setloopVars2918 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_ENDVARS_in_setloopVars2920 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VAR_in_varDesc2935 = new BitSet(new long[]{0x0000000000000300L,0x0000000000001000L});
    public static final BitSet FOLLOW_ws_in_varDesc2937 = new BitSet(new long[]{0x0000000000000300L,0x0000000000001000L});
    public static final BitSet FOLLOW_IDENT_in_varDesc2942 = new BitSet(new long[]{0x0000000000000182L,0x0000000000101000L});
    public static final BitSet FOLLOW_ws_in_varDesc2945 = new BitSet(new long[]{0x0000000000000182L,0x0000000000101000L});
    public static final BitSet FOLLOW_84_in_varDesc2949 = new BitSet(new long[]{0x5800000000000300L,0x0000019818401000L});
    public static final BitSet FOLLOW_ws_in_varDesc2951 = new BitSet(new long[]{0x5800000000000300L,0x0000019818401000L});
    public static final BitSet FOLLOW_expression_in_varDesc2956 = new BitSet(new long[]{0x0000000000000182L,0x0000000000001000L});
    public static final BitSet FOLLOW_ws_in_varDesc2958 = new BitSet(new long[]{0x0000000000000182L,0x0000000000001000L});
    public static final BitSet FOLLOW_ws_in_varDesc2964 = new BitSet(new long[]{0x0000000000000182L,0x0000000000001000L});
    public static final BitSet FOLLOW_nl_in_varDesc2968 = new BitSet(new long[]{0x0000000000000182L,0x0000000000001000L});
    public static final BitSet FOLLOW_ITER_in_iter3003 = new BitSet(new long[]{0x0000000000000300L,0x0000000000001000L});
    public static final BitSet FOLLOW_ws_in_iter3005 = new BitSet(new long[]{0x0000000000000300L,0x0000000000001000L});
    public static final BitSet FOLLOW_IDENT_in_iter3010 = new BitSet(new long[]{0x0000000000000100L,0x0000000000101000L});
    public static final BitSet FOLLOW_ws_in_iter3012 = new BitSet(new long[]{0x0000000000000100L,0x0000000000101000L});
    public static final BitSet FOLLOW_84_in_iter3015 = new BitSet(new long[]{0x5800000000000300L,0x0000019818401000L});
    public static final BitSet FOLLOW_ws_in_iter3017 = new BitSet(new long[]{0x5800000000000300L,0x0000019818401000L});
    public static final BitSet FOLLOW_expression_in_iter3022 = new BitSet(new long[]{0x0000000000000182L,0x0000000000201000L});
    public static final BitSet FOLLOW_ws_in_iter3024 = new BitSet(new long[]{0x0000000000000182L,0x0000000000201000L});
    public static final BitSet FOLLOW_85_in_iter3033 = new BitSet(new long[]{0x0000000000000300L,0x0000000000001000L});
    public static final BitSet FOLLOW_ws_in_iter3035 = new BitSet(new long[]{0x0000000000000300L,0x0000000000001000L});
    public static final BitSet FOLLOW_IDENT_in_iter3040 = new BitSet(new long[]{0x0000000000000100L,0x0000000000101000L});
    public static final BitSet FOLLOW_ws_in_iter3042 = new BitSet(new long[]{0x0000000000000100L,0x0000000000101000L});
    public static final BitSet FOLLOW_84_in_iter3045 = new BitSet(new long[]{0x5800000000000300L,0x0000019818401000L});
    public static final BitSet FOLLOW_ws_in_iter3047 = new BitSet(new long[]{0x5800000000000300L,0x0000019818401000L});
    public static final BitSet FOLLOW_expression_in_iter3052 = new BitSet(new long[]{0x0000000000000182L,0x0000000000201000L});
    public static final BitSet FOLLOW_ws_in_iter3054 = new BitSet(new long[]{0x0000000000000182L,0x0000000000201000L});
    public static final BitSet FOLLOW_ws_in_iter3063 = new BitSet(new long[]{0x0000000000000182L,0x0000000000001000L});
    public static final BitSet FOLLOW_nl_in_iter3067 = new BitSet(new long[]{0x0000000000000182L,0x0000000000001000L});
    public static final BitSet FOLLOW_EXTENDEDBREAK_in_iterBreakCommand3106 = new BitSet(new long[]{0x5800000000000300L,0x0000019818401000L});
    public static final BitSet FOLLOW_ws_in_iterBreakCommand3108 = new BitSet(new long[]{0x5800000000000300L,0x0000019818401000L});
    public static final BitSet FOLLOW_expression_in_iterBreakCommand3113 = new BitSet(new long[]{0x0000000000000180L,0x0000000000001000L});
    public static final BitSet FOLLOW_ws_in_iterBreakCommand3117 = new BitSet(new long[]{0x0000000000000180L,0x0000000000001000L});
    public static final BitSet FOLLOW_nl_in_iterBreakCommand3121 = new BitSet(new long[]{0x0000000000000180L,0x0000000000001000L});
    public static final BitSet FOLLOW_COMMANDCHAR_in_iterBreakCommand3150 = new BitSet(new long[]{0x0002000000000000L});
    public static final BitSet FOLLOW_iter_in_iterBreakCommand3154 = new BitSet(new long[]{0x0000000000000180L,0x0000000000001000L});
    public static final BitSet FOLLOW_ws_in_iterBreakCommand3158 = new BitSet(new long[]{0x0000000000000180L,0x0000000000001000L});
    public static final BitSet FOLLOW_ws_in_iterBreakCommand3171 = new BitSet(new long[]{0x0000000000000180L,0x0000000000001000L});
    public static final BitSet FOLLOW_nl_in_iterBreakCommand3175 = new BitSet(new long[]{0x0000000000000180L,0x0000000000001000L});
    public static final BitSet FOLLOW_COMMANDCHAR_in_iterBreakCommand3192 = new BitSet(new long[]{0x0000010000000000L});
    public static final BitSet FOLLOW_ENDBREAK_in_iterBreakCommand3194 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BREAK_in_iterBreakCommand3238 = new BitSet(new long[]{0x5800000000000300L,0x0000019818401000L});
    public static final BitSet FOLLOW_ws_in_iterBreakCommand3240 = new BitSet(new long[]{0x5800000000000300L,0x0000019818401000L});
    public static final BitSet FOLLOW_expression_in_iterBreakCommand3245 = new BitSet(new long[]{0x0000000000000182L,0x0000000000001000L});
    public static final BitSet FOLLOW_ws_in_iterBreakCommand3249 = new BitSet(new long[]{0x0000000000000182L,0x0000000000001000L});
    public static final BitSet FOLLOW_nl_in_iterBreakCommand3253 = new BitSet(new long[]{0x0000000000000182L,0x0000000000001000L});
    public static final BitSet FOLLOW_EXTENDEDBREAK_in_varBreakCommand3303 = new BitSet(new long[]{0x5800000000000300L,0x0000019818401000L});
    public static final BitSet FOLLOW_ws_in_varBreakCommand3305 = new BitSet(new long[]{0x5800000000000300L,0x0000019818401000L});
    public static final BitSet FOLLOW_expression_in_varBreakCommand3310 = new BitSet(new long[]{0x0000000000000180L,0x0000000000001000L});
    public static final BitSet FOLLOW_ws_in_varBreakCommand3314 = new BitSet(new long[]{0x0000000000000180L,0x0000000000001000L});
    public static final BitSet FOLLOW_nl_in_varBreakCommand3318 = new BitSet(new long[]{0x0000000000000180L,0x0000000000001000L});
    public static final BitSet FOLLOW_COMMANDCHAR_in_varBreakCommand3347 = new BitSet(new long[]{0x0001000000000000L});
    public static final BitSet FOLLOW_varDesc_in_varBreakCommand3351 = new BitSet(new long[]{0x0000000000000180L,0x0000000000001000L});
    public static final BitSet FOLLOW_ws_in_varBreakCommand3355 = new BitSet(new long[]{0x0000000000000180L,0x0000000000001000L});
    public static final BitSet FOLLOW_ws_in_varBreakCommand3368 = new BitSet(new long[]{0x0000000000000180L,0x0000000000001000L});
    public static final BitSet FOLLOW_nl_in_varBreakCommand3372 = new BitSet(new long[]{0x0000000000000180L,0x0000000000001000L});
    public static final BitSet FOLLOW_COMMANDCHAR_in_varBreakCommand3389 = new BitSet(new long[]{0x0000010000000000L});
    public static final BitSet FOLLOW_ENDBREAK_in_varBreakCommand3391 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BREAK_in_varBreakCommand3434 = new BitSet(new long[]{0x5800000000000300L,0x0000019818401000L});
    public static final BitSet FOLLOW_ws_in_varBreakCommand3436 = new BitSet(new long[]{0x5800000000000300L,0x0000019818401000L});
    public static final BitSet FOLLOW_expression_in_varBreakCommand3441 = new BitSet(new long[]{0x0000000000000182L,0x0000000000001000L});
    public static final BitSet FOLLOW_ws_in_varBreakCommand3445 = new BitSet(new long[]{0x0000000000000182L,0x0000000000001000L});
    public static final BitSet FOLLOW_nl_in_varBreakCommand3449 = new BitSet(new long[]{0x0000000000000182L,0x0000000000001000L});
    public static final BitSet FOLLOW_shortMessage_in_messageCommand3484 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_extendedMessage_in_messageCommand3488 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_messageif_in_messageCommand3492 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_extendedMessageif_in_messageCommand3496 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_messagedebug_in_messageCommand3500 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_extendedMessagedebug_in_messageCommand3504 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MESSAGE_in_shortMessage3516 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF2L,0x00003FFFFFFFFFFFL});
    public static final BitSet FOLLOW_stringExpression_in_shortMessage3527 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF2L,0x00003FFFFFFFFFFFL});
    public static final BitSet FOLLOW_set_in_shortMessage3538 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF2L,0x00003FFFFFFFFFFFL});
    public static final BitSet FOLLOW_ws_in_shortMessage3550 = new BitSet(new long[]{0x0000000000000182L,0x0000000000001000L});
    public static final BitSet FOLLOW_NL_in_shortMessage3555 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EXTENDEDMESSAGE_in_extendedMessage3568 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0x00003FFFFFFFFFFFL});
    public static final BitSet FOLLOW_stringExpression_in_extendedMessage3576 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0x00003FFFFFFFFFFFL});
    public static final BitSet FOLLOW_ee_in_extendedMessage3586 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0x00003FFFFFFFFFFFL});
    public static final BitSet FOLLOW_COMMANDCHAR_in_extendedMessage3599 = new BitSet(new long[]{0x0010000000000000L});
    public static final BitSet FOLLOW_ENDMESSAGE_in_extendedMessage3601 = new BitSet(new long[]{0x0000000000000082L});
    public static final BitSet FOLLOW_NL_in_extendedMessage3603 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MESSAGEIF_in_messageif3622 = new BitSet(new long[]{0x4000000000000300L,0x0000019818401000L});
    public static final BitSet FOLLOW_ws_in_messageif3624 = new BitSet(new long[]{0x4000000000000300L,0x0000019818401000L});
    public static final BitSet FOLLOW_86_in_messageif3627 = new BitSet(new long[]{0x4000000000000300L,0x0000019818401000L});
    public static final BitSet FOLLOW_freeExpression_in_messageif3632 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF2L,0x00003FFFFFFFFFFFL});
    public static final BitSet FOLLOW_87_in_messageif3634 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF2L,0x00003FFFFFFFFFFFL});
    public static final BitSet FOLLOW_stringExpression_in_messageif3650 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF2L,0x00003FFFFFFFFFFFL});
    public static final BitSet FOLLOW_set_in_messageif3661 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF2L,0x00003FFFFFFFFFFFL});
    public static final BitSet FOLLOW_ws_in_messageif3674 = new BitSet(new long[]{0x0000000000000182L,0x0000000000001000L});
    public static final BitSet FOLLOW_NL_in_messageif3679 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EXTENDEDMESSAGEIF_in_extendedMessageif3700 = new BitSet(new long[]{0x4000000000000300L,0x0000019818401000L});
    public static final BitSet FOLLOW_ws_in_extendedMessageif3702 = new BitSet(new long[]{0x4000000000000300L,0x0000019818401000L});
    public static final BitSet FOLLOW_86_in_extendedMessageif3705 = new BitSet(new long[]{0x4000000000000300L,0x0000019818401000L});
    public static final BitSet FOLLOW_freeExpression_in_extendedMessageif3710 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0x00003FFFFFFFFFFFL});
    public static final BitSet FOLLOW_87_in_extendedMessageif3712 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0x00003FFFFFFFFFFFL});
    public static final BitSet FOLLOW_stringExpression_in_extendedMessageif3728 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0x00003FFFFFFFFFFFL});
    public static final BitSet FOLLOW_ee_in_extendedMessageif3739 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0x00003FFFFFFFFFFFL});
    public static final BitSet FOLLOW_COMMANDCHAR_in_extendedMessageif3753 = new BitSet(new long[]{0x0010000000000000L});
    public static final BitSet FOLLOW_ENDMESSAGE_in_extendedMessageif3755 = new BitSet(new long[]{0x0000000000000082L});
    public static final BitSet FOLLOW_NL_in_extendedMessageif3757 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MESSAGEDEBUG_in_messagedebug3769 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF2L,0x00003FFFFFFFFFFFL});
    public static final BitSet FOLLOW_stringExpression_in_messagedebug3778 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF2L,0x00003FFFFFFFFFFFL});
    public static final BitSet FOLLOW_ee_in_messagedebug3789 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF2L,0x00003FFFFFFFFFFFL});
    public static final BitSet FOLLOW_ws_in_messagedebug3800 = new BitSet(new long[]{0x0000000000000182L,0x0000000000001000L});
    public static final BitSet FOLLOW_NL_in_messagedebug3805 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EXTENDEDMESSAGEDEBUG_in_extendedMessagedebug3818 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0x00003FFFFFFFFFFFL});
    public static final BitSet FOLLOW_stringExpression_in_extendedMessagedebug3826 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0x00003FFFFFFFFFFFL});
    public static final BitSet FOLLOW_ee_in_extendedMessagedebug3836 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0x00003FFFFFFFFFFFL});
    public static final BitSet FOLLOW_COMMANDCHAR_in_extendedMessagedebug3849 = new BitSet(new long[]{0x0010000000000000L});
    public static final BitSet FOLLOW_ENDMESSAGE_in_extendedMessagedebug3851 = new BitSet(new long[]{0x0000000000000082L});
    public static final BitSet FOLLOW_NL_in_extendedMessagedebug3853 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TEXT_in_textCommand3865 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0x00003FFFFFFFFFFFL});
    public static final BitSet FOLLOW_ws_in_textCommand3868 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0x00003FFFFFFFFFFFL});
    public static final BitSet FOLLOW_NL_in_textCommand3872 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0x00003FFFFFFFFFFFL});
    public static final BitSet FOLLOW_stringExpression_in_textCommand3886 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0x00003FFFFFFFFFFFL});
    public static final BitSet FOLLOW_command_in_textCommand3896 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0x00003FFFFFFFFFFFL});
    public static final BitSet FOLLOW_ee_in_textCommand3908 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0x00003FFFFFFFFFFFL});
    public static final BitSet FOLLOW_ws_in_textCommand3919 = new BitSet(new long[]{0x0000000000000100L,0x0000000000001000L});
    public static final BitSet FOLLOW_COMMANDCHAR_in_textCommand3924 = new BitSet(new long[]{0x0400000000000000L});
    public static final BitSet FOLLOW_ENDTEXT_in_textCommand3926 = new BitSet(new long[]{0x0000000000000082L});
    public static final BitSet FOLLOW_NL_in_textCommand3928 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_freeExpression_in_expression3945 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stringExpression_in_expression3951 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ws_in_expression3958 = new BitSet(new long[]{0x0800000000000100L,0x0000000000001000L});
    public static final BitSet FOLLOW_STRING_in_expression3961 = new BitSet(new long[]{0x0000000000000102L,0x0000000000001000L});
    public static final BitSet FOLLOW_ws_in_expression3963 = new BitSet(new long[]{0x0000000000000102L,0x0000000000001000L});
    public static final BitSet FOLLOW_STRING_in_stringExpression3981 = new BitSet(new long[]{0x1800000000000000L});
    public static final BitSet FOLLOW_nameExpression_in_stringExpression3984 = new BitSet(new long[]{0x1800000000000002L});
    public static final BitSet FOLLOW_STRING_in_stringExpression3987 = new BitSet(new long[]{0x1800000000000002L});
    public static final BitSet FOLLOW_EPRESSIONCHAR_in_nameExpression4009 = new BitSet(new long[]{0x2000000000000100L,0x0000000000001000L});
    public static final BitSet FOLLOW_ws_in_nameExpression4012 = new BitSet(new long[]{0x2000000000000100L,0x0000000000001000L});
    public static final BitSet FOLLOW_simpleExpr_in_nameExpression4016 = new BitSet(new long[]{0x1000000000000100L,0x0000000000001000L});
    public static final BitSet FOLLOW_ws_in_nameExpression4018 = new BitSet(new long[]{0x1000000000000100L,0x0000000000001000L});
    public static final BitSet FOLLOW_EPRESSIONCHAR_in_nameExpression4022 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EPRESSIONCHAR_in_nameExpression4035 = new BitSet(new long[]{0x4000000000000300L,0x0000019818401000L});
    public static final BitSet FOLLOW_ws_in_nameExpression4038 = new BitSet(new long[]{0x4000000000000300L,0x0000019818401000L});
    public static final BitSet FOLLOW_freeExpression_in_nameExpression4042 = new BitSet(new long[]{0x1000000000000100L,0x0000000000001000L});
    public static final BitSet FOLLOW_ws_in_nameExpression4044 = new BitSet(new long[]{0x1000000000000100L,0x0000000000001000L});
    public static final BitSet FOLLOW_EPRESSIONCHAR_in_nameExpression4048 = new BitSet(new long[]{0x1000000000000002L});
    public static final BitSet FOLLOW_REFERENCECHAR_in_simpleExpr4067 = new BitSet(new long[]{0x2000000000000302L,0x0000000000001000L});
    public static final BitSet FOLLOW_nameExprTerm_in_simpleExpr4070 = new BitSet(new long[]{0x2000000000000302L,0x0000000000001000L});
    public static final BitSet FOLLOW_IDENT_in_nameExprTerm4088 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REFERENCECHAR_in_nameExprTerm4095 = new BitSet(new long[]{0x2000000000000100L,0x0000000000001000L});
    public static final BitSet FOLLOW_simpleExpr_in_nameExprTerm4098 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_simpleExpr_in_nameExprTerm4105 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_relation_in_freeExpression4127 = new BitSet(new long[]{0x0000000000000002L,0x0000000006000000L});
    public static final BitSet FOLLOW_89_in_freeExpression4132 = new BitSet(new long[]{0x4000000000000300L,0x0000019818401000L});
    public static final BitSet FOLLOW_90_in_freeExpression4137 = new BitSet(new long[]{0x4000000000000300L,0x0000019818401000L});
    public static final BitSet FOLLOW_relation_in_freeExpression4143 = new BitSet(new long[]{0x0000000000000002L,0x0000000006000000L});
    public static final BitSet FOLLOW_ws_in_arithmeticTerm4166 = new BitSet(new long[]{0x4000000000000300L,0x0000000018401000L});
    public static final BitSet FOLLOW_IDENT_in_arithmeticTerm4170 = new BitSet(new long[]{0x0000000000000102L,0x0000000000001000L});
    public static final BitSet FOLLOW_86_in_arithmeticTerm4178 = new BitSet(new long[]{0x4000000000000300L,0x0000019818401000L});
    public static final BitSet FOLLOW_ws_in_arithmeticTerm4181 = new BitSet(new long[]{0x4000000000000300L,0x0000019818401000L});
    public static final BitSet FOLLOW_freeExpression_in_arithmeticTerm4185 = new BitSet(new long[]{0x0000000000000100L,0x0000000000801000L});
    public static final BitSet FOLLOW_ws_in_arithmeticTerm4187 = new BitSet(new long[]{0x0000000000000100L,0x0000000000801000L});
    public static final BitSet FOLLOW_87_in_arithmeticTerm4191 = new BitSet(new long[]{0x0000000000000102L,0x0000000000001000L});
    public static final BitSet FOLLOW_set_in_arithmeticTerm4200 = new BitSet(new long[]{0x0000000000000102L,0x0000000000001000L});
    public static final BitSet FOLLOW_INTEGER_in_arithmeticTerm4214 = new BitSet(new long[]{0x0000000000000102L,0x0000000000001000L});
    public static final BitSet FOLLOW_ws_in_arithmeticTerm4217 = new BitSet(new long[]{0x0000000000000102L,0x0000000000001000L});
    public static final BitSet FOLLOW_add_in_relation4240 = new BitSet(new long[]{0x0000000000000002L,0x00000007E0000000L});
    public static final BitSet FOLLOW_93_in_relation4244 = new BitSet(new long[]{0x4000000000000300L,0x0000019818401000L});
    public static final BitSet FOLLOW_94_in_relation4249 = new BitSet(new long[]{0x4000000000000300L,0x0000019818401000L});
    public static final BitSet FOLLOW_95_in_relation4254 = new BitSet(new long[]{0x4000000000000300L,0x0000019818401000L});
    public static final BitSet FOLLOW_96_in_relation4259 = new BitSet(new long[]{0x4000000000000300L,0x0000019818401000L});
    public static final BitSet FOLLOW_97_in_relation4264 = new BitSet(new long[]{0x4000000000000300L,0x0000019818401000L});
    public static final BitSet FOLLOW_98_in_relation4269 = new BitSet(new long[]{0x4000000000000300L,0x0000019818401000L});
    public static final BitSet FOLLOW_add_in_relation4273 = new BitSet(new long[]{0x0000000000000002L,0x00000007E0000000L});
    public static final BitSet FOLLOW_mult_in_add4289 = new BitSet(new long[]{0x0000000000000002L,0x0000001800000000L});
    public static final BitSet FOLLOW_99_in_add4293 = new BitSet(new long[]{0x4000000000000300L,0x0000019818401000L});
    public static final BitSet FOLLOW_100_in_add4298 = new BitSet(new long[]{0x4000000000000300L,0x0000019818401000L});
    public static final BitSet FOLLOW_mult_in_add4302 = new BitSet(new long[]{0x0000000000000002L,0x0000001800000000L});
    public static final BitSet FOLLOW_unary_in_mult4319 = new BitSet(new long[]{0x0000000000000002L,0x0000006000000000L});
    public static final BitSet FOLLOW_101_in_mult4323 = new BitSet(new long[]{0x4000000000000300L,0x0000019818401000L});
    public static final BitSet FOLLOW_102_in_mult4328 = new BitSet(new long[]{0x4000000000000300L,0x0000019818401000L});
    public static final BitSet FOLLOW_unary_in_mult4332 = new BitSet(new long[]{0x0000000000000002L,0x0000006000000000L});
    public static final BitSet FOLLOW_99_in_unary4350 = new BitSet(new long[]{0x4000000000000300L,0x0000001818401000L});
    public static final BitSet FOLLOW_negation_in_unary4355 = new BitSet(new long[]{0x4000000000000300L,0x0000001818401000L});
    public static final BitSet FOLLOW_arithmeticTerm_in_unary4360 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ws_in_unary4366 = new BitSet(new long[]{0x0000000000000100L,0x0000008000001000L});
    public static final BitSet FOLLOW_defined_in_unary4369 = new BitSet(new long[]{0x4000000000000300L,0x0000001818401000L});
    public static final BitSet FOLLOW_ws_in_unary4372 = new BitSet(new long[]{0x4000000000000300L,0x0000001818401000L});
    public static final BitSet FOLLOW_arithmeticTerm_in_unary4375 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ws_in_unary4381 = new BitSet(new long[]{0x4000000000000300L,0x0000019818401000L});
    public static final BitSet FOLLOW_bpv_in_unary4384 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_artvarchar_in_bpv4401 = new BitSet(new long[]{0x8000000000000000L});
    public static final BitSet FOLLOW_ISLAST_in_bpv4404 = new BitSet(new long[]{0x4000000000000300L,0x0000001818401000L});
    public static final BitSet FOLLOW_arithmeticTerm_in_bpv4406 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_artvarchar_in_bpv4412 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_ISFIRST_in_bpv4415 = new BitSet(new long[]{0x4000000000000300L,0x0000001818401000L});
    public static final BitSet FOLLOW_arithmeticTerm_in_bpv4417 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_artvarchar_in_bpv4423 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_SIZE_in_bpv4426 = new BitSet(new long[]{0x4000000000000300L,0x0000001818401000L});
    public static final BitSet FOLLOW_arithmeticTerm_in_bpv4428 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_artvarchar_in_bpv4434 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_ISNUMERIC_in_bpv4437 = new BitSet(new long[]{0x4000000000000300L,0x0000001818401000L});
    public static final BitSet FOLLOW_arithmeticTerm_in_bpv4439 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_artvarchar_in_bpv4445 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_ULCAP_in_bpv4448 = new BitSet(new long[]{0x4000000000000300L,0x0000001818401000L});
    public static final BitSet FOLLOW_arithmeticTerm_in_bpv4450 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_artvarchar_in_bpv4456 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_LLCAP_in_bpv4459 = new BitSet(new long[]{0x4000000000000300L,0x0000001818401000L});
    public static final BitSet FOLLOW_arithmeticTerm_in_bpv4461 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_artvarchar_in_bpv4467 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_DEBUGMODE_in_bpv4470 = new BitSet(new long[]{0x0000000000000102L,0x0000000000001000L});
    public static final BitSet FOLLOW_ws_in_bpv4472 = new BitSet(new long[]{0x0000000000000102L,0x0000000000001000L});
    public static final BitSet FOLLOW_artvarchar_in_bpv4479 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_CURRENTFILE_in_bpv4482 = new BitSet(new long[]{0x0000000000000102L,0x0000000000001000L});
    public static final BitSet FOLLOW_ws_in_bpv4484 = new BitSet(new long[]{0x0000000000000102L,0x0000000000001000L});
    public static final BitSet FOLLOW_artvarchar_in_bpv4491 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_DEFAULTOUTPUT_in_bpv4494 = new BitSet(new long[]{0x0000000000000102L,0x0000000000001000L});
    public static final BitSet FOLLOW_ws_in_bpv4496 = new BitSet(new long[]{0x0000000000000102L,0x0000000000001000L});
    public static final BitSet FOLLOW_artvarchar_in_bpv4503 = new BitSet(new long[]{0x0000000000100000L});
    public static final BitSet FOLLOW_OUTFILE_in_bpv4506 = new BitSet(new long[]{0x0000000000000102L,0x0000000000001000L});
    public static final BitSet FOLLOW_ws_in_bpv4508 = new BitSet(new long[]{0x0000000000000102L,0x0000000000001000L});
    public static final BitSet FOLLOW_artvarchar_in_bpv4515 = new BitSet(new long[]{0x0000000000080000L});
    public static final BitSet FOLLOW_OUTDIR_in_bpv4518 = new BitSet(new long[]{0x0000000000000102L,0x0000000000001000L});
    public static final BitSet FOLLOW_ws_in_bpv4520 = new BitSet(new long[]{0x0000000000000102L,0x0000000000001000L});
    public static final BitSet FOLLOW_100_in_negation4534 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_103_in_defined4551 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_104_in_artvarchar4570 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ISLAST_in_islast4671 = new BitSet(new long[]{0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_86_in_islast4673 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_IDENT_in_islast4676 = new BitSet(new long[]{0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_87_in_islast4678 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ISFIRST_in_isfirst4685 = new BitSet(new long[]{0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_86_in_isfirst4687 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_IDENT_in_isfirst4690 = new BitSet(new long[]{0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_87_in_isfirst4692 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_ee4853 = new BitSet(new long[]{0x0000000000000002L,0x00003E0000001A00L});
    public static final BitSet FOLLOW_NOTNEWLINE_in_ee4861 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_QUOTATIONMARK_in_ee4865 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF2L,0x00003FFFFFFFFFFFL});
    public static final BitSet FOLLOW_WS_in_ee4874 = new BitSet(new long[]{0x0000000000000002L,0x0000000000001000L});
    public static final BitSet FOLLOW_105_in_ee4879 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_106_in_ee4883 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_107_in_ee4887 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_108_in_ee4891 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_109_in_ee4895 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WS_in_ws4971 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NL_in_nl4977 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ws_in_synpred2_command129 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NL_in_synpred3_command132 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ws_in_synpred4_command122 = new BitSet(new long[]{0x0000000000000100L,0x0000000000001000L});
    public static final BitSet FOLLOW_command_in_synpred4_command127 = new BitSet(new long[]{0x0000000000000182L,0x0000000000001000L});
    public static final BitSet FOLLOW_ws_in_synpred4_command129 = new BitSet(new long[]{0x0000000000000182L,0x0000000000001000L});
    public static final BitSet FOLLOW_NL_in_synpred4_command132 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ee_in_synpred6_command152 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ws_in_synpred23_command287 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NL_in_synpred24_command290 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_adaptCopyBinary_in_synpred27_command329 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ws_in_synpred29_command364 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ws_in_synpred30_command371 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ws_in_synpred32_command406 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ws_in_synpred35_command481 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ws_in_synpred36_command488 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ws_in_synpred37_command511 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ws_in_synpred38_command518 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ws_in_synpred39_command525 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ws_in_synpred43_command579 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ws_in_synpred44_command588 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ws_in_synpred46_command601 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ws_in_synpred48_command607 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ws_in_synpred49_command596 = new BitSet(new long[]{0x0000000000000100L,0x0000000000201000L});
    public static final BitSet FOLLOW_85_in_synpred49_command599 = new BitSet(new long[]{0x5800000000000380L,0x0000019818401000L});
    public static final BitSet FOLLOW_ws_in_synpred49_command601 = new BitSet(new long[]{0x5800000000000380L,0x0000019818401000L});
    public static final BitSet FOLLOW_NL_in_synpred49_command604 = new BitSet(new long[]{0x5800000000000380L,0x0000019818401000L});
    public static final BitSet FOLLOW_ws_in_synpred49_command607 = new BitSet(new long[]{0x5800000000000300L,0x0000019818401000L});
    public static final BitSet FOLLOW_expression_in_synpred49_command612 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ws_in_synpred50_command619 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NL_in_synpred51_command622 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ws_in_synpred54_command667 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ws_in_synpred55_command674 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NL_in_synpred56_command677 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ws_in_synpred57_command702 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ws_in_synpred58_command709 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NL_in_synpred59_command712 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ws_in_synpred60_command737 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ws_in_synpred61_command744 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NL_in_synpred62_command747 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ws_in_synpred63_command773 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_86_in_synpred64_command776 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_87_in_synpred65_command783 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NL_in_synpred66_command786 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stringExpression_in_synpred68_command823 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ee_in_synpred69_command838 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NL_in_synpred73_command894 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ws_in_synpred74_command923 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_86_in_synpred75_command926 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_87_in_synpred76_command933 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NL_in_synpred77_command936 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stringExpression_in_synpred79_command981 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ee_in_synpred80_command996 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NL_in_synpred82_command1028 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stringExpression_in_synpred84_command1057 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ee_in_synpred85_command1072 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stringExpression_in_synpred89_command1143 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ee_in_synpred90_command1158 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stringExpression_in_synpred94_command1231 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ee_in_synpred95_command1246 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ws_in_synpred98_command1318 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ws_in_synpred99_command1326 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nl_in_synpred100_command1330 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ws_in_synpred102_command1360 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nl_in_synpred103_command1364 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ws_in_synpred104_command1380 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nl_in_synpred105_command1384 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stringExpression_in_synpred111_command1478 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ee_in_synpred112_command1493 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ws_in_synpred114_command1547 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ws_in_synpred116_command1567 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ws_in_synpred117_command1562 = new BitSet(new long[]{0x0000000000000100L,0x0000000001001000L});
    public static final BitSet FOLLOW_88_in_synpred117_command1565 = new BitSet(new long[]{0x5800000000000300L,0x0000019818401000L});
    public static final BitSet FOLLOW_ws_in_synpred117_command1567 = new BitSet(new long[]{0x5800000000000300L,0x0000019818401000L});
    public static final BitSet FOLLOW_expression_in_synpred117_command1572 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stringExpression_in_synpred119_command1613 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ee_in_synpred120_command1628 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stringExpression_in_synpred123_command1716 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ee_in_synpred124_command1731 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ws_in_synpred126_command1785 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NL_in_synpred127_command1792 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ws_in_synpred128_command1816 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ws_in_synpred130_command1840 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ws_in_synpred132_command1864 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ws_in_synpred134_command1884 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stringExpression_in_synpred135_command1880 = new BitSet(new long[]{0x0000000000000102L,0x0000000000001000L});
    public static final BitSet FOLLOW_ws_in_synpred135_command1884 = new BitSet(new long[]{0x0000000000000102L,0x0000000000001000L});
    public static final BitSet FOLLOW_ws_in_synpred136_command1905 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ee_in_synpred137_command1901 = new BitSet(new long[]{0x0000000000000102L,0x0000000000001000L});
    public static final BitSet FOLLOW_ws_in_synpred137_command1905 = new BitSet(new long[]{0x0000000000000102L,0x0000000000001000L});
    public static final BitSet FOLLOW_ws_in_synpred139_command1983 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ws_in_synpred140_command2011 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ws_in_synpred142_command2031 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stringExpression_in_synpred143_command2027 = new BitSet(new long[]{0x0000000000000102L,0x0000000000001000L});
    public static final BitSet FOLLOW_ws_in_synpred143_command2031 = new BitSet(new long[]{0x0000000000000102L,0x0000000000001000L});
    public static final BitSet FOLLOW_ws_in_synpred144_command2052 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ee_in_synpred145_command2048 = new BitSet(new long[]{0x0000000000000102L,0x0000000000001000L});
    public static final BitSet FOLLOW_ws_in_synpred145_command2052 = new BitSet(new long[]{0x0000000000000102L,0x0000000000001000L});
    public static final BitSet FOLLOW_ws_in_synpred147_command2130 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ws_in_synpred148_command2159 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ws_in_synpred150_command2179 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stringExpression_in_synpred151_command2175 = new BitSet(new long[]{0x0000000000000102L,0x0000000000001000L});
    public static final BitSet FOLLOW_ws_in_synpred151_command2179 = new BitSet(new long[]{0x0000000000000102L,0x0000000000001000L});
    public static final BitSet FOLLOW_ws_in_synpred152_command2200 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ee_in_synpred153_command2196 = new BitSet(new long[]{0x0000000000000102L,0x0000000000001000L});
    public static final BitSet FOLLOW_ws_in_synpred153_command2200 = new BitSet(new long[]{0x0000000000000102L,0x0000000000001000L});
    public static final BitSet FOLLOW_ws_in_synpred155_command2275 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ws_in_synpred156_command2304 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ws_in_synpred158_command2328 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ws_in_synpred160_command2352 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ws_in_synpred162_command2372 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stringExpression_in_synpred163_command2368 = new BitSet(new long[]{0x0000000000000102L,0x0000000000001000L});
    public static final BitSet FOLLOW_ws_in_synpred163_command2372 = new BitSet(new long[]{0x0000000000000102L,0x0000000000001000L});
    public static final BitSet FOLLOW_ws_in_synpred164_command2393 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ee_in_synpred165_command2389 = new BitSet(new long[]{0x0000000000000102L,0x0000000000001000L});
    public static final BitSet FOLLOW_ws_in_synpred165_command2393 = new BitSet(new long[]{0x0000000000000102L,0x0000000000001000L});
    public static final BitSet FOLLOW_ws_in_synpred168_command2453 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ws_in_synpred169_command2498 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ws_in_synpred171_command2516 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ws_in_synpred172_command2511 = new BitSet(new long[]{0x0000000000000100L,0x0000000000201000L});
    public static final BitSet FOLLOW_85_in_synpred172_command2514 = new BitSet(new long[]{0x5800000000000300L,0x0000019818401000L});
    public static final BitSet FOLLOW_ws_in_synpred172_command2516 = new BitSet(new long[]{0x5800000000000300L,0x0000019818401000L});
    public static final BitSet FOLLOW_expression_in_synpred172_command2521 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NL_in_synpred173_command2528 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ws_in_synpred175_command2577 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stringExpression_in_synpred176_command2573 = new BitSet(new long[]{0x0000000000000102L,0x0000000000001000L});
    public static final BitSet FOLLOW_ws_in_synpred176_command2577 = new BitSet(new long[]{0x0000000000000102L,0x0000000000001000L});
    public static final BitSet FOLLOW_ws_in_synpred177_command2598 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ee_in_synpred178_command2594 = new BitSet(new long[]{0x0000000000000102L,0x0000000000001000L});
    public static final BitSet FOLLOW_ws_in_synpred178_command2598 = new BitSet(new long[]{0x0000000000000102L,0x0000000000001000L});
    public static final BitSet FOLLOW_NL_in_synpred180_command2657 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ws_in_synpred182_command2694 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nl_in_synpred183_command2698 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ws_in_synpred202_command2945 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ws_in_synpred203_command2951 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ws_in_synpred204_command2958 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_84_in_synpred205_command2949 = new BitSet(new long[]{0x5800000000000300L,0x0000019818401000L});
    public static final BitSet FOLLOW_ws_in_synpred205_command2951 = new BitSet(new long[]{0x5800000000000300L,0x0000019818401000L});
    public static final BitSet FOLLOW_expression_in_synpred205_command2956 = new BitSet(new long[]{0x0000000000000102L,0x0000000000001000L});
    public static final BitSet FOLLOW_ws_in_synpred205_command2958 = new BitSet(new long[]{0x0000000000000102L,0x0000000000001000L});
    public static final BitSet FOLLOW_ws_in_synpred206_command2964 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nl_in_synpred207_command2968 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ws_in_synpred210_command3017 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ws_in_synpred211_command3024 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ws_in_synpred214_command3047 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ws_in_synpred215_command3054 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_85_in_synpred216_command3033 = new BitSet(new long[]{0x0000000000000300L,0x0000000000001000L});
    public static final BitSet FOLLOW_ws_in_synpred216_command3035 = new BitSet(new long[]{0x0000000000000300L,0x0000000000001000L});
    public static final BitSet FOLLOW_IDENT_in_synpred216_command3040 = new BitSet(new long[]{0x0000000000000100L,0x0000000000101000L});
    public static final BitSet FOLLOW_ws_in_synpred216_command3042 = new BitSet(new long[]{0x0000000000000100L,0x0000000000101000L});
    public static final BitSet FOLLOW_84_in_synpred216_command3045 = new BitSet(new long[]{0x5800000000000300L,0x0000019818401000L});
    public static final BitSet FOLLOW_ws_in_synpred216_command3047 = new BitSet(new long[]{0x5800000000000300L,0x0000019818401000L});
    public static final BitSet FOLLOW_expression_in_synpred216_command3052 = new BitSet(new long[]{0x0000000000000102L,0x0000000000001000L});
    public static final BitSet FOLLOW_ws_in_synpred216_command3054 = new BitSet(new long[]{0x0000000000000102L,0x0000000000001000L});
    public static final BitSet FOLLOW_ws_in_synpred217_command3063 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nl_in_synpred218_command3067 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ws_in_synpred219_command3108 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ws_in_synpred222_command3158 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ws_in_synpred226_command3240 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ws_in_synpred227_command3249 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nl_in_synpred228_command3253 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ws_in_synpred229_command3305 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ws_in_synpred232_command3355 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ws_in_synpred236_command3436 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ws_in_synpred237_command3445 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nl_in_synpred238_command3449 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stringExpression_in_synpred244_command3527 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_synpred245_command3538 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ws_in_synpred246_command3550 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NL_in_synpred247_command3555 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stringExpression_in_synpred248_command3576 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ee_in_synpred249_command3586 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NL_in_synpred250_command3603 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ws_in_synpred251_command3624 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_86_in_synpred252_command3627 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_87_in_synpred253_command3634 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stringExpression_in_synpred254_command3650 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_synpred255_command3661 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ws_in_synpred256_command3674 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NL_in_synpred257_command3679 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ws_in_synpred258_command3702 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_86_in_synpred259_command3705 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_87_in_synpred260_command3712 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stringExpression_in_synpred261_command3728 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ee_in_synpred262_command3739 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NL_in_synpred263_command3757 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stringExpression_in_synpred264_command3778 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ee_in_synpred265_command3789 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ws_in_synpred266_command3800 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NL_in_synpred267_command3805 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stringExpression_in_synpred268_command3826 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ee_in_synpred269_command3836 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NL_in_synpred270_command3853 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ws_in_synpred271_command3868 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NL_in_synpred272_command3872 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stringExpression_in_synpred273_command3886 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ee_in_synpred275_command3908 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NL_in_synpred277_command3928 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stringExpression_in_synpred279_command3951 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ws_in_synpred281_command3963 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nameExpression_in_synpred283_command3984 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRING_in_synpred284_command3987 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRING_in_synpred285_command3981 = new BitSet(new long[]{0x1800000000000000L});
    public static final BitSet FOLLOW_nameExpression_in_synpred285_command3984 = new BitSet(new long[]{0x1800000000000002L});
    public static final BitSet FOLLOW_STRING_in_synpred285_command3987 = new BitSet(new long[]{0x0800000000000002L});
    public static final BitSet FOLLOW_ws_in_synpred289_command4038 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EPRESSIONCHAR_in_synpred291_command4048 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nameExprTerm_in_synpred292_command4070 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REFERENCECHAR_in_synpred294_command4095 = new BitSet(new long[]{0x2000000000000100L,0x0000000000001000L});
    public static final BitSet FOLLOW_simpleExpr_in_synpred294_command4098 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_synpred296_command4131 = new BitSet(new long[]{0x4000000000000300L,0x0000019818401000L});
    public static final BitSet FOLLOW_relation_in_synpred296_command4143 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ws_in_synpred299_command4181 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ws_in_synpred304_command4217 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_synpred310_command4243 = new BitSet(new long[]{0x4000000000000300L,0x0000019818401000L});
    public static final BitSet FOLLOW_add_in_synpred310_command4273 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_synpred312_command4292 = new BitSet(new long[]{0x4000000000000300L,0x0000019818401000L});
    public static final BitSet FOLLOW_mult_in_synpred312_command4302 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_synpred314_command4322 = new BitSet(new long[]{0x4000000000000300L,0x0000019818401000L});
    public static final BitSet FOLLOW_unary_in_synpred314_command4332 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ws_in_synpred319_command4372 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ws_in_synpred328_command4472 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ws_in_synpred330_command4484 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ws_in_synpred332_command4496 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ws_in_synpred334_command4508 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ws_in_synpred336_command4520 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NOTNEWLINE_in_synpred338_command4861 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_QUOTATIONMARK_in_synpred340_command4865 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF2L,0x00003FFFFFFFFFFFL});
    public static final BitSet FOLLOW_WS_in_synpred341_command4874 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WS_in_synpred342_command4874 = new BitSet(new long[]{0x0000000000000002L,0x0000000000001000L});
    public static final BitSet FOLLOW_105_in_synpred343_command4879 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_106_in_synpred344_command4883 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_107_in_synpred345_command4887 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_108_in_synpred346_command4891 = new BitSet(new long[]{0x0000000000000002L});

}